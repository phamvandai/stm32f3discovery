
I2C_BUILTIN.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002c1c  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000c8  08002da4  08002da4  00012da4  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  08002e6c  08002e6c  00012e6c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  08002e70  08002e70  00012e70  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000008  20000000  08002e74  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .ccmram       00000000  10000000  10000000  00020008  2**0
                  CONTENTS
  7 .bss          0000059c  20000008  20000008  00020008  2**2
                  ALLOC
  8 ._user_heap_stack 00000600  200005a4  200005a4  00020008  2**0
                  ALLOC
  9 .ARM.attributes 00000030  00000000  00000000  00020008  2**0
                  CONTENTS, READONLY
 10 .debug_info   0001b7db  00000000  00000000  00020038  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 00003343  00000000  00000000  0003b813  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    00009b04  00000000  00000000  0003eb56  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_aranges 00000b88  00000000  00000000  00048660  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_ranges 000012c8  00000000  00000000  000491e8  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_line   00007666  00000000  00000000  0004a4b0  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_str    00004309  00000000  00000000  00051b16  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .comment      0000007c  00000000  00000000  00055e1f  2**0
                  CONTENTS, READONLY
 18 .debug_frame  000022d0  00000000  00000000  00055e9c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000008 	.word	0x20000008
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08002d8c 	.word	0x08002d8c

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	2000000c 	.word	0x2000000c
 80001c4:	08002d8c 	.word	0x08002d8c

080001c8 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80001c8:	b510      	push	{r4, lr}
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  HAL_SYSTICK_Config(SystemCoreClock / 1000U);
 80001ca:	4b08      	ldr	r3, [pc, #32]	; (80001ec <HAL_InitTick+0x24>)
{
 80001cc:	4604      	mov	r4, r0
  HAL_SYSTICK_Config(SystemCoreClock / 1000U);
 80001ce:	6818      	ldr	r0, [r3, #0]
 80001d0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80001d4:	fbb0 f0f3 	udiv	r0, r0, r3
 80001d8:	f000 f88c 	bl	80002f4 <HAL_SYSTICK_Config>
 
  /*Configure the SysTick IRQ priority */
  HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority ,0U);
 80001dc:	2200      	movs	r2, #0
 80001de:	4621      	mov	r1, r4
 80001e0:	f04f 30ff 	mov.w	r0, #4294967295
 80001e4:	f000 f846 	bl	8000274 <HAL_NVIC_SetPriority>

   /* Return function status */
  return HAL_OK;
}
 80001e8:	2000      	movs	r0, #0
 80001ea:	bd10      	pop	{r4, pc}
 80001ec:	20000004 	.word	0x20000004

080001f0 <HAL_Init>:
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80001f0:	4a07      	ldr	r2, [pc, #28]	; (8000210 <HAL_Init+0x20>)
{
 80001f2:	b508      	push	{r3, lr}
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80001f4:	6813      	ldr	r3, [r2, #0]
 80001f6:	f043 0310 	orr.w	r3, r3, #16
 80001fa:	6013      	str	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80001fc:	2003      	movs	r0, #3
 80001fe:	f000 f827 	bl	8000250 <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 8000202:	2000      	movs	r0, #0
 8000204:	f7ff ffe0 	bl	80001c8 <HAL_InitTick>
  HAL_MspInit();
 8000208:	f002 fc12 	bl	8002a30 <HAL_MspInit>
}
 800020c:	2000      	movs	r0, #0
 800020e:	bd08      	pop	{r3, pc}
 8000210:	40022000 	.word	0x40022000

08000214 <HAL_IncTick>:
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick++;
 8000214:	4a02      	ldr	r2, [pc, #8]	; (8000220 <HAL_IncTick+0xc>)
 8000216:	6813      	ldr	r3, [r2, #0]
 8000218:	3301      	adds	r3, #1
 800021a:	6013      	str	r3, [r2, #0]
 800021c:	4770      	bx	lr
 800021e:	bf00      	nop
 8000220:	20000050 	.word	0x20000050

08000224 <HAL_GetTick>:
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;  
 8000224:	4b01      	ldr	r3, [pc, #4]	; (800022c <HAL_GetTick+0x8>)
 8000226:	6818      	ldr	r0, [r3, #0]
}
 8000228:	4770      	bx	lr
 800022a:	bf00      	nop
 800022c:	20000050 	.word	0x20000050

08000230 <HAL_Delay>:
  *         implementations  in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(__IO uint32_t Delay)
{
 8000230:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8000232:	9001      	str	r0, [sp, #4]
  uint32_t tickstart = HAL_GetTick();
 8000234:	f7ff fff6 	bl	8000224 <HAL_GetTick>
  uint32_t wait = Delay;
 8000238:	9c01      	ldr	r4, [sp, #4]
  
  /* Add a period to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800023a:	1c63      	adds	r3, r4, #1
  uint32_t tickstart = HAL_GetTick();
 800023c:	4605      	mov	r5, r0
  {
     wait++;
 800023e:	bf18      	it	ne
 8000240:	3401      	addne	r4, #1
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 8000242:	f7ff ffef 	bl	8000224 <HAL_GetTick>
 8000246:	1b40      	subs	r0, r0, r5
 8000248:	42a0      	cmp	r0, r4
 800024a:	d3fa      	bcc.n	8000242 <HAL_Delay+0x12>
  {
  }
}
 800024c:	b003      	add	sp, #12
 800024e:	bd30      	pop	{r4, r5, pc}

08000250 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000250:	4a07      	ldr	r2, [pc, #28]	; (8000270 <HAL_NVIC_SetPriorityGrouping+0x20>)
 8000252:	68d3      	ldr	r3, [r2, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000254:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8000258:	041b      	lsls	r3, r3, #16
 800025a:	0c1b      	lsrs	r3, r3, #16
 800025c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 8000260:	0200      	lsls	r0, r0, #8
 8000262:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000266:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
  reg_value  =  (reg_value                                   |
 800026a:	4303      	orrs	r3, r0
  SCB->AIRCR =  reg_value;
 800026c:	60d3      	str	r3, [r2, #12]
 800026e:	4770      	bx	lr
 8000270:	e000ed00 	.word	0xe000ed00

08000274 <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000274:	4b17      	ldr	r3, [pc, #92]	; (80002d4 <HAL_NVIC_SetPriority+0x60>)
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000276:	b530      	push	{r4, r5, lr}
 8000278:	68dc      	ldr	r4, [r3, #12]
 800027a:	f3c4 2402 	ubfx	r4, r4, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800027e:	f1c4 0307 	rsb	r3, r4, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000282:	1d25      	adds	r5, r4, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000284:	2b04      	cmp	r3, #4
 8000286:	bf28      	it	cs
 8000288:	2304      	movcs	r3, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800028a:	2d06      	cmp	r5, #6

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800028c:	f04f 0501 	mov.w	r5, #1
 8000290:	fa05 f303 	lsl.w	r3, r5, r3
 8000294:	f103 33ff 	add.w	r3, r3, #4294967295
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000298:	bf8c      	ite	hi
 800029a:	3c03      	subhi	r4, #3
 800029c:	2400      	movls	r4, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800029e:	4019      	ands	r1, r3
 80002a0:	40a1      	lsls	r1, r4
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80002a2:	fa05 f404 	lsl.w	r4, r5, r4
 80002a6:	3c01      	subs	r4, #1
 80002a8:	4022      	ands	r2, r4
  if ((int32_t)(IRQn) < 0)
 80002aa:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80002ac:	ea42 0201 	orr.w	r2, r2, r1
 80002b0:	ea4f 1202 	mov.w	r2, r2, lsl #4
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80002b4:	bfaf      	iteee	ge
 80002b6:	f100 4060 	addge.w	r0, r0, #3758096384	; 0xe0000000
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80002ba:	f000 000f 	andlt.w	r0, r0, #15
 80002be:	4b06      	ldrlt	r3, [pc, #24]	; (80002d8 <HAL_NVIC_SetPriority+0x64>)
 80002c0:	b2d2      	uxtblt	r2, r2
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80002c2:	bfa5      	ittet	ge
 80002c4:	f500 4061 	addge.w	r0, r0, #57600	; 0xe100
 80002c8:	b2d2      	uxtbge	r2, r2
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80002ca:	541a      	strblt	r2, [r3, r0]
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80002cc:	f880 2300 	strbge.w	r2, [r0, #768]	; 0x300
 80002d0:	bd30      	pop	{r4, r5, pc}
 80002d2:	bf00      	nop
 80002d4:	e000ed00 	.word	0xe000ed00
 80002d8:	e000ed14 	.word	0xe000ed14

080002dc <HAL_NVIC_EnableIRQ>:
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 80002dc:	0942      	lsrs	r2, r0, #5
 80002de:	2301      	movs	r3, #1
 80002e0:	f000 001f 	and.w	r0, r0, #31
 80002e4:	fa03 f000 	lsl.w	r0, r3, r0
 80002e8:	4b01      	ldr	r3, [pc, #4]	; (80002f0 <HAL_NVIC_EnableIRQ+0x14>)
 80002ea:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 80002ee:	4770      	bx	lr
 80002f0:	e000e100 	.word	0xe000e100

080002f4 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80002f4:	3801      	subs	r0, #1
 80002f6:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 80002fa:	d20a      	bcs.n	8000312 <HAL_SYSTICK_Config+0x1e>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80002fc:	4b06      	ldr	r3, [pc, #24]	; (8000318 <HAL_SYSTICK_Config+0x24>)
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80002fe:	4a07      	ldr	r2, [pc, #28]	; (800031c <HAL_SYSTICK_Config+0x28>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000300:	6058      	str	r0, [r3, #4]
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000302:	21f0      	movs	r1, #240	; 0xf0
 8000304:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000308:	2000      	movs	r0, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800030a:	2207      	movs	r2, #7
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800030c:	6098      	str	r0, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800030e:	601a      	str	r2, [r3, #0]
 8000310:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 8000312:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 8000314:	4770      	bx	lr
 8000316:	bf00      	nop
 8000318:	e000e010 	.word	0xe000e010
 800031c:	e000ed00 	.word	0xe000ed00

08000320 <HAL_SYSTICK_CLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  * @retval None
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
 8000320:	4b04      	ldr	r3, [pc, #16]	; (8000334 <HAL_SYSTICK_CLKSourceConfig+0x14>)
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  if (CLKSource == SYSTICK_CLKSOURCE_HCLK)
  {
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
 8000322:	681a      	ldr	r2, [r3, #0]
  if (CLKSource == SYSTICK_CLKSOURCE_HCLK)
 8000324:	2804      	cmp	r0, #4
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
 8000326:	bf0c      	ite	eq
 8000328:	f042 0204 	orreq.w	r2, r2, #4
  }
  else
  {
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
 800032c:	f022 0204 	bicne.w	r2, r2, #4
 8000330:	601a      	str	r2, [r3, #0]
 8000332:	4770      	bx	lr
 8000334:	e000e010 	.word	0xe000e010

08000338 <HAL_SYSTICK_Callback>:
/**
  * @brief  SYSTICK callback.
  * @retval None
  */
__weak void HAL_SYSTICK_Callback(void)
{
 8000338:	4770      	bx	lr

0800033a <HAL_SYSTICK_IRQHandler>:
{
 800033a:	b508      	push	{r3, lr}
  HAL_SYSTICK_Callback();
 800033c:	f7ff fffc 	bl	8000338 <HAL_SYSTICK_Callback>
 8000340:	bd08      	pop	{r3, pc}
	...

08000344 <DMA_CalcBaseAndBitshift>:
  */
static void DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
#if defined (DMA2)
  /* calculation of the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8000344:	6801      	ldr	r1, [r0, #0]
 8000346:	4b0c      	ldr	r3, [pc, #48]	; (8000378 <DMA_CalcBaseAndBitshift+0x34>)
 8000348:	4299      	cmp	r1, r3
{
 800034a:	b510      	push	{r4, lr}
 800034c:	f04f 0414 	mov.w	r4, #20
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8000350:	d809      	bhi.n	8000366 <DMA_CalcBaseAndBitshift+0x22>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8000352:	4a0a      	ldr	r2, [pc, #40]	; (800037c <DMA_CalcBaseAndBitshift+0x38>)
 8000354:	440a      	add	r2, r1
 8000356:	fbb2 f2f4 	udiv	r2, r2, r4
 800035a:	0092      	lsls	r2, r2, #2
 800035c:	6402      	str	r2, [r0, #64]	; 0x40
    hdma->DmaBaseAddress = DMA1;
 800035e:	f2a3 4307 	subw	r3, r3, #1031	; 0x407
  }
  else 
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
    hdma->DmaBaseAddress = DMA2;
 8000362:	63c3      	str	r3, [r0, #60]	; 0x3c
 8000364:	bd10      	pop	{r4, pc}
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8000366:	4b06      	ldr	r3, [pc, #24]	; (8000380 <DMA_CalcBaseAndBitshift+0x3c>)
 8000368:	440b      	add	r3, r1
 800036a:	fbb3 f3f4 	udiv	r3, r3, r4
 800036e:	009b      	lsls	r3, r3, #2
 8000370:	6403      	str	r3, [r0, #64]	; 0x40
    hdma->DmaBaseAddress = DMA2;
 8000372:	4b04      	ldr	r3, [pc, #16]	; (8000384 <DMA_CalcBaseAndBitshift+0x40>)
 8000374:	e7f5      	b.n	8000362 <DMA_CalcBaseAndBitshift+0x1e>
 8000376:	bf00      	nop
 8000378:	40020407 	.word	0x40020407
 800037c:	bffdfff8 	.word	0xbffdfff8
 8000380:	bffdfbf8 	.word	0xbffdfbf8
 8000384:	40020400 	.word	0x40020400

08000388 <HAL_DMA_Init>:
{ 
 8000388:	b538      	push	{r3, r4, r5, lr}
  if(NULL == hdma)
 800038a:	4604      	mov	r4, r0
 800038c:	b328      	cbz	r0, 80003da <HAL_DMA_Init+0x52>
  hdma->State = HAL_DMA_STATE_BUSY;
 800038e:	2302      	movs	r3, #2
  tmp |=  hdma->Init.Direction        |
 8000390:	6885      	ldr	r5, [r0, #8]
  hdma->State = HAL_DMA_STATE_BUSY;
 8000392:	f880 3021 	strb.w	r3, [r0, #33]	; 0x21
  tmp |=  hdma->Init.Direction        |
 8000396:	6843      	ldr	r3, [r0, #4]
  tmp = hdma->Instance->CCR;
 8000398:	6801      	ldr	r1, [r0, #0]
  tmp |=  hdma->Init.Direction        |
 800039a:	432b      	orrs	r3, r5
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800039c:	68c5      	ldr	r5, [r0, #12]
  tmp = hdma->Instance->CCR;
 800039e:	680a      	ldr	r2, [r1, #0]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80003a0:	432b      	orrs	r3, r5
 80003a2:	6905      	ldr	r5, [r0, #16]
 80003a4:	432b      	orrs	r3, r5
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80003a6:	6945      	ldr	r5, [r0, #20]
 80003a8:	432b      	orrs	r3, r5
 80003aa:	6985      	ldr	r5, [r0, #24]
 80003ac:	432b      	orrs	r3, r5
          hdma->Init.Mode                | hdma->Init.Priority;
 80003ae:	69c5      	ldr	r5, [r0, #28]
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 80003b0:	f422 527f 	bic.w	r2, r2, #16320	; 0x3fc0
 80003b4:	f022 0230 	bic.w	r2, r2, #48	; 0x30
          hdma->Init.Mode                | hdma->Init.Priority;
 80003b8:	432b      	orrs	r3, r5
  tmp |=  hdma->Init.Direction        |
 80003ba:	4313      	orrs	r3, r2
  hdma->Instance->CCR = tmp;  
 80003bc:	600b      	str	r3, [r1, #0]
  DMA_CalcBaseAndBitshift(hdma);
 80003be:	f7ff ffc1 	bl	8000344 <DMA_CalcBaseAndBitshift>
  hdma->XferCpltCallback = NULL;
 80003c2:	2000      	movs	r0, #0
  hdma->State = HAL_DMA_STATE_READY;
 80003c4:	2301      	movs	r3, #1
  hdma->XferCpltCallback = NULL;
 80003c6:	62a0      	str	r0, [r4, #40]	; 0x28
  hdma->XferHalfCpltCallback = NULL;
 80003c8:	62e0      	str	r0, [r4, #44]	; 0x2c
  hdma->XferErrorCallback = NULL;
 80003ca:	6320      	str	r0, [r4, #48]	; 0x30
  hdma->XferAbortCallback = NULL;
 80003cc:	6360      	str	r0, [r4, #52]	; 0x34
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80003ce:	63a0      	str	r0, [r4, #56]	; 0x38
  hdma->State = HAL_DMA_STATE_READY;
 80003d0:	f884 3021 	strb.w	r3, [r4, #33]	; 0x21
  hdma->Lock = HAL_UNLOCKED;
 80003d4:	f884 0020 	strb.w	r0, [r4, #32]
  return HAL_OK;
 80003d8:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 80003da:	2001      	movs	r0, #1
}  
 80003dc:	bd38      	pop	{r3, r4, r5, pc}

080003de <HAL_DMA_Start_IT>:
{
 80003de:	b5f0      	push	{r4, r5, r6, r7, lr}
  __HAL_LOCK(hdma);
 80003e0:	f890 4020 	ldrb.w	r4, [r0, #32]
 80003e4:	2c01      	cmp	r4, #1
 80003e6:	d035      	beq.n	8000454 <HAL_DMA_Start_IT+0x76>
  if(HAL_DMA_STATE_READY == hdma->State)
 80003e8:	f890 5021 	ldrb.w	r5, [r0, #33]	; 0x21
  __HAL_LOCK(hdma);
 80003ec:	2401      	movs	r4, #1
  if(HAL_DMA_STATE_READY == hdma->State)
 80003ee:	42a5      	cmp	r5, r4
  __HAL_LOCK(hdma);
 80003f0:	f880 4020 	strb.w	r4, [r0, #32]
 80003f4:	f04f 0600 	mov.w	r6, #0
 80003f8:	f04f 0402 	mov.w	r4, #2
  if(HAL_DMA_STATE_READY == hdma->State)
 80003fc:	d128      	bne.n	8000450 <HAL_DMA_Start_IT+0x72>
  	hdma->State = HAL_DMA_STATE_BUSY;
 80003fe:	f880 4021 	strb.w	r4, [r0, #33]	; 0x21
  	hdma->Instance->CCR &= ~DMA_CCR_EN;
 8000402:	6804      	ldr	r4, [r0, #0]
  	hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8000404:	6386      	str	r6, [r0, #56]	; 0x38
  	hdma->Instance->CCR &= ~DMA_CCR_EN;
 8000406:	6826      	ldr	r6, [r4, #0]
  hdma->DmaBaseAddress->IFCR  = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 8000408:	6c07      	ldr	r7, [r0, #64]	; 0x40
  	hdma->Instance->CCR &= ~DMA_CCR_EN;
 800040a:	f026 0601 	bic.w	r6, r6, #1
 800040e:	6026      	str	r6, [r4, #0]
  hdma->DmaBaseAddress->IFCR  = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 8000410:	6bc6      	ldr	r6, [r0, #60]	; 0x3c
 8000412:	40bd      	lsls	r5, r7
 8000414:	6075      	str	r5, [r6, #4]
  hdma->Instance->CNDTR = DataLength;
 8000416:	6063      	str	r3, [r4, #4]
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8000418:	6843      	ldr	r3, [r0, #4]
 800041a:	6805      	ldr	r5, [r0, #0]
 800041c:	2b10      	cmp	r3, #16
    if(NULL != hdma->XferHalfCpltCallback )
 800041e:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
    hdma->Instance->CPAR = DstAddress;
 8000420:	bf0b      	itete	eq
 8000422:	60a2      	streq	r2, [r4, #8]
    hdma->Instance->CPAR = SrcAddress;
 8000424:	60a1      	strne	r1, [r4, #8]
    hdma->Instance->CMAR = SrcAddress;
 8000426:	60e1      	streq	r1, [r4, #12]
    hdma->Instance->CMAR = DstAddress;
 8000428:	60e2      	strne	r2, [r4, #12]
    if(NULL != hdma->XferHalfCpltCallback )
 800042a:	b14b      	cbz	r3, 8000440 <HAL_DMA_Start_IT+0x62>
      hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 800042c:	6823      	ldr	r3, [r4, #0]
 800042e:	f043 030e 	orr.w	r3, r3, #14
  		hdma->Instance->CCR &= ~DMA_IT_HT;
 8000432:	6023      	str	r3, [r4, #0]
  	hdma->Instance->CCR |= DMA_CCR_EN;
 8000434:	682b      	ldr	r3, [r5, #0]
 8000436:	f043 0301 	orr.w	r3, r3, #1
 800043a:	602b      	str	r3, [r5, #0]
	HAL_StatusTypeDef status = HAL_OK;
 800043c:	2000      	movs	r0, #0
 800043e:	bdf0      	pop	{r4, r5, r6, r7, pc}
  		hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_TE);
 8000440:	6823      	ldr	r3, [r4, #0]
 8000442:	f043 030a 	orr.w	r3, r3, #10
 8000446:	6023      	str	r3, [r4, #0]
  		hdma->Instance->CCR &= ~DMA_IT_HT;
 8000448:	6823      	ldr	r3, [r4, #0]
 800044a:	f023 0304 	bic.w	r3, r3, #4
 800044e:	e7f0      	b.n	8000432 <HAL_DMA_Start_IT+0x54>
    __HAL_UNLOCK(hdma); 
 8000450:	f880 6020 	strb.w	r6, [r0, #32]
  __HAL_LOCK(hdma);
 8000454:	2002      	movs	r0, #2
} 
 8000456:	bdf0      	pop	{r4, r5, r6, r7, pc}

08000458 <HAL_DMA_Abort_IT>:
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8000458:	f890 2021 	ldrb.w	r2, [r0, #33]	; 0x21
 800045c:	2a02      	cmp	r2, #2
{  
 800045e:	b510      	push	{r4, lr}
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8000460:	d003      	beq.n	800046a <HAL_DMA_Abort_IT+0x12>
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000462:	2204      	movs	r2, #4
 8000464:	6382      	str	r2, [r0, #56]	; 0x38
    status = HAL_ERROR;
 8000466:	2001      	movs	r0, #1
 8000468:	bd10      	pop	{r4, pc}
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 800046a:	6802      	ldr	r2, [r0, #0]
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 800046c:	6bc4      	ldr	r4, [r0, #60]	; 0x3c
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 800046e:	6811      	ldr	r1, [r2, #0]
    if(hdma->XferAbortCallback != NULL)
 8000470:	6b43      	ldr	r3, [r0, #52]	; 0x34
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8000472:	f021 010e 	bic.w	r1, r1, #14
 8000476:	6011      	str	r1, [r2, #0]
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8000478:	6811      	ldr	r1, [r2, #0]
 800047a:	f021 0101 	bic.w	r1, r1, #1
 800047e:	6011      	str	r1, [r2, #0]
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8000480:	6c02      	ldr	r2, [r0, #64]	; 0x40
 8000482:	2101      	movs	r1, #1
 8000484:	fa01 f202 	lsl.w	r2, r1, r2
 8000488:	6062      	str	r2, [r4, #4]
    __HAL_UNLOCK(hdma);
 800048a:	2400      	movs	r4, #0
    hdma->State = HAL_DMA_STATE_READY;
 800048c:	f880 1021 	strb.w	r1, [r0, #33]	; 0x21
    __HAL_UNLOCK(hdma);
 8000490:	f880 4020 	strb.w	r4, [r0, #32]
    if(hdma->XferAbortCallback != NULL)
 8000494:	b113      	cbz	r3, 800049c <HAL_DMA_Abort_IT+0x44>
      hdma->XferAbortCallback(hdma);
 8000496:	4798      	blx	r3
  HAL_StatusTypeDef status = HAL_OK;
 8000498:	4620      	mov	r0, r4
 800049a:	bd10      	pop	{r4, pc}
 800049c:	4618      	mov	r0, r3
}
 800049e:	bd10      	pop	{r4, pc}

080004a0 <HAL_DMA_IRQHandler>:
	uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80004a0:	6bc1      	ldr	r1, [r0, #60]	; 0x3c
  if ((RESET != (flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_HT)))
 80004a2:	6c02      	ldr	r2, [r0, #64]	; 0x40
  uint32_t source_it = hdma->Instance->CCR;
 80004a4:	6803      	ldr	r3, [r0, #0]
{
 80004a6:	b470      	push	{r4, r5, r6}
	uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80004a8:	680e      	ldr	r6, [r1, #0]
  uint32_t source_it = hdma->Instance->CCR;
 80004aa:	681d      	ldr	r5, [r3, #0]
  if ((RESET != (flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_HT)))
 80004ac:	2404      	movs	r4, #4
 80004ae:	4094      	lsls	r4, r2
 80004b0:	4226      	tst	r6, r4
 80004b2:	d00e      	beq.n	80004d2 <HAL_DMA_IRQHandler+0x32>
 80004b4:	f015 0f04 	tst.w	r5, #4
 80004b8:	d00b      	beq.n	80004d2 <HAL_DMA_IRQHandler+0x32>
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80004ba:	681a      	ldr	r2, [r3, #0]
 80004bc:	0692      	lsls	r2, r2, #26
  		hdma->Instance->CCR &= ~DMA_IT_HT;
 80004be:	bf5e      	ittt	pl
 80004c0:	681a      	ldrpl	r2, [r3, #0]
 80004c2:	f022 0204 	bicpl.w	r2, r2, #4
 80004c6:	601a      	strpl	r2, [r3, #0]
  	if(hdma->XferHalfCpltCallback != NULL)
 80004c8:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_HT1 << hdma->ChannelIndex;
 80004ca:	604c      	str	r4, [r1, #4]
    if(hdma->XferErrorCallback != NULL)
 80004cc:	b373      	cbz	r3, 800052c <HAL_DMA_IRQHandler+0x8c>
}  
 80004ce:	bc70      	pop	{r4, r5, r6}
    	hdma->XferErrorCallback(hdma);
 80004d0:	4718      	bx	r3
  else if ((RESET != (flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TC)))
 80004d2:	2402      	movs	r4, #2
 80004d4:	4094      	lsls	r4, r2
 80004d6:	4226      	tst	r6, r4
 80004d8:	d012      	beq.n	8000500 <HAL_DMA_IRQHandler+0x60>
 80004da:	f015 0f02 	tst.w	r5, #2
 80004de:	d00f      	beq.n	8000500 <HAL_DMA_IRQHandler+0x60>
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80004e0:	681a      	ldr	r2, [r3, #0]
 80004e2:	0695      	lsls	r5, r2, #26
 80004e4:	d406      	bmi.n	80004f4 <HAL_DMA_IRQHandler+0x54>
  		hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_TE);
 80004e6:	681a      	ldr	r2, [r3, #0]
 80004e8:	f022 020a 	bic.w	r2, r2, #10
 80004ec:	601a      	str	r2, [r3, #0]
  		hdma->State = HAL_DMA_STATE_READY;
 80004ee:	2301      	movs	r3, #1
 80004f0:	f880 3021 	strb.w	r3, [r0, #33]	; 0x21
  	__HAL_UNLOCK(hdma);
 80004f4:	2300      	movs	r3, #0
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_TC1 << hdma->ChannelIndex;
 80004f6:	604c      	str	r4, [r1, #4]
  	__HAL_UNLOCK(hdma);
 80004f8:	f880 3020 	strb.w	r3, [r0, #32]
  	if(hdma->XferCpltCallback != NULL)
 80004fc:	6a83      	ldr	r3, [r0, #40]	; 0x28
 80004fe:	e7e5      	b.n	80004cc <HAL_DMA_IRQHandler+0x2c>
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8000500:	2408      	movs	r4, #8
 8000502:	4094      	lsls	r4, r2
 8000504:	4234      	tst	r4, r6
 8000506:	d011      	beq.n	800052c <HAL_DMA_IRQHandler+0x8c>
 8000508:	072c      	lsls	r4, r5, #28
 800050a:	d50f      	bpl.n	800052c <HAL_DMA_IRQHandler+0x8c>
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 800050c:	681c      	ldr	r4, [r3, #0]
 800050e:	f024 040e 	bic.w	r4, r4, #14
 8000512:	601c      	str	r4, [r3, #0]
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8000514:	2301      	movs	r3, #1
 8000516:	fa03 f202 	lsl.w	r2, r3, r2
 800051a:	604a      	str	r2, [r1, #4]
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 800051c:	6383      	str	r3, [r0, #56]	; 0x38
    hdma->State = HAL_DMA_STATE_READY;    
 800051e:	f880 3021 	strb.w	r3, [r0, #33]	; 0x21
    __HAL_UNLOCK(hdma); 
 8000522:	2300      	movs	r3, #0
 8000524:	f880 3020 	strb.w	r3, [r0, #32]
    if(hdma->XferErrorCallback != NULL)
 8000528:	6b03      	ldr	r3, [r0, #48]	; 0x30
 800052a:	e7cf      	b.n	80004cc <HAL_DMA_IRQHandler+0x2c>
}  
 800052c:	bc70      	pop	{r4, r5, r6}
 800052e:	4770      	bx	lr

08000530 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000530:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != RESET)
 8000534:	f8d1 8000 	ldr.w	r8, [r1]
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000538:	f8df 9174 	ldr.w	r9, [pc, #372]	; 80006b0 <HAL_GPIO_Init+0x180>
        temp &= ~((0x0FU) << (4U * (position & 0x03U)));
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
        SYSCFG->EXTICR[position >> 2] = temp;

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800053c:	4a5a      	ldr	r2, [pc, #360]	; (80006a8 <HAL_GPIO_Init+0x178>)
  uint32_t position = 0x00U;
 800053e:	2300      	movs	r3, #0
  while (((GPIO_Init->Pin) >> position) != RESET)
 8000540:	fa38 f403 	lsrs.w	r4, r8, r3
 8000544:	d102      	bne.n	800054c <HAL_GPIO_Init+0x1c>
      }
    }
    
    position++;
  }
}
 8000546:	b003      	add	sp, #12
 8000548:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 800054c:	2401      	movs	r4, #1
 800054e:	fa04 fa03 	lsl.w	sl, r4, r3
    if(iocurrent)
 8000552:	ea18 050a 	ands.w	r5, r8, sl
 8000556:	f000 809c 	beq.w	8000692 <HAL_GPIO_Init+0x162>
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800055a:	684c      	ldr	r4, [r1, #4]
 800055c:	f024 0b10 	bic.w	fp, r4, #16
 8000560:	f1bb 0f02 	cmp.w	fp, #2
 8000564:	d114      	bne.n	8000590 <HAL_GPIO_Init+0x60>
        temp = GPIOx->AFR[position >> 3];
 8000566:	ea4f 0ed3 	mov.w	lr, r3, lsr #3
 800056a:	eb00 0e8e 	add.w	lr, r0, lr, lsl #2
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800056e:	f003 0c07 	and.w	ip, r3, #7
        temp = GPIOx->AFR[position >> 3];
 8000572:	f8de 6020 	ldr.w	r6, [lr, #32]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000576:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
 800057a:	270f      	movs	r7, #15
 800057c:	fa07 f70c 	lsl.w	r7, r7, ip
 8000580:	ea26 0707 	bic.w	r7, r6, r7
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000584:	690e      	ldr	r6, [r1, #16]
 8000586:	fa06 f60c 	lsl.w	r6, r6, ip
 800058a:	433e      	orrs	r6, r7
        GPIOx->AFR[position >> 3] = temp;
 800058c:	f8ce 6020 	str.w	r6, [lr, #32]
 8000590:	ea4f 0c43 	mov.w	ip, r3, lsl #1
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000594:	2703      	movs	r7, #3
      temp = GPIOx->MODER;
 8000596:	6806      	ldr	r6, [r0, #0]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000598:	fa07 f70c 	lsl.w	r7, r7, ip
 800059c:	43ff      	mvns	r7, r7
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800059e:	f004 0e03 	and.w	lr, r4, #3
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80005a2:	403e      	ands	r6, r7
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80005a4:	fa0e fe0c 	lsl.w	lr, lr, ip
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80005a8:	f10b 3bff 	add.w	fp, fp, #4294967295
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80005ac:	ea4e 0606 	orr.w	r6, lr, r6
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80005b0:	f1bb 0f01 	cmp.w	fp, #1
      GPIOx->MODER = temp;
 80005b4:	6006      	str	r6, [r0, #0]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80005b6:	d811      	bhi.n	80005dc <HAL_GPIO_Init+0xac>
        temp = GPIOx->OSPEEDR;
 80005b8:	6886      	ldr	r6, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80005ba:	ea06 0b07 	and.w	fp, r6, r7
        temp |= (GPIO_Init->Speed << (position * 2U));
 80005be:	68ce      	ldr	r6, [r1, #12]
 80005c0:	fa06 fe0c 	lsl.w	lr, r6, ip
 80005c4:	ea4e 060b 	orr.w	r6, lr, fp
        GPIOx->OSPEEDR = temp;
 80005c8:	6086      	str	r6, [r0, #8]
        temp = GPIOx->OTYPER;
 80005ca:	6846      	ldr	r6, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80005cc:	ea26 0a0a 	bic.w	sl, r6, sl
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80005d0:	f3c4 1600 	ubfx	r6, r4, #4, #1
 80005d4:	409e      	lsls	r6, r3
 80005d6:	ea46 060a 	orr.w	r6, r6, sl
        GPIOx->OTYPER = temp;
 80005da:	6046      	str	r6, [r0, #4]
      temp = GPIOx->PUPDR;
 80005dc:	68c6      	ldr	r6, [r0, #12]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80005de:	4037      	ands	r7, r6
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80005e0:	688e      	ldr	r6, [r1, #8]
 80005e2:	fa06 f60c 	lsl.w	r6, r6, ip
 80005e6:	4337      	orrs	r7, r6
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80005e8:	00e6      	lsls	r6, r4, #3
      GPIOx->PUPDR = temp;
 80005ea:	60c7      	str	r7, [r0, #12]
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80005ec:	d551      	bpl.n	8000692 <HAL_GPIO_Init+0x162>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80005ee:	f8d9 6018 	ldr.w	r6, [r9, #24]
 80005f2:	f046 0601 	orr.w	r6, r6, #1
 80005f6:	f8c9 6018 	str.w	r6, [r9, #24]
 80005fa:	f8d9 6018 	ldr.w	r6, [r9, #24]
 80005fe:	f023 0703 	bic.w	r7, r3, #3
 8000602:	f107 4780 	add.w	r7, r7, #1073741824	; 0x40000000
 8000606:	f006 0601 	and.w	r6, r6, #1
 800060a:	f507 3780 	add.w	r7, r7, #65536	; 0x10000
 800060e:	9601      	str	r6, [sp, #4]
        temp &= ~((0x0FU) << (4U * (position & 0x03U)));
 8000610:	f003 0c03 	and.w	ip, r3, #3
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000614:	9e01      	ldr	r6, [sp, #4]
        temp = SYSCFG->EXTICR[position >> 2];
 8000616:	68be      	ldr	r6, [r7, #8]
        temp &= ~((0x0FU) << (4U * (position & 0x03U)));
 8000618:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
 800061c:	f04f 0e0f 	mov.w	lr, #15
 8000620:	fa0e fe0c 	lsl.w	lr, lr, ip
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8000624:	f1b0 4f90 	cmp.w	r0, #1207959552	; 0x48000000
        temp &= ~((0x0FU) << (4U * (position & 0x03U)));
 8000628:	ea26 0e0e 	bic.w	lr, r6, lr
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800062c:	d033      	beq.n	8000696 <HAL_GPIO_Init+0x166>
 800062e:	4e1f      	ldr	r6, [pc, #124]	; (80006ac <HAL_GPIO_Init+0x17c>)
 8000630:	42b0      	cmp	r0, r6
 8000632:	d032      	beq.n	800069a <HAL_GPIO_Init+0x16a>
 8000634:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8000638:	42b0      	cmp	r0, r6
 800063a:	d030      	beq.n	800069e <HAL_GPIO_Init+0x16e>
 800063c:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8000640:	42b0      	cmp	r0, r6
 8000642:	d02e      	beq.n	80006a2 <HAL_GPIO_Init+0x172>
 8000644:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8000648:	42b0      	cmp	r0, r6
 800064a:	bf14      	ite	ne
 800064c:	2605      	movne	r6, #5
 800064e:	2604      	moveq	r6, #4
 8000650:	fa06 f60c 	lsl.w	r6, r6, ip
 8000654:	ea46 060e 	orr.w	r6, r6, lr
        SYSCFG->EXTICR[position >> 2] = temp;
 8000658:	60be      	str	r6, [r7, #8]
        temp = EXTI->IMR;
 800065a:	6816      	ldr	r6, [r2, #0]
        temp &= ~((uint32_t)iocurrent);
 800065c:	43ef      	mvns	r7, r5
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800065e:	f414 3f80 	tst.w	r4, #65536	; 0x10000
        temp &= ~((uint32_t)iocurrent);
 8000662:	bf0c      	ite	eq
 8000664:	403e      	andeq	r6, r7
          temp |= iocurrent;
 8000666:	432e      	orrne	r6, r5
        EXTI->IMR = temp;
 8000668:	6016      	str	r6, [r2, #0]
        temp = EXTI->EMR;
 800066a:	6856      	ldr	r6, [r2, #4]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800066c:	f414 3f00 	tst.w	r4, #131072	; 0x20000
        temp &= ~((uint32_t)iocurrent);
 8000670:	bf0c      	ite	eq
 8000672:	403e      	andeq	r6, r7
          temp |= iocurrent;
 8000674:	432e      	orrne	r6, r5
        EXTI->EMR = temp;
 8000676:	6056      	str	r6, [r2, #4]
        temp = EXTI->RTSR;
 8000678:	6896      	ldr	r6, [r2, #8]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800067a:	f414 1f80 	tst.w	r4, #1048576	; 0x100000
        temp &= ~((uint32_t)iocurrent);
 800067e:	bf0c      	ite	eq
 8000680:	403e      	andeq	r6, r7
          temp |= iocurrent;
 8000682:	432e      	orrne	r6, r5
        EXTI->RTSR = temp;
 8000684:	6096      	str	r6, [r2, #8]
        temp = EXTI->FTSR;
 8000686:	68d6      	ldr	r6, [r2, #12]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000688:	02a4      	lsls	r4, r4, #10
        temp &= ~((uint32_t)iocurrent);
 800068a:	bf54      	ite	pl
 800068c:	403e      	andpl	r6, r7
          temp |= iocurrent;
 800068e:	432e      	orrmi	r6, r5
        EXTI->FTSR = temp;
 8000690:	60d6      	str	r6, [r2, #12]
    position++;
 8000692:	3301      	adds	r3, #1
 8000694:	e754      	b.n	8000540 <HAL_GPIO_Init+0x10>
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8000696:	2600      	movs	r6, #0
 8000698:	e7da      	b.n	8000650 <HAL_GPIO_Init+0x120>
 800069a:	2601      	movs	r6, #1
 800069c:	e7d8      	b.n	8000650 <HAL_GPIO_Init+0x120>
 800069e:	2602      	movs	r6, #2
 80006a0:	e7d6      	b.n	8000650 <HAL_GPIO_Init+0x120>
 80006a2:	2603      	movs	r6, #3
 80006a4:	e7d4      	b.n	8000650 <HAL_GPIO_Init+0x120>
 80006a6:	bf00      	nop
 80006a8:	40010400 	.word	0x40010400
 80006ac:	48000400 	.word	0x48000400
 80006b0:	40021000 	.word	0x40021000

080006b4 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80006b4:	b10a      	cbz	r2, 80006ba <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80006b6:	6181      	str	r1, [r0, #24]
 80006b8:	4770      	bx	lr
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80006ba:	6281      	str	r1, [r0, #40]	; 0x28
 80006bc:	4770      	bx	lr

080006be <I2C_Flush_TXDR>:
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 80006be:	6803      	ldr	r3, [r0, #0]
 80006c0:	699a      	ldr	r2, [r3, #24]
 80006c2:	0791      	lsls	r1, r2, #30
  {
    hi2c->Instance->TXDR = 0x00U;
 80006c4:	bf44      	itt	mi
 80006c6:	2200      	movmi	r2, #0
 80006c8:	629a      	strmi	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80006ca:	699a      	ldr	r2, [r3, #24]
 80006cc:	07d2      	lsls	r2, r2, #31
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 80006ce:	bf5e      	ittt	pl
 80006d0:	699a      	ldrpl	r2, [r3, #24]
 80006d2:	f042 0201 	orrpl.w	r2, r2, #1
 80006d6:	619a      	strpl	r2, [r3, #24]
 80006d8:	4770      	bx	lr

080006da <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_READ Generate Restart for read request.
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c,  uint16_t DevAddress, uint8_t Size, uint32_t Mode, uint32_t Request)
{
 80006da:	b530      	push	{r4, r5, lr}
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Get the CR2 register value */
  tmpreg = hi2c->Instance->CR2;
 80006dc:	6805      	ldr	r5, [r0, #0]

  /* clear tmpreg specific bits */
  tmpreg &= (uint32_t)~((uint32_t)(I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | I2C_CR2_RD_WRN | I2C_CR2_START | I2C_CR2_STOP));

  /* update tmpreg */
  tmpreg |= (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | (((uint32_t)Size << 16) & I2C_CR2_NBYTES) | \
 80006de:	9c03      	ldr	r4, [sp, #12]
  tmpreg = hi2c->Instance->CR2;
 80006e0:	6868      	ldr	r0, [r5, #4]
  tmpreg &= (uint32_t)~((uint32_t)(I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | I2C_CR2_RD_WRN | I2C_CR2_START | I2C_CR2_STOP));
 80006e2:	f020 707f 	bic.w	r0, r0, #66846720	; 0x3fc0000
 80006e6:	f420 3059 	bic.w	r0, r0, #222208	; 0x36400
  tmpreg |= (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | (((uint32_t)Size << 16) & I2C_CR2_NBYTES) | \
 80006ea:	f3c1 0109 	ubfx	r1, r1, #0, #10
 80006ee:	4323      	orrs	r3, r4
  tmpreg &= (uint32_t)~((uint32_t)(I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | I2C_CR2_RD_WRN | I2C_CR2_START | I2C_CR2_STOP));
 80006f0:	f420 707f 	bic.w	r0, r0, #1020	; 0x3fc
  tmpreg |= (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | (((uint32_t)Size << 16) & I2C_CR2_NBYTES) | \
 80006f4:	4319      	orrs	r1, r3
  tmpreg &= (uint32_t)~((uint32_t)(I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | I2C_CR2_RD_WRN | I2C_CR2_START | I2C_CR2_STOP));
 80006f6:	f020 0003 	bic.w	r0, r0, #3
  tmpreg |= (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | (((uint32_t)Size << 16) & I2C_CR2_NBYTES) | \
 80006fa:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 80006fe:	4301      	orrs	r1, r0
                       (uint32_t)Mode | (uint32_t)Request);

  /* update CR2 register */
  hi2c->Instance->CR2 = tmpreg;
 8000700:	6069      	str	r1, [r5, #4]
 8000702:	bd30      	pop	{r4, r5, pc}

08000704 <I2C_Enable_IRQ>:
  */
static HAL_StatusTypeDef I2C_Enable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
  uint32_t tmpisr = 0U;

  if ((hi2c->XferISR == I2C_Master_ISR_DMA) || \
 8000704:	4b18      	ldr	r3, [pc, #96]	; (8000768 <I2C_Enable_IRQ+0x64>)
{
 8000706:	b530      	push	{r4, r5, lr}
  if ((hi2c->XferISR == I2C_Master_ISR_DMA) || \
 8000708:	6b44      	ldr	r4, [r0, #52]	; 0x34
 800070a:	429c      	cmp	r4, r3
 800070c:	f001 0212 	and.w	r2, r1, #18
 8000710:	f001 0304 	and.w	r3, r1, #4
 8000714:	d002      	beq.n	800071c <I2C_Enable_IRQ+0x18>
 8000716:	4d15      	ldr	r5, [pc, #84]	; (800076c <I2C_Enable_IRQ+0x68>)
 8000718:	42ac      	cmp	r4, r5
 800071a:	d113      	bne.n	8000744 <I2C_Enable_IRQ+0x40>
      (hi2c->XferISR == I2C_Slave_ISR_DMA))
  {
    if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
    {
      /* Enable ERR, STOP, NACK and ADDR interrupts */
      tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 800071c:	2b00      	cmp	r3, #0
    }

    if ((InterruptRequest & I2C_XFER_ERROR_IT) == I2C_XFER_ERROR_IT)
 800071e:	f001 0111 	and.w	r1, r1, #17
      tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8000722:	bf0c      	ite	eq
 8000724:	2300      	moveq	r3, #0
 8000726:	23b8      	movne	r3, #184	; 0xb8
    if ((InterruptRequest & I2C_XFER_ERROR_IT) == I2C_XFER_ERROR_IT)
 8000728:	2911      	cmp	r1, #17
    {
      /* Enable ERR and NACK interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 800072a:	bf08      	it	eq
 800072c:	f043 0390 	orreq.w	r3, r3, #144	; 0x90
    }

    if ((InterruptRequest & I2C_XFER_CPLT_IT) == I2C_XFER_CPLT_IT)
 8000730:	2a12      	cmp	r2, #18
 8000732:	d101      	bne.n	8000738 <I2C_Enable_IRQ+0x34>
    }

    if ((InterruptRequest & I2C_XFER_RELOAD_IT) == I2C_XFER_RELOAD_IT)
    {
      /* Enable TC interrupts */
      tmpisr |= I2C_IT_TCI;
 8000734:	f043 0360 	orr.w	r3, r3, #96	; 0x60
  }

  /* Enable interrupts only at the end */
  /* to avoid the risk of I2C interrupt handle execution before */
  /* all interrupts requested done */
  __HAL_I2C_ENABLE_IT(hi2c, tmpisr);
 8000738:	6802      	ldr	r2, [r0, #0]
 800073a:	6811      	ldr	r1, [r2, #0]
 800073c:	430b      	orrs	r3, r1
 800073e:	6013      	str	r3, [r2, #0]

  return HAL_OK;
}
 8000740:	2000      	movs	r0, #0
 8000742:	bd30      	pop	{r4, r5, pc}
      tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8000744:	2b00      	cmp	r3, #0
 8000746:	bf0c      	ite	eq
 8000748:	2300      	moveq	r3, #0
 800074a:	23b8      	movne	r3, #184	; 0xb8
    if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 800074c:	07cc      	lsls	r4, r1, #31
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_TXI;
 800074e:	bf48      	it	mi
 8000750:	f043 03f2 	orrmi.w	r3, r3, #242	; 0xf2
    if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 8000754:	0789      	lsls	r1, r1, #30
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_RXI;
 8000756:	bf48      	it	mi
 8000758:	f043 03f4 	orrmi.w	r3, r3, #244	; 0xf4
    if ((InterruptRequest & I2C_XFER_CPLT_IT) == I2C_XFER_CPLT_IT)
 800075c:	2a12      	cmp	r2, #18
      tmpisr |= I2C_IT_STOPI;
 800075e:	bf08      	it	eq
 8000760:	f043 0320 	orreq.w	r3, r3, #32
 8000764:	e7e8      	b.n	8000738 <I2C_Enable_IRQ+0x34>
 8000766:	bf00      	nop
 8000768:	08001297 	.word	0x08001297
 800076c:	08001171 	.word	0x08001171

08000770 <I2C_Disable_IRQ>:
  */
static HAL_StatusTypeDef I2C_Disable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
  uint32_t tmpisr = 0U;

  if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 8000770:	f011 0301 	ands.w	r3, r1, #1
 8000774:	d007      	beq.n	8000786 <I2C_Disable_IRQ+0x16>
  {
    /* Disable TC and TXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_TXI;

    if ((hi2c->State & HAL_I2C_STATE_LISTEN) != HAL_I2C_STATE_LISTEN)
 8000776:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 800077a:	f003 0328 	and.w	r3, r3, #40	; 0x28
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 800077e:	2b28      	cmp	r3, #40	; 0x28
 8000780:	bf0c      	ite	eq
 8000782:	2342      	moveq	r3, #66	; 0x42
 8000784:	23f2      	movne	r3, #242	; 0xf2
    }
  }

  if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 8000786:	078a      	lsls	r2, r1, #30
 8000788:	d509      	bpl.n	800079e <I2C_Disable_IRQ+0x2e>
  {
    /* Disable TC and RXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_RXI;

    if ((hi2c->State & HAL_I2C_STATE_LISTEN) != HAL_I2C_STATE_LISTEN)
 800078a:	f890 2041 	ldrb.w	r2, [r0, #65]	; 0x41
 800078e:	f002 0228 	and.w	r2, r2, #40	; 0x28
 8000792:	2a28      	cmp	r2, #40	; 0x28
    tmpisr |= I2C_IT_TCI | I2C_IT_RXI;
 8000794:	bf0c      	ite	eq
 8000796:	f043 0344 	orreq.w	r3, r3, #68	; 0x44
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 800079a:	f043 03f4 	orrne.w	r3, r3, #244	; 0xf4
    }
  }

  if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 800079e:	074a      	lsls	r2, r1, #29
  {
    /* Disable ADDR, NACK and STOP interrupts */
    tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
  }

  if ((InterruptRequest & I2C_XFER_ERROR_IT) == I2C_XFER_ERROR_IT)
 80007a0:	f001 0211 	and.w	r2, r1, #17
    tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 80007a4:	bf48      	it	mi
 80007a6:	f043 03b8 	orrmi.w	r3, r3, #184	; 0xb8
  {
    /* Enable ERR and NACK interrupts */
    tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
  }

  if ((InterruptRequest & I2C_XFER_CPLT_IT) == I2C_XFER_CPLT_IT)
 80007aa:	f001 0112 	and.w	r1, r1, #18
  if ((InterruptRequest & I2C_XFER_ERROR_IT) == I2C_XFER_ERROR_IT)
 80007ae:	2a11      	cmp	r2, #17
    tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 80007b0:	bf08      	it	eq
 80007b2:	f043 0390 	orreq.w	r3, r3, #144	; 0x90
  if ((InterruptRequest & I2C_XFER_CPLT_IT) == I2C_XFER_CPLT_IT)
 80007b6:	2912      	cmp	r1, #18
  }

  /* Disable interrupts only at the end */
  /* to avoid a breaking situation like at "t" time */
  /* all disable interrupts request are not done */
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 80007b8:	6801      	ldr	r1, [r0, #0]
 80007ba:	680a      	ldr	r2, [r1, #0]
    tmpisr |= I2C_IT_TCI;
 80007bc:	bf08      	it	eq
 80007be:	f043 0360 	orreq.w	r3, r3, #96	; 0x60
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 80007c2:	ea22 0303 	bic.w	r3, r2, r3
 80007c6:	600b      	str	r3, [r1, #0]

  return HAL_OK;
}
 80007c8:	2000      	movs	r0, #0
 80007ca:	4770      	bx	lr

080007cc <I2C_WaitOnFlagUntilTimeout>:
{
 80007cc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80007d0:	9f06      	ldr	r7, [sp, #24]
 80007d2:	4604      	mov	r4, r0
 80007d4:	4688      	mov	r8, r1
 80007d6:	4616      	mov	r6, r2
 80007d8:	461d      	mov	r5, r3
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80007da:	6822      	ldr	r2, [r4, #0]
 80007dc:	6993      	ldr	r3, [r2, #24]
 80007de:	ea38 0303 	bics.w	r3, r8, r3
 80007e2:	bf0c      	ite	eq
 80007e4:	2301      	moveq	r3, #1
 80007e6:	2300      	movne	r3, #0
 80007e8:	42b3      	cmp	r3, r6
 80007ea:	d002      	beq.n	80007f2 <I2C_WaitOnFlagUntilTimeout+0x26>
  return HAL_OK;
 80007ec:	2000      	movs	r0, #0
}
 80007ee:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if (Timeout != HAL_MAX_DELAY)
 80007f2:	1c6b      	adds	r3, r5, #1
 80007f4:	d0f2      	beq.n	80007dc <I2C_WaitOnFlagUntilTimeout+0x10>
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80007f6:	b955      	cbnz	r5, 800080e <I2C_WaitOnFlagUntilTimeout+0x42>
        hi2c->State = HAL_I2C_STATE_READY;
 80007f8:	2320      	movs	r3, #32
 80007fa:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80007fe:	2300      	movs	r3, #0
 8000800:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
        __HAL_UNLOCK(hi2c);
 8000804:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
        return HAL_TIMEOUT;
 8000808:	2003      	movs	r0, #3
 800080a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800080e:	f7ff fd09 	bl	8000224 <HAL_GetTick>
 8000812:	1bc0      	subs	r0, r0, r7
 8000814:	4285      	cmp	r5, r0
 8000816:	d2e0      	bcs.n	80007da <I2C_WaitOnFlagUntilTimeout+0xe>
 8000818:	e7ee      	b.n	80007f8 <I2C_WaitOnFlagUntilTimeout+0x2c>

0800081a <I2C_DMAMasterReceiveCplt>:
{
 800081a:	b510      	push	{r4, lr}
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800081c:	6a44      	ldr	r4, [r0, #36]	; 0x24
  hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 800081e:	6821      	ldr	r1, [r4, #0]
 8000820:	680b      	ldr	r3, [r1, #0]
 8000822:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8000826:	600b      	str	r3, [r1, #0]
  if (hi2c->XferCount == 0U)
 8000828:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 800082a:	b29b      	uxth	r3, r3
 800082c:	b92b      	cbnz	r3, 800083a <I2C_DMAMasterReceiveCplt+0x20>
    I2C_Enable_IRQ(hi2c, I2C_XFER_RELOAD_IT);
 800082e:	4620      	mov	r0, r4
 8000830:	2112      	movs	r1, #18
}
 8000832:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    I2C_Enable_IRQ(hi2c, I2C_XFER_RELOAD_IT);
 8000836:	f7ff bf65 	b.w	8000704 <I2C_Enable_IRQ>
    hi2c->pBuffPtr += hi2c->XferSize;
 800083a:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 800083c:	6a62      	ldr	r2, [r4, #36]	; 0x24
    HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->RXDR, (uint32_t)hi2c->pBuffPtr, hi2c->XferSize);
 800083e:	6be0      	ldr	r0, [r4, #60]	; 0x3c
    hi2c->pBuffPtr += hi2c->XferSize;
 8000840:	441a      	add	r2, r3
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8000842:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
    hi2c->pBuffPtr += hi2c->XferSize;
 8000844:	6262      	str	r2, [r4, #36]	; 0x24
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8000846:	b29b      	uxth	r3, r3
 8000848:	2bff      	cmp	r3, #255	; 0xff
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800084a:	bf8c      	ite	hi
 800084c:	23ff      	movhi	r3, #255	; 0xff
      hi2c->XferSize = hi2c->XferCount;
 800084e:	8d63      	ldrhls	r3, [r4, #42]	; 0x2a
 8000850:	8523      	strh	r3, [r4, #40]	; 0x28
    HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->RXDR, (uint32_t)hi2c->pBuffPtr, hi2c->XferSize);
 8000852:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8000854:	3124      	adds	r1, #36	; 0x24
 8000856:	f7ff fdc2 	bl	80003de <HAL_DMA_Start_IT>
 800085a:	e7e8      	b.n	800082e <I2C_DMAMasterReceiveCplt+0x14>

0800085c <I2C_IsAcknowledgeFailed>:
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800085c:	6803      	ldr	r3, [r0, #0]
{
 800085e:	b570      	push	{r4, r5, r6, lr}
 8000860:	4604      	mov	r4, r0
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8000862:	6998      	ldr	r0, [r3, #24]
 8000864:	f010 0010 	ands.w	r0, r0, #16
{
 8000868:	460d      	mov	r5, r1
 800086a:	4616      	mov	r6, r2
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800086c:	d112      	bne.n	8000894 <I2C_IsAcknowledgeFailed+0x38>
 800086e:	bd70      	pop	{r4, r5, r6, pc}
      if (Timeout != HAL_MAX_DELAY)
 8000870:	1c69      	adds	r1, r5, #1
 8000872:	d010      	beq.n	8000896 <I2C_IsAcknowledgeFailed+0x3a>
        if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8000874:	b94d      	cbnz	r5, 800088a <I2C_IsAcknowledgeFailed+0x2e>
          hi2c->State = HAL_I2C_STATE_READY;
 8000876:	2320      	movs	r3, #32
 8000878:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800087c:	2300      	movs	r3, #0
 800087e:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
          __HAL_UNLOCK(hi2c);
 8000882:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
          return HAL_TIMEOUT;
 8000886:	2003      	movs	r0, #3
 8000888:	bd70      	pop	{r4, r5, r6, pc}
        if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800088a:	f7ff fccb 	bl	8000224 <HAL_GetTick>
 800088e:	1b80      	subs	r0, r0, r6
 8000890:	4285      	cmp	r5, r0
 8000892:	d3f0      	bcc.n	8000876 <I2C_IsAcknowledgeFailed+0x1a>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8000894:	6823      	ldr	r3, [r4, #0]
 8000896:	6999      	ldr	r1, [r3, #24]
 8000898:	068a      	lsls	r2, r1, #26
 800089a:	d5e9      	bpl.n	8000870 <I2C_IsAcknowledgeFailed+0x14>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800089c:	2210      	movs	r2, #16
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800089e:	2520      	movs	r5, #32
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80008a0:	61da      	str	r2, [r3, #28]
    I2C_Flush_TXDR(hi2c);
 80008a2:	4620      	mov	r0, r4
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80008a4:	61dd      	str	r5, [r3, #28]
    I2C_Flush_TXDR(hi2c);
 80008a6:	f7ff ff0a 	bl	80006be <I2C_Flush_TXDR>
    I2C_RESET_CR2(hi2c);
 80008aa:	6822      	ldr	r2, [r4, #0]
 80008ac:	6853      	ldr	r3, [r2, #4]
 80008ae:	f023 73ff 	bic.w	r3, r3, #33423360	; 0x1fe0000
 80008b2:	f423 338b 	bic.w	r3, r3, #71168	; 0x11600
 80008b6:	f423 73ff 	bic.w	r3, r3, #510	; 0x1fe
 80008ba:	f023 0301 	bic.w	r3, r3, #1
 80008be:	6053      	str	r3, [r2, #4]
    hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 80008c0:	2304      	movs	r3, #4
 80008c2:	6463      	str	r3, [r4, #68]	; 0x44
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80008c4:	2300      	movs	r3, #0
    hi2c->State = HAL_I2C_STATE_READY;
 80008c6:	f884 5041 	strb.w	r5, [r4, #65]	; 0x41
    __HAL_UNLOCK(hi2c);
 80008ca:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80008ce:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
    return HAL_ERROR;
 80008d2:	2001      	movs	r0, #1
}
 80008d4:	bd70      	pop	{r4, r5, r6, pc}

080008d6 <I2C_WaitOnTXISFlagUntilTimeout>:
{
 80008d6:	b570      	push	{r4, r5, r6, lr}
 80008d8:	4604      	mov	r4, r0
 80008da:	460d      	mov	r5, r1
 80008dc:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80008de:	6823      	ldr	r3, [r4, #0]
 80008e0:	699b      	ldr	r3, [r3, #24]
 80008e2:	079b      	lsls	r3, r3, #30
 80008e4:	d501      	bpl.n	80008ea <I2C_WaitOnTXISFlagUntilTimeout+0x14>
  return HAL_OK;
 80008e6:	2000      	movs	r0, #0
 80008e8:	bd70      	pop	{r4, r5, r6, pc}
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 80008ea:	4632      	mov	r2, r6
 80008ec:	4629      	mov	r1, r5
 80008ee:	4620      	mov	r0, r4
 80008f0:	f7ff ffb4 	bl	800085c <I2C_IsAcknowledgeFailed>
 80008f4:	b9b0      	cbnz	r0, 8000924 <I2C_WaitOnTXISFlagUntilTimeout+0x4e>
    if (Timeout != HAL_MAX_DELAY)
 80008f6:	1c6a      	adds	r2, r5, #1
 80008f8:	d0f1      	beq.n	80008de <I2C_WaitOnTXISFlagUntilTimeout+0x8>
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80008fa:	b96d      	cbnz	r5, 8000918 <I2C_WaitOnTXISFlagUntilTimeout+0x42>
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80008fc:	6c63      	ldr	r3, [r4, #68]	; 0x44
 80008fe:	f043 0320 	orr.w	r3, r3, #32
 8000902:	6463      	str	r3, [r4, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8000904:	2320      	movs	r3, #32
 8000906:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800090a:	2300      	movs	r3, #0
 800090c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 8000910:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
 8000914:	2003      	movs	r0, #3
 8000916:	bd70      	pop	{r4, r5, r6, pc}
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8000918:	f7ff fc84 	bl	8000224 <HAL_GetTick>
 800091c:	1b80      	subs	r0, r0, r6
 800091e:	4285      	cmp	r5, r0
 8000920:	d2dd      	bcs.n	80008de <I2C_WaitOnTXISFlagUntilTimeout+0x8>
 8000922:	e7eb      	b.n	80008fc <I2C_WaitOnTXISFlagUntilTimeout+0x26>
      return HAL_ERROR;
 8000924:	2001      	movs	r0, #1
}
 8000926:	bd70      	pop	{r4, r5, r6, pc}

08000928 <I2C_RequestMemoryRead>:
{
 8000928:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800092a:	9e09      	ldr	r6, [sp, #36]	; 0x24
 800092c:	461f      	mov	r7, r3
  I2C_TransferConfig(hi2c, DevAddress, MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 800092e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
{
 8000932:	4604      	mov	r4, r0
  I2C_TransferConfig(hi2c, DevAddress, MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8000934:	9300      	str	r3, [sp, #0]
{
 8000936:	4615      	mov	r5, r2
  I2C_TransferConfig(hi2c, DevAddress, MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8000938:	2300      	movs	r3, #0
 800093a:	b2fa      	uxtb	r2, r7
 800093c:	f7ff fecd 	bl	80006da <I2C_TransferConfig>
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8000940:	4632      	mov	r2, r6
 8000942:	9908      	ldr	r1, [sp, #32]
 8000944:	4620      	mov	r0, r4
 8000946:	f7ff ffc6 	bl	80008d6 <I2C_WaitOnTXISFlagUntilTimeout>
 800094a:	b128      	cbz	r0, 8000958 <I2C_RequestMemoryRead+0x30>
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800094c:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800094e:	2b04      	cmp	r3, #4
 8000950:	d110      	bne.n	8000974 <I2C_RequestMemoryRead+0x4c>
      return HAL_ERROR;
 8000952:	2001      	movs	r0, #1
}
 8000954:	b003      	add	sp, #12
 8000956:	bdf0      	pop	{r4, r5, r6, r7, pc}
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8000958:	2f01      	cmp	r7, #1
 800095a:	6823      	ldr	r3, [r4, #0]
 800095c:	d10c      	bne.n	8000978 <I2C_RequestMemoryRead+0x50>
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800095e:	b2ed      	uxtb	r5, r5
 8000960:	629d      	str	r5, [r3, #40]	; 0x28
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8000962:	9b08      	ldr	r3, [sp, #32]
 8000964:	9600      	str	r6, [sp, #0]
 8000966:	2200      	movs	r2, #0
 8000968:	2140      	movs	r1, #64	; 0x40
 800096a:	4620      	mov	r0, r4
 800096c:	f7ff ff2e 	bl	80007cc <I2C_WaitOnFlagUntilTimeout>
 8000970:	2800      	cmp	r0, #0
 8000972:	d0ef      	beq.n	8000954 <I2C_RequestMemoryRead+0x2c>
      return HAL_TIMEOUT;
 8000974:	2003      	movs	r0, #3
 8000976:	e7ed      	b.n	8000954 <I2C_RequestMemoryRead+0x2c>
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8000978:	0a2a      	lsrs	r2, r5, #8
 800097a:	629a      	str	r2, [r3, #40]	; 0x28
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800097c:	9908      	ldr	r1, [sp, #32]
 800097e:	4632      	mov	r2, r6
 8000980:	4620      	mov	r0, r4
 8000982:	f7ff ffa8 	bl	80008d6 <I2C_WaitOnTXISFlagUntilTimeout>
 8000986:	2800      	cmp	r0, #0
 8000988:	d1e0      	bne.n	800094c <I2C_RequestMemoryRead+0x24>
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800098a:	6823      	ldr	r3, [r4, #0]
 800098c:	e7e7      	b.n	800095e <I2C_RequestMemoryRead+0x36>

0800098e <I2C_WaitOnSTOPFlagUntilTimeout>:
{
 800098e:	b570      	push	{r4, r5, r6, lr}
 8000990:	4604      	mov	r4, r0
 8000992:	460d      	mov	r5, r1
 8000994:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8000996:	6823      	ldr	r3, [r4, #0]
 8000998:	699b      	ldr	r3, [r3, #24]
 800099a:	069b      	lsls	r3, r3, #26
 800099c:	d501      	bpl.n	80009a2 <I2C_WaitOnSTOPFlagUntilTimeout+0x14>
  return HAL_OK;
 800099e:	2000      	movs	r0, #0
 80009a0:	bd70      	pop	{r4, r5, r6, pc}
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 80009a2:	4632      	mov	r2, r6
 80009a4:	4629      	mov	r1, r5
 80009a6:	4620      	mov	r0, r4
 80009a8:	f7ff ff58 	bl	800085c <I2C_IsAcknowledgeFailed>
 80009ac:	b9a0      	cbnz	r0, 80009d8 <I2C_WaitOnSTOPFlagUntilTimeout+0x4a>
    if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80009ae:	b96d      	cbnz	r5, 80009cc <I2C_WaitOnSTOPFlagUntilTimeout+0x3e>
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80009b0:	6c63      	ldr	r3, [r4, #68]	; 0x44
 80009b2:	f043 0320 	orr.w	r3, r3, #32
 80009b6:	6463      	str	r3, [r4, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 80009b8:	2320      	movs	r3, #32
 80009ba:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80009be:	2300      	movs	r3, #0
 80009c0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 80009c4:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
 80009c8:	2003      	movs	r0, #3
 80009ca:	bd70      	pop	{r4, r5, r6, pc}
    if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80009cc:	f7ff fc2a 	bl	8000224 <HAL_GetTick>
 80009d0:	1b80      	subs	r0, r0, r6
 80009d2:	4285      	cmp	r5, r0
 80009d4:	d2df      	bcs.n	8000996 <I2C_WaitOnSTOPFlagUntilTimeout+0x8>
 80009d6:	e7eb      	b.n	80009b0 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
      return HAL_ERROR;
 80009d8:	2001      	movs	r0, #1
}
 80009da:	bd70      	pop	{r4, r5, r6, pc}

080009dc <HAL_I2C_Init>:
{
 80009dc:	b510      	push	{r4, lr}
  if (hi2c == NULL)
 80009de:	4604      	mov	r4, r0
 80009e0:	2800      	cmp	r0, #0
 80009e2:	d04a      	beq.n	8000a7a <HAL_I2C_Init+0x9e>
  if (hi2c->State == HAL_I2C_STATE_RESET)
 80009e4:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 80009e8:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 80009ec:	b91b      	cbnz	r3, 80009f6 <HAL_I2C_Init+0x1a>
    hi2c->Lock = HAL_UNLOCKED;
 80009ee:	f880 2040 	strb.w	r2, [r0, #64]	; 0x40
    HAL_I2C_MspInit(hi2c);
 80009f2:	f002 f85b 	bl	8002aac <HAL_I2C_MspInit>
  hi2c->State = HAL_I2C_STATE_BUSY;
 80009f6:	2324      	movs	r3, #36	; 0x24
 80009f8:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  __HAL_I2C_DISABLE(hi2c);
 80009fc:	6823      	ldr	r3, [r4, #0]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80009fe:	68e1      	ldr	r1, [r4, #12]
  __HAL_I2C_DISABLE(hi2c);
 8000a00:	681a      	ldr	r2, [r3, #0]
 8000a02:	f022 0201 	bic.w	r2, r2, #1
 8000a06:	601a      	str	r2, [r3, #0]
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8000a08:	6862      	ldr	r2, [r4, #4]
 8000a0a:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8000a0e:	611a      	str	r2, [r3, #16]
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8000a10:	689a      	ldr	r2, [r3, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8000a12:	2901      	cmp	r1, #1
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8000a14:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8000a18:	609a      	str	r2, [r3, #8]
 8000a1a:	68a2      	ldr	r2, [r4, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8000a1c:	d124      	bne.n	8000a68 <HAL_I2C_Init+0x8c>
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8000a1e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8000a22:	609a      	str	r2, [r3, #8]
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8000a24:	685a      	ldr	r2, [r3, #4]
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 8000a26:	6961      	ldr	r1, [r4, #20]
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8000a28:	f042 7200 	orr.w	r2, r2, #33554432	; 0x2000000
 8000a2c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8000a30:	605a      	str	r2, [r3, #4]
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8000a32:	68da      	ldr	r2, [r3, #12]
 8000a34:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8000a38:	60da      	str	r2, [r3, #12]
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 8000a3a:	6922      	ldr	r2, [r4, #16]
 8000a3c:	430a      	orrs	r2, r1
 8000a3e:	69a1      	ldr	r1, [r4, #24]
 8000a40:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8000a44:	60da      	str	r2, [r3, #12]
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8000a46:	6a21      	ldr	r1, [r4, #32]
 8000a48:	69e2      	ldr	r2, [r4, #28]
 8000a4a:	430a      	orrs	r2, r1
 8000a4c:	601a      	str	r2, [r3, #0]
  __HAL_I2C_ENABLE(hi2c);
 8000a4e:	681a      	ldr	r2, [r3, #0]
 8000a50:	f042 0201 	orr.w	r2, r2, #1
 8000a54:	601a      	str	r2, [r3, #0]
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8000a56:	2000      	movs	r0, #0
  hi2c->State = HAL_I2C_STATE_READY;
 8000a58:	2320      	movs	r3, #32
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8000a5a:	6460      	str	r0, [r4, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8000a5c:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8000a60:	6320      	str	r0, [r4, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8000a62:	f884 0042 	strb.w	r0, [r4, #66]	; 0x42
  return HAL_OK;
 8000a66:	bd10      	pop	{r4, pc}
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8000a68:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8000a6c:	2902      	cmp	r1, #2
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8000a6e:	609a      	str	r2, [r3, #8]
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8000a70:	bf04      	itt	eq
 8000a72:	f44f 6200 	moveq.w	r2, #2048	; 0x800
 8000a76:	605a      	streq	r2, [r3, #4]
 8000a78:	e7d4      	b.n	8000a24 <HAL_I2C_Init+0x48>
    return HAL_ERROR;
 8000a7a:	2001      	movs	r0, #1
}
 8000a7c:	bd10      	pop	{r4, pc}

08000a7e <HAL_I2C_Mem_Read>:
{
 8000a7e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000a82:	469b      	mov	fp, r3
  if (hi2c->State == HAL_I2C_STATE_READY)
 8000a84:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
{
 8000a88:	b085      	sub	sp, #20
  if (hi2c->State == HAL_I2C_STATE_READY)
 8000a8a:	2b20      	cmp	r3, #32
{
 8000a8c:	4604      	mov	r4, r0
 8000a8e:	460f      	mov	r7, r1
 8000a90:	9203      	str	r2, [sp, #12]
 8000a92:	f8bd a03c 	ldrh.w	sl, [sp, #60]	; 0x3c
 8000a96:	f8dd 9040 	ldr.w	r9, [sp, #64]	; 0x40
  if (hi2c->State == HAL_I2C_STATE_READY)
 8000a9a:	f040 80ac 	bne.w	8000bf6 <HAL_I2C_Mem_Read+0x178>
    if ((pData == NULL) || (Size == 0U))
 8000a9e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8000aa0:	b91b      	cbnz	r3, 8000aaa <HAL_I2C_Mem_Read+0x2c>
      return  HAL_ERROR;
 8000aa2:	2001      	movs	r0, #1
}
 8000aa4:	b005      	add	sp, #20
 8000aa6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    if ((pData == NULL) || (Size == 0U))
 8000aaa:	f1ba 0f00 	cmp.w	sl, #0
 8000aae:	d0f8      	beq.n	8000aa2 <HAL_I2C_Mem_Read+0x24>
    __HAL_LOCK(hi2c);
 8000ab0:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 8000ab4:	2b01      	cmp	r3, #1
 8000ab6:	f000 809e 	beq.w	8000bf6 <HAL_I2C_Mem_Read+0x178>
 8000aba:	2501      	movs	r5, #1
 8000abc:	f880 5040 	strb.w	r5, [r0, #64]	; 0x40
    tickstart = HAL_GetTick();
 8000ac0:	f7ff fbb0 	bl	8000224 <HAL_GetTick>
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8000ac4:	2319      	movs	r3, #25
 8000ac6:	9000      	str	r0, [sp, #0]
    tickstart = HAL_GetTick();
 8000ac8:	4606      	mov	r6, r0
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8000aca:	462a      	mov	r2, r5
 8000acc:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000ad0:	4620      	mov	r0, r4
 8000ad2:	f7ff fe7b 	bl	80007cc <I2C_WaitOnFlagUntilTimeout>
 8000ad6:	4680      	mov	r8, r0
 8000ad8:	b9d0      	cbnz	r0, 8000b10 <HAL_I2C_Mem_Read+0x92>
    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8000ada:	2322      	movs	r3, #34	; 0x22
 8000adc:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8000ae0:	2340      	movs	r3, #64	; 0x40
 8000ae2:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
    hi2c->pBuffPtr  = pData;
 8000ae6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8000ae8:	6460      	str	r0, [r4, #68]	; 0x44
    hi2c->pBuffPtr  = pData;
 8000aea:	6263      	str	r3, [r4, #36]	; 0x24
    hi2c->XferISR   = NULL;
 8000aec:	6360      	str	r0, [r4, #52]	; 0x34
    hi2c->XferCount = Size;
 8000aee:	f8a4 a02a 	strh.w	sl, [r4, #42]	; 0x2a
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8000af2:	9601      	str	r6, [sp, #4]
 8000af4:	f8cd 9000 	str.w	r9, [sp]
 8000af8:	465b      	mov	r3, fp
 8000afa:	9a03      	ldr	r2, [sp, #12]
 8000afc:	4639      	mov	r1, r7
 8000afe:	4620      	mov	r0, r4
 8000b00:	f7ff ff12 	bl	8000928 <I2C_RequestMemoryRead>
 8000b04:	b130      	cbz	r0, 8000b14 <HAL_I2C_Mem_Read+0x96>
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8000b06:	6c63      	ldr	r3, [r4, #68]	; 0x44
        __HAL_UNLOCK(hi2c);
 8000b08:	f884 8040 	strb.w	r8, [r4, #64]	; 0x40
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8000b0c:	2b04      	cmp	r3, #4
 8000b0e:	d0c8      	beq.n	8000aa2 <HAL_I2C_Mem_Read+0x24>
        return HAL_TIMEOUT;
 8000b10:	2003      	movs	r0, #3
 8000b12:	e7c7      	b.n	8000aa4 <HAL_I2C_Mem_Read+0x26>
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8000b14:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8000b16:	b29b      	uxth	r3, r3
 8000b18:	2bff      	cmp	r3, #255	; 0xff
 8000b1a:	d946      	bls.n	8000baa <HAL_I2C_Mem_Read+0x12c>
      I2C_TransferConfig(hi2c, DevAddress, hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_READ);
 8000b1c:	f44f 5310 	mov.w	r3, #9216	; 0x2400
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8000b20:	22ff      	movs	r2, #255	; 0xff
      I2C_TransferConfig(hi2c, DevAddress, hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_READ);
 8000b22:	9300      	str	r3, [sp, #0]
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8000b24:	8522      	strh	r2, [r4, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_READ);
 8000b26:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
      I2C_TransferConfig(hi2c, DevAddress, hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_READ);
 8000b2a:	4639      	mov	r1, r7
 8000b2c:	4620      	mov	r0, r4
 8000b2e:	f7ff fdd4 	bl	80006da <I2C_TransferConfig>
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8000b32:	9600      	str	r6, [sp, #0]
 8000b34:	464b      	mov	r3, r9
 8000b36:	2200      	movs	r2, #0
 8000b38:	2104      	movs	r1, #4
 8000b3a:	4620      	mov	r0, r4
 8000b3c:	f7ff fe46 	bl	80007cc <I2C_WaitOnFlagUntilTimeout>
 8000b40:	2800      	cmp	r0, #0
 8000b42:	d1e5      	bne.n	8000b10 <HAL_I2C_Mem_Read+0x92>
      (*hi2c->pBuffPtr++) = hi2c->Instance->RXDR;
 8000b44:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8000b46:	1c5a      	adds	r2, r3, #1
 8000b48:	6262      	str	r2, [r4, #36]	; 0x24
 8000b4a:	6822      	ldr	r2, [r4, #0]
 8000b4c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8000b4e:	701a      	strb	r2, [r3, #0]
      hi2c->XferSize--;
 8000b50:	8d22      	ldrh	r2, [r4, #40]	; 0x28
      hi2c->XferCount--;
 8000b52:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
      hi2c->XferSize--;
 8000b54:	3a01      	subs	r2, #1
      hi2c->XferCount--;
 8000b56:	3b01      	subs	r3, #1
      hi2c->XferSize--;
 8000b58:	b292      	uxth	r2, r2
      hi2c->XferCount--;
 8000b5a:	b29b      	uxth	r3, r3
      hi2c->XferSize--;
 8000b5c:	8522      	strh	r2, [r4, #40]	; 0x28
      hi2c->XferCount--;
 8000b5e:	8563      	strh	r3, [r4, #42]	; 0x2a
      if ((hi2c->XferSize == 0U) && (hi2c->XferCount != 0U))
 8000b60:	b9ba      	cbnz	r2, 8000b92 <HAL_I2C_Mem_Read+0x114>
 8000b62:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8000b64:	b29b      	uxth	r3, r3
 8000b66:	b1a3      	cbz	r3, 8000b92 <HAL_I2C_Mem_Read+0x114>
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8000b68:	9600      	str	r6, [sp, #0]
 8000b6a:	464b      	mov	r3, r9
 8000b6c:	2180      	movs	r1, #128	; 0x80
 8000b6e:	4620      	mov	r0, r4
 8000b70:	f7ff fe2c 	bl	80007cc <I2C_WaitOnFlagUntilTimeout>
 8000b74:	2800      	cmp	r0, #0
 8000b76:	d1cb      	bne.n	8000b10 <HAL_I2C_Mem_Read+0x92>
        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8000b78:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8000b7a:	b29b      	uxth	r3, r3
 8000b7c:	2bff      	cmp	r3, #255	; 0xff
 8000b7e:	d91e      	bls.n	8000bbe <HAL_I2C_Mem_Read+0x140>
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8000b80:	22ff      	movs	r2, #255	; 0xff
 8000b82:	8522      	strh	r2, [r4, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8000b84:	9000      	str	r0, [sp, #0]
 8000b86:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
          I2C_TransferConfig(hi2c, DevAddress, hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8000b8a:	4639      	mov	r1, r7
 8000b8c:	4620      	mov	r0, r4
 8000b8e:	f7ff fda4 	bl	80006da <I2C_TransferConfig>
    while (hi2c->XferCount > 0U);
 8000b92:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8000b94:	b29b      	uxth	r3, r3
 8000b96:	2b00      	cmp	r3, #0
 8000b98:	d1cb      	bne.n	8000b32 <HAL_I2C_Mem_Read+0xb4>
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8000b9a:	4632      	mov	r2, r6
 8000b9c:	4649      	mov	r1, r9
 8000b9e:	4620      	mov	r0, r4
 8000ba0:	f7ff fef5 	bl	800098e <I2C_WaitOnSTOPFlagUntilTimeout>
 8000ba4:	b198      	cbz	r0, 8000bce <HAL_I2C_Mem_Read+0x150>
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8000ba6:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8000ba8:	e7b0      	b.n	8000b0c <HAL_I2C_Mem_Read+0x8e>
      hi2c->XferSize = hi2c->XferCount;
 8000baa:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
      I2C_TransferConfig(hi2c, DevAddress, hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_READ);
 8000bac:	f44f 5310 	mov.w	r3, #9216	; 0x2400
      hi2c->XferSize = hi2c->XferCount;
 8000bb0:	b292      	uxth	r2, r2
 8000bb2:	8522      	strh	r2, [r4, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_READ);
 8000bb4:	9300      	str	r3, [sp, #0]
 8000bb6:	b2d2      	uxtb	r2, r2
 8000bb8:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8000bbc:	e7b5      	b.n	8000b2a <HAL_I2C_Mem_Read+0xac>
          hi2c->XferSize = hi2c->XferCount;
 8000bbe:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
          I2C_TransferConfig(hi2c, DevAddress, hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8000bc0:	9000      	str	r0, [sp, #0]
          hi2c->XferSize = hi2c->XferCount;
 8000bc2:	b292      	uxth	r2, r2
 8000bc4:	8522      	strh	r2, [r4, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8000bc6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8000bca:	b2d2      	uxtb	r2, r2
 8000bcc:	e7dd      	b.n	8000b8a <HAL_I2C_Mem_Read+0x10c>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8000bce:	6823      	ldr	r3, [r4, #0]
 8000bd0:	2120      	movs	r1, #32
 8000bd2:	61d9      	str	r1, [r3, #28]
    I2C_RESET_CR2(hi2c);
 8000bd4:	685a      	ldr	r2, [r3, #4]
 8000bd6:	f022 72ff 	bic.w	r2, r2, #33423360	; 0x1fe0000
 8000bda:	f422 328b 	bic.w	r2, r2, #71168	; 0x11600
 8000bde:	f422 72ff 	bic.w	r2, r2, #510	; 0x1fe
 8000be2:	f022 0201 	bic.w	r2, r2, #1
 8000be6:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 8000be8:	f884 1041 	strb.w	r1, [r4, #65]	; 0x41
    __HAL_UNLOCK(hi2c);
 8000bec:	f884 0040 	strb.w	r0, [r4, #64]	; 0x40
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8000bf0:	f884 0042 	strb.w	r0, [r4, #66]	; 0x42
    return HAL_OK;
 8000bf4:	e756      	b.n	8000aa4 <HAL_I2C_Mem_Read+0x26>
    return HAL_BUSY;
 8000bf6:	2002      	movs	r0, #2
 8000bf8:	e754      	b.n	8000aa4 <HAL_I2C_Mem_Read+0x26>
	...

08000bfc <HAL_I2C_Mem_Read_DMA>:
{
 8000bfc:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
 8000c00:	469a      	mov	sl, r3
  if (hi2c->State == HAL_I2C_STATE_READY)
 8000c02:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
{
 8000c06:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 8000c08:	f8bd 802c 	ldrh.w	r8, [sp, #44]	; 0x2c
  if (hi2c->State == HAL_I2C_STATE_READY)
 8000c0c:	2b20      	cmp	r3, #32
{
 8000c0e:	4604      	mov	r4, r0
 8000c10:	460f      	mov	r7, r1
 8000c12:	4691      	mov	r9, r2
  if (hi2c->State == HAL_I2C_STATE_READY)
 8000c14:	d16f      	bne.n	8000cf6 <HAL_I2C_Mem_Read_DMA+0xfa>
    if ((pData == NULL) || (Size == 0U))
 8000c16:	2e00      	cmp	r6, #0
 8000c18:	d03e      	beq.n	8000c98 <HAL_I2C_Mem_Read_DMA+0x9c>
 8000c1a:	f1b8 0f00 	cmp.w	r8, #0
 8000c1e:	d03b      	beq.n	8000c98 <HAL_I2C_Mem_Read_DMA+0x9c>
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 8000c20:	6803      	ldr	r3, [r0, #0]
 8000c22:	699d      	ldr	r5, [r3, #24]
 8000c24:	f415 4500 	ands.w	r5, r5, #32768	; 0x8000
 8000c28:	d165      	bne.n	8000cf6 <HAL_I2C_Mem_Read_DMA+0xfa>
    __HAL_LOCK(hi2c);
 8000c2a:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 8000c2e:	2b01      	cmp	r3, #1
 8000c30:	d061      	beq.n	8000cf6 <HAL_I2C_Mem_Read_DMA+0xfa>
 8000c32:	2301      	movs	r3, #1
 8000c34:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
    tickstart = HAL_GetTick();
 8000c38:	f7ff faf4 	bl	8000224 <HAL_GetTick>
    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 8000c3c:	2322      	movs	r3, #34	; 0x22
 8000c3e:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
    hi2c->Mode        = HAL_I2C_MODE_MEM;
 8000c42:	2340      	movs	r3, #64	; 0x40
 8000c44:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8000c48:	4b2c      	ldr	r3, [pc, #176]	; (8000cfc <HAL_I2C_Mem_Read_DMA+0x100>)
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8000c4a:	6465      	str	r5, [r4, #68]	; 0x44
    hi2c->XferCount   = Size;
 8000c4c:	f8a4 802a 	strh.w	r8, [r4, #42]	; 0x2a
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8000c50:	62e3      	str	r3, [r4, #44]	; 0x2c
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8000c52:	8d61      	ldrh	r1, [r4, #42]	; 0x2a
    hi2c->XferISR     = I2C_Master_ISR_DMA;
 8000c54:	4b2a      	ldr	r3, [pc, #168]	; (8000d00 <HAL_I2C_Mem_Read_DMA+0x104>)
 8000c56:	6363      	str	r3, [r4, #52]	; 0x34
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8000c58:	b289      	uxth	r1, r1
 8000c5a:	29ff      	cmp	r1, #255	; 0xff
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8000c5c:	bf8b      	itete	hi
 8000c5e:	23ff      	movhi	r3, #255	; 0xff
      hi2c->XferSize = hi2c->XferCount;
 8000c60:	8d63      	ldrhls	r3, [r4, #42]	; 0x2a
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8000c62:	8523      	strhhi	r3, [r4, #40]	; 0x28
      hi2c->XferSize = hi2c->XferCount;
 8000c64:	8523      	strhls	r3, [r4, #40]	; 0x28
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, I2C_TIMEOUT_FLAG, tickstart) != HAL_OK)
 8000c66:	f04f 0319 	mov.w	r3, #25
 8000c6a:	9001      	str	r0, [sp, #4]
 8000c6c:	9300      	str	r3, [sp, #0]
    hi2c->pBuffPtr    = pData;
 8000c6e:	6266      	str	r6, [r4, #36]	; 0x24
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, I2C_TIMEOUT_FLAG, tickstart) != HAL_OK)
 8000c70:	4653      	mov	r3, sl
 8000c72:	464a      	mov	r2, r9
 8000c74:	4639      	mov	r1, r7
 8000c76:	4620      	mov	r0, r4
      xfermode = I2C_RELOAD_MODE;
 8000c78:	bf8c      	ite	hi
 8000c7a:	f04f 7880 	movhi.w	r8, #16777216	; 0x1000000
      xfermode = I2C_AUTOEND_MODE;
 8000c7e:	f04f 7800 	movls.w	r8, #33554432	; 0x2000000
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, I2C_TIMEOUT_FLAG, tickstart) != HAL_OK)
 8000c82:	f7ff fe51 	bl	8000928 <I2C_RequestMemoryRead>
 8000c86:	4605      	mov	r5, r0
 8000c88:	b168      	cbz	r0, 8000ca6 <HAL_I2C_Mem_Read_DMA+0xaa>
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8000c8a:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8000c8c:	2b04      	cmp	r3, #4
 8000c8e:	f04f 0300 	mov.w	r3, #0
        __HAL_UNLOCK(hi2c);
 8000c92:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8000c96:	d101      	bne.n	8000c9c <HAL_I2C_Mem_Read_DMA+0xa0>
      return  HAL_ERROR;
 8000c98:	2501      	movs	r5, #1
 8000c9a:	e000      	b.n	8000c9e <HAL_I2C_Mem_Read_DMA+0xa2>
        return HAL_TIMEOUT;
 8000c9c:	2503      	movs	r5, #3
}
 8000c9e:	4628      	mov	r0, r5
 8000ca0:	b002      	add	sp, #8
 8000ca2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    hi2c->hdmarx->XferCpltCallback = I2C_DMAMasterReceiveCplt;
 8000ca6:	6be0      	ldr	r0, [r4, #60]	; 0x3c
    HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->RXDR, (uint32_t)pData, hi2c->XferSize);
 8000ca8:	6821      	ldr	r1, [r4, #0]
    hi2c->hdmarx->XferCpltCallback = I2C_DMAMasterReceiveCplt;
 8000caa:	4b16      	ldr	r3, [pc, #88]	; (8000d04 <HAL_I2C_Mem_Read_DMA+0x108>)
 8000cac:	6283      	str	r3, [r0, #40]	; 0x28
    hi2c->hdmarx->XferErrorCallback = I2C_DMAError;
 8000cae:	4b16      	ldr	r3, [pc, #88]	; (8000d08 <HAL_I2C_Mem_Read_DMA+0x10c>)
 8000cb0:	6303      	str	r3, [r0, #48]	; 0x30
    HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->RXDR, (uint32_t)pData, hi2c->XferSize);
 8000cb2:	4632      	mov	r2, r6
 8000cb4:	8d23      	ldrh	r3, [r4, #40]	; 0x28
    hi2c->hdmarx->XferHalfCpltCallback = NULL;
 8000cb6:	62c5      	str	r5, [r0, #44]	; 0x2c
    hi2c->hdmarx->XferAbortCallback = NULL;
 8000cb8:	6345      	str	r5, [r0, #52]	; 0x34
    HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->RXDR, (uint32_t)pData, hi2c->XferSize);
 8000cba:	3124      	adds	r1, #36	; 0x24
 8000cbc:	f7ff fb8f 	bl	80003de <HAL_DMA_Start_IT>
    I2C_TransferConfig(hi2c, DevAddress, hi2c->XferSize, xfermode, I2C_GENERATE_START_READ);
 8000cc0:	f44f 5310 	mov.w	r3, #9216	; 0x2400
 8000cc4:	f894 2028 	ldrb.w	r2, [r4, #40]	; 0x28
 8000cc8:	9300      	str	r3, [sp, #0]
 8000cca:	4639      	mov	r1, r7
 8000ccc:	4643      	mov	r3, r8
 8000cce:	4620      	mov	r0, r4
 8000cd0:	f7ff fd03 	bl	80006da <I2C_TransferConfig>
    hi2c->XferCount -= hi2c->XferSize;
 8000cd4:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8000cd6:	8d22      	ldrh	r2, [r4, #40]	; 0x28
    __HAL_UNLOCK(hi2c);
 8000cd8:	f884 5040 	strb.w	r5, [r4, #64]	; 0x40
    hi2c->XferCount -= hi2c->XferSize;
 8000cdc:	1a9b      	subs	r3, r3, r2
 8000cde:	b29b      	uxth	r3, r3
    hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 8000ce0:	6822      	ldr	r2, [r4, #0]
    hi2c->XferCount -= hi2c->XferSize;
 8000ce2:	8563      	strh	r3, [r4, #42]	; 0x2a
    hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 8000ce4:	6813      	ldr	r3, [r2, #0]
 8000ce6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000cea:	6013      	str	r3, [r2, #0]
    I2C_Enable_IRQ(hi2c, I2C_XFER_ERROR_IT);
 8000cec:	2111      	movs	r1, #17
 8000cee:	4620      	mov	r0, r4
 8000cf0:	f7ff fd08 	bl	8000704 <I2C_Enable_IRQ>
    return HAL_OK;
 8000cf4:	e7d3      	b.n	8000c9e <HAL_I2C_Mem_Read_DMA+0xa2>
    return HAL_BUSY;
 8000cf6:	2502      	movs	r5, #2
 8000cf8:	e7d1      	b.n	8000c9e <HAL_I2C_Mem_Read_DMA+0xa2>
 8000cfa:	bf00      	nop
 8000cfc:	ffff0000 	.word	0xffff0000
 8000d00:	08001297 	.word	0x08001297
 8000d04:	0800081b 	.word	0x0800081b
 8000d08:	0800135d 	.word	0x0800135d

08000d0c <HAL_I2C_EV_IRQHandler>:
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8000d0c:	6802      	ldr	r2, [r0, #0]
  if (hi2c->XferISR != NULL)
 8000d0e:	6b43      	ldr	r3, [r0, #52]	; 0x34
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8000d10:	6991      	ldr	r1, [r2, #24]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8000d12:	6812      	ldr	r2, [r2, #0]
  if (hi2c->XferISR != NULL)
 8000d14:	b103      	cbz	r3, 8000d18 <HAL_I2C_EV_IRQHandler+0xc>
    hi2c->XferISR(hi2c, itflags, itsources);
 8000d16:	4718      	bx	r3
 8000d18:	4770      	bx	lr

08000d1a <HAL_I2C_MasterTxCpltCallback>:
 8000d1a:	4770      	bx	lr

08000d1c <HAL_I2C_MasterRxCpltCallback>:
 8000d1c:	4770      	bx	lr

08000d1e <HAL_I2C_SlaveTxCpltCallback>:
 8000d1e:	4770      	bx	lr

08000d20 <HAL_I2C_SlaveRxCpltCallback>:
 8000d20:	4770      	bx	lr

08000d22 <I2C_ITSlaveSequentialCplt>:
{
 8000d22:	b538      	push	{r3, r4, r5, lr}
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8000d24:	2500      	movs	r5, #0
 8000d26:	f880 5042 	strb.w	r5, [r0, #66]	; 0x42
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
 8000d2a:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 8000d2e:	2b29      	cmp	r3, #41	; 0x29
{
 8000d30:	4604      	mov	r4, r0
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
 8000d32:	d10d      	bne.n	8000d50 <I2C_ITSlaveSequentialCplt+0x2e>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8000d34:	2328      	movs	r3, #40	; 0x28
 8000d36:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8000d3a:	2321      	movs	r3, #33	; 0x21
 8000d3c:	6303      	str	r3, [r0, #48]	; 0x30
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8000d3e:	2101      	movs	r1, #1
 8000d40:	f7ff fd16 	bl	8000770 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 8000d44:	f884 5040 	strb.w	r5, [r4, #64]	; 0x40
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8000d48:	4620      	mov	r0, r4
 8000d4a:	f7ff ffe8 	bl	8000d1e <HAL_I2C_SlaveTxCpltCallback>
 8000d4e:	bd38      	pop	{r3, r4, r5, pc}
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8000d50:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 8000d54:	2b2a      	cmp	r3, #42	; 0x2a
 8000d56:	d10c      	bne.n	8000d72 <I2C_ITSlaveSequentialCplt+0x50>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8000d58:	2328      	movs	r3, #40	; 0x28
 8000d5a:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8000d5e:	2322      	movs	r3, #34	; 0x22
 8000d60:	6303      	str	r3, [r0, #48]	; 0x30
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 8000d62:	2102      	movs	r1, #2
 8000d64:	f7ff fd04 	bl	8000770 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 8000d68:	f884 5040 	strb.w	r5, [r4, #64]	; 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 8000d6c:	4620      	mov	r0, r4
 8000d6e:	f7ff ffd7 	bl	8000d20 <HAL_I2C_SlaveRxCpltCallback>
 8000d72:	bd38      	pop	{r3, r4, r5, pc}

08000d74 <HAL_I2C_AddrCallback>:
{
 8000d74:	4770      	bx	lr

08000d76 <HAL_I2C_ListenCpltCallback>:
 8000d76:	4770      	bx	lr

08000d78 <I2C_ITListenCplt>:
  hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8000d78:	4b16      	ldr	r3, [pc, #88]	; (8000dd4 <I2C_ITListenCplt+0x5c>)
{
 8000d7a:	b510      	push	{r4, lr}
  hi2c->State = HAL_I2C_STATE_READY;
 8000d7c:	2220      	movs	r2, #32
  hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8000d7e:	62c3      	str	r3, [r0, #44]	; 0x2c
  hi2c->PreviousState = I2C_STATE_NONE;
 8000d80:	2300      	movs	r3, #0
 8000d82:	6303      	str	r3, [r0, #48]	; 0x30
  hi2c->XferISR = NULL;
 8000d84:	6343      	str	r3, [r0, #52]	; 0x34
  hi2c->State = HAL_I2C_STATE_READY;
 8000d86:	f880 2041 	strb.w	r2, [r0, #65]	; 0x41
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8000d8a:	f880 3042 	strb.w	r3, [r0, #66]	; 0x42
  if (((ITFlags & I2C_FLAG_RXNE) != RESET))
 8000d8e:	074b      	lsls	r3, r1, #29
{
 8000d90:	4604      	mov	r4, r0
  if (((ITFlags & I2C_FLAG_RXNE) != RESET))
 8000d92:	d511      	bpl.n	8000db8 <I2C_ITListenCplt+0x40>
    (*hi2c->pBuffPtr++) = hi2c->Instance->RXDR;
 8000d94:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8000d96:	1c5a      	adds	r2, r3, #1
 8000d98:	6242      	str	r2, [r0, #36]	; 0x24
 8000d9a:	6802      	ldr	r2, [r0, #0]
 8000d9c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8000d9e:	701a      	strb	r2, [r3, #0]
    if ((hi2c->XferSize > 0U))
 8000da0:	8d03      	ldrh	r3, [r0, #40]	; 0x28
 8000da2:	b14b      	cbz	r3, 8000db8 <I2C_ITListenCplt+0x40>
      hi2c->XferSize--;
 8000da4:	3b01      	subs	r3, #1
 8000da6:	8503      	strh	r3, [r0, #40]	; 0x28
      hi2c->XferCount--;
 8000da8:	8d43      	ldrh	r3, [r0, #42]	; 0x2a
 8000daa:	3b01      	subs	r3, #1
 8000dac:	b29b      	uxth	r3, r3
 8000dae:	8543      	strh	r3, [r0, #42]	; 0x2a
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8000db0:	6c43      	ldr	r3, [r0, #68]	; 0x44
 8000db2:	f043 0304 	orr.w	r3, r3, #4
 8000db6:	6443      	str	r3, [r0, #68]	; 0x44
  I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8000db8:	2107      	movs	r1, #7
 8000dba:	4620      	mov	r0, r4
 8000dbc:	f7ff fcd8 	bl	8000770 <I2C_Disable_IRQ>
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8000dc0:	6823      	ldr	r3, [r4, #0]
 8000dc2:	2210      	movs	r2, #16
 8000dc4:	61da      	str	r2, [r3, #28]
  __HAL_UNLOCK(hi2c);
 8000dc6:	2300      	movs	r3, #0
 8000dc8:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
  HAL_I2C_ListenCpltCallback(hi2c);
 8000dcc:	4620      	mov	r0, r4
 8000dce:	f7ff ffd2 	bl	8000d76 <HAL_I2C_ListenCpltCallback>
 8000dd2:	bd10      	pop	{r4, pc}
 8000dd4:	ffff0000 	.word	0xffff0000

08000dd8 <HAL_I2C_ErrorCallback>:
 8000dd8:	4770      	bx	lr

08000dda <HAL_I2C_AbortCpltCallback>:
{
 8000dda:	4770      	bx	lr

08000ddc <I2C_ITError>:
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 8000ddc:	2300      	movs	r3, #0
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8000dde:	4a35      	ldr	r2, [pc, #212]	; (8000eb4 <I2C_ITError+0xd8>)
{
 8000de0:	b510      	push	{r4, lr}
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 8000de2:	f880 3042 	strb.w	r3, [r0, #66]	; 0x42
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8000de6:	62c2      	str	r2, [r0, #44]	; 0x2c
  hi2c->XferCount     = 0U;
 8000de8:	8543      	strh	r3, [r0, #42]	; 0x2a
  hi2c->ErrorCode |= ErrorCode;
 8000dea:	6c43      	ldr	r3, [r0, #68]	; 0x44
 8000dec:	4319      	orrs	r1, r3
 8000dee:	6441      	str	r1, [r0, #68]	; 0x44
  if ((hi2c->State == HAL_I2C_STATE_LISTEN)         ||
 8000df0:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 8000df4:	2b28      	cmp	r3, #40	; 0x28
{
 8000df6:	4604      	mov	r4, r0
  if ((hi2c->State == HAL_I2C_STATE_LISTEN)         ||
 8000df8:	d007      	beq.n	8000e0a <I2C_ITError+0x2e>
      (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) ||
 8000dfa:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
  if ((hi2c->State == HAL_I2C_STATE_LISTEN)         ||
 8000dfe:	2b29      	cmp	r3, #41	; 0x29
 8000e00:	d003      	beq.n	8000e0a <I2C_ITError+0x2e>
      (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8000e02:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
      (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) ||
 8000e06:	2b2a      	cmp	r3, #42	; 0x2a
 8000e08:	d122      	bne.n	8000e50 <I2C_ITError+0x74>
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8000e0a:	2103      	movs	r1, #3
 8000e0c:	4620      	mov	r0, r4
 8000e0e:	f7ff fcaf 	bl	8000770 <I2C_Disable_IRQ>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8000e12:	2328      	movs	r3, #40	; 0x28
 8000e14:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8000e18:	2300      	movs	r3, #0
 8000e1a:	6323      	str	r3, [r4, #48]	; 0x30
    hi2c->XferISR       = I2C_Slave_ISR_IT;
 8000e1c:	4b26      	ldr	r3, [pc, #152]	; (8000eb8 <I2C_ITError+0xdc>)
    hi2c->XferISR       = NULL;
 8000e1e:	6363      	str	r3, [r4, #52]	; 0x34
  if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
 8000e20:	6823      	ldr	r3, [r4, #0]
 8000e22:	6819      	ldr	r1, [r3, #0]
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8000e24:	681a      	ldr	r2, [r3, #0]
  if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
 8000e26:	f411 4180 	ands.w	r1, r1, #16384	; 0x4000
 8000e2a:	d01e      	beq.n	8000e6a <I2C_ITError+0x8e>
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8000e2c:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
    hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8000e30:	6ba0      	ldr	r0, [r4, #56]	; 0x38
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8000e32:	601a      	str	r2, [r3, #0]
    hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8000e34:	4b21      	ldr	r3, [pc, #132]	; (8000ebc <I2C_ITError+0xe0>)
 8000e36:	6343      	str	r3, [r0, #52]	; 0x34
    __HAL_UNLOCK(hi2c);
 8000e38:	2300      	movs	r3, #0
 8000e3a:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
    if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8000e3e:	f7ff fb0b 	bl	8000458 <HAL_DMA_Abort_IT>
 8000e42:	2800      	cmp	r0, #0
 8000e44:	d034      	beq.n	8000eb0 <I2C_ITError+0xd4>
      hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8000e46:	6ba0      	ldr	r0, [r4, #56]	; 0x38
      hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8000e48:	6b43      	ldr	r3, [r0, #52]	; 0x34
}
 8000e4a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8000e4e:	4718      	bx	r3
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8000e50:	2107      	movs	r1, #7
 8000e52:	f7ff fc8d 	bl	8000770 <I2C_Disable_IRQ>
    if (hi2c->State != HAL_I2C_STATE_ABORT)
 8000e56:	f894 3041 	ldrb.w	r3, [r4, #65]	; 0x41
 8000e5a:	2b60      	cmp	r3, #96	; 0x60
      hi2c->State         = HAL_I2C_STATE_READY;
 8000e5c:	bf1c      	itt	ne
 8000e5e:	2320      	movne	r3, #32
 8000e60:	f884 3041 	strbne.w	r3, [r4, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8000e64:	2300      	movs	r3, #0
 8000e66:	6323      	str	r3, [r4, #48]	; 0x30
 8000e68:	e7d9      	b.n	8000e1e <I2C_ITError+0x42>
  else if ((hi2c->Instance->CR1 & I2C_CR1_RXDMAEN) == I2C_CR1_RXDMAEN)
 8000e6a:	f412 4200 	ands.w	r2, r2, #32768	; 0x8000
 8000e6e:	d00d      	beq.n	8000e8c <I2C_ITError+0xb0>
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8000e70:	681a      	ldr	r2, [r3, #0]
    hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8000e72:	6be0      	ldr	r0, [r4, #60]	; 0x3c
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8000e74:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8000e78:	601a      	str	r2, [r3, #0]
    hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8000e7a:	4b10      	ldr	r3, [pc, #64]	; (8000ebc <I2C_ITError+0xe0>)
 8000e7c:	6343      	str	r3, [r0, #52]	; 0x34
    __HAL_UNLOCK(hi2c);
 8000e7e:	f884 1040 	strb.w	r1, [r4, #64]	; 0x40
    if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8000e82:	f7ff fae9 	bl	8000458 <HAL_DMA_Abort_IT>
 8000e86:	b198      	cbz	r0, 8000eb0 <I2C_ITError+0xd4>
      hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8000e88:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 8000e8a:	e7dd      	b.n	8000e48 <I2C_ITError+0x6c>
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 8000e8c:	f894 3041 	ldrb.w	r3, [r4, #65]	; 0x41
 8000e90:	2b60      	cmp	r3, #96	; 0x60
 8000e92:	d108      	bne.n	8000ea6 <I2C_ITError+0xca>
    hi2c->State = HAL_I2C_STATE_READY;
 8000e94:	2320      	movs	r3, #32
 8000e96:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
    __HAL_UNLOCK(hi2c);
 8000e9a:	f884 2040 	strb.w	r2, [r4, #64]	; 0x40
    HAL_I2C_AbortCpltCallback(hi2c);
 8000e9e:	4620      	mov	r0, r4
 8000ea0:	f7ff ff9b 	bl	8000dda <HAL_I2C_AbortCpltCallback>
 8000ea4:	bd10      	pop	{r4, pc}
    __HAL_UNLOCK(hi2c);
 8000ea6:	f884 2040 	strb.w	r2, [r4, #64]	; 0x40
    HAL_I2C_ErrorCallback(hi2c);
 8000eaa:	4620      	mov	r0, r4
 8000eac:	f7ff ff94 	bl	8000dd8 <HAL_I2C_ErrorCallback>
 8000eb0:	bd10      	pop	{r4, pc}
 8000eb2:	bf00      	nop
 8000eb4:	ffff0000 	.word	0xffff0000
 8000eb8:	08000fc1 	.word	0x08000fc1
 8000ebc:	080013d1 	.word	0x080013d1

08000ec0 <I2C_ITSlaveCplt>:
{
 8000ec0:	b538      	push	{r3, r4, r5, lr}
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8000ec2:	6803      	ldr	r3, [r0, #0]
 8000ec4:	2220      	movs	r2, #32
{
 8000ec6:	4604      	mov	r4, r0
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8000ec8:	61da      	str	r2, [r3, #28]
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8000eca:	2208      	movs	r2, #8
 8000ecc:	61da      	str	r2, [r3, #28]
{
 8000ece:	460d      	mov	r5, r1
  I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT | I2C_XFER_RX_IT);
 8000ed0:	2107      	movs	r1, #7
 8000ed2:	f7ff fc4d 	bl	8000770 <I2C_Disable_IRQ>
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 8000ed6:	6823      	ldr	r3, [r4, #0]
 8000ed8:	685a      	ldr	r2, [r3, #4]
 8000eda:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8000ede:	605a      	str	r2, [r3, #4]
  I2C_RESET_CR2(hi2c);
 8000ee0:	685a      	ldr	r2, [r3, #4]
 8000ee2:	f022 72ff 	bic.w	r2, r2, #33423360	; 0x1fe0000
 8000ee6:	f422 328b 	bic.w	r2, r2, #71168	; 0x11600
 8000eea:	f422 72ff 	bic.w	r2, r2, #510	; 0x1fe
 8000eee:	f022 0201 	bic.w	r2, r2, #1
 8000ef2:	605a      	str	r2, [r3, #4]
  I2C_Flush_TXDR(hi2c);
 8000ef4:	4620      	mov	r0, r4
 8000ef6:	f7ff fbe2 	bl	80006be <I2C_Flush_TXDR>
  if (((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN) ||
 8000efa:	6822      	ldr	r2, [r4, #0]
 8000efc:	6813      	ldr	r3, [r2, #0]
 8000efe:	0458      	lsls	r0, r3, #17
 8000f00:	d402      	bmi.n	8000f08 <I2C_ITSlaveCplt+0x48>
      ((hi2c->Instance->CR1 & I2C_CR1_RXDMAEN) == I2C_CR1_RXDMAEN))
 8000f02:	6813      	ldr	r3, [r2, #0]
  if (((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN) ||
 8000f04:	0419      	lsls	r1, r3, #16
 8000f06:	d509      	bpl.n	8000f1c <I2C_ITSlaveCplt+0x5c>
    hi2c->XferCount = I2C_GET_DMA_REMAIN_DATA(hi2c);
 8000f08:	f894 3041 	ldrb.w	r3, [r4, #65]	; 0x41
 8000f0c:	2b21      	cmp	r3, #33	; 0x21
 8000f0e:	bf0c      	ite	eq
 8000f10:	6ba3      	ldreq	r3, [r4, #56]	; 0x38
 8000f12:	6be3      	ldrne	r3, [r4, #60]	; 0x3c
 8000f14:	681b      	ldr	r3, [r3, #0]
 8000f16:	685b      	ldr	r3, [r3, #4]
 8000f18:	b29b      	uxth	r3, r3
 8000f1a:	8563      	strh	r3, [r4, #42]	; 0x2a
  if (hi2c->XferCount != 0U)
 8000f1c:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8000f1e:	b29b      	uxth	r3, r3
 8000f20:	b11b      	cbz	r3, 8000f2a <I2C_ITSlaveCplt+0x6a>
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8000f22:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8000f24:	f043 0304 	orr.w	r3, r3, #4
 8000f28:	6463      	str	r3, [r4, #68]	; 0x44
  if (((ITFlags & I2C_FLAG_RXNE) != RESET))
 8000f2a:	076b      	lsls	r3, r5, #29
 8000f2c:	d510      	bpl.n	8000f50 <I2C_ITSlaveCplt+0x90>
    (*hi2c->pBuffPtr++) = hi2c->Instance->RXDR;
 8000f2e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8000f30:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8000f32:	1c59      	adds	r1, r3, #1
 8000f34:	6261      	str	r1, [r4, #36]	; 0x24
 8000f36:	701a      	strb	r2, [r3, #0]
    if ((hi2c->XferSize > 0U))
 8000f38:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8000f3a:	b14b      	cbz	r3, 8000f50 <I2C_ITSlaveCplt+0x90>
      hi2c->XferSize--;
 8000f3c:	3b01      	subs	r3, #1
 8000f3e:	8523      	strh	r3, [r4, #40]	; 0x28
      hi2c->XferCount--;
 8000f40:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8000f42:	3b01      	subs	r3, #1
 8000f44:	b29b      	uxth	r3, r3
 8000f46:	8563      	strh	r3, [r4, #42]	; 0x2a
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8000f48:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8000f4a:	f043 0304 	orr.w	r3, r3, #4
 8000f4e:	6463      	str	r3, [r4, #68]	; 0x44
  hi2c->PreviousState = I2C_STATE_NONE;
 8000f50:	2300      	movs	r3, #0
 8000f52:	6323      	str	r3, [r4, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8000f54:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
  hi2c->XferISR = NULL;
 8000f58:	6363      	str	r3, [r4, #52]	; 0x34
  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8000f5a:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8000f5c:	b16b      	cbz	r3, 8000f7a <I2C_ITSlaveCplt+0xba>
    I2C_ITError(hi2c, hi2c->ErrorCode);
 8000f5e:	6c61      	ldr	r1, [r4, #68]	; 0x44
 8000f60:	4620      	mov	r0, r4
 8000f62:	f7ff ff3b 	bl	8000ddc <I2C_ITError>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8000f66:	f894 3041 	ldrb.w	r3, [r4, #65]	; 0x41
 8000f6a:	2b28      	cmp	r3, #40	; 0x28
 8000f6c:	d124      	bne.n	8000fb8 <I2C_ITSlaveCplt+0xf8>
      I2C_ITListenCplt(hi2c, ITFlags);
 8000f6e:	4629      	mov	r1, r5
 8000f70:	4620      	mov	r0, r4
}
 8000f72:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
      I2C_ITListenCplt(hi2c, ITFlags);
 8000f76:	f7ff beff 	b.w	8000d78 <I2C_ITListenCplt>
  else if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 8000f7a:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8000f7c:	f512 3f80 	cmn.w	r2, #65536	; 0x10000
 8000f80:	d00a      	beq.n	8000f98 <I2C_ITSlaveCplt+0xd8>
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8000f82:	4a0e      	ldr	r2, [pc, #56]	; (8000fbc <I2C_ITSlaveCplt+0xfc>)
 8000f84:	62e2      	str	r2, [r4, #44]	; 0x2c
    hi2c->State = HAL_I2C_STATE_READY;
 8000f86:	2220      	movs	r2, #32
 8000f88:	f884 2041 	strb.w	r2, [r4, #65]	; 0x41
    __HAL_UNLOCK(hi2c);
 8000f8c:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
    HAL_I2C_ListenCpltCallback(hi2c);
 8000f90:	4620      	mov	r0, r4
 8000f92:	f7ff fef0 	bl	8000d76 <HAL_I2C_ListenCpltCallback>
 8000f96:	bd38      	pop	{r3, r4, r5, pc}
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8000f98:	f894 2041 	ldrb.w	r2, [r4, #65]	; 0x41
    __HAL_UNLOCK(hi2c);
 8000f9c:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8000fa0:	2a22      	cmp	r2, #34	; 0x22
 8000fa2:	f04f 0220 	mov.w	r2, #32
    hi2c->State = HAL_I2C_STATE_READY;
 8000fa6:	f884 2041 	strb.w	r2, [r4, #65]	; 0x41
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 8000faa:	4620      	mov	r0, r4
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8000fac:	d102      	bne.n	8000fb4 <I2C_ITSlaveCplt+0xf4>
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 8000fae:	f7ff feb7 	bl	8000d20 <HAL_I2C_SlaveRxCpltCallback>
 8000fb2:	bd38      	pop	{r3, r4, r5, pc}
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8000fb4:	f7ff feb3 	bl	8000d1e <HAL_I2C_SlaveTxCpltCallback>
 8000fb8:	bd38      	pop	{r3, r4, r5, pc}
 8000fba:	bf00      	nop
 8000fbc:	ffff0000 	.word	0xffff0000

08000fc0 <I2C_Slave_ISR_IT>:
{
 8000fc0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  __HAL_LOCK(hi2c);
 8000fc4:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 8000fc8:	2b01      	cmp	r3, #1
{
 8000fca:	4604      	mov	r4, r0
 8000fcc:	460e      	mov	r6, r1
 8000fce:	4617      	mov	r7, r2
  __HAL_LOCK(hi2c);
 8000fd0:	f000 80cb 	beq.w	800116a <I2C_Slave_ISR_IT+0x1aa>
 8000fd4:	2301      	movs	r3, #1
  if (((ITFlags & I2C_FLAG_AF) != RESET) && ((ITSources & I2C_IT_NACKI) != RESET))
 8000fd6:	06cd      	lsls	r5, r1, #27
  __HAL_LOCK(hi2c);
 8000fd8:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
  if (((ITFlags & I2C_FLAG_AF) != RESET) && ((ITSources & I2C_IT_NACKI) != RESET))
 8000fdc:	d53e      	bpl.n	800105c <I2C_Slave_ISR_IT+0x9c>
 8000fde:	06d0      	lsls	r0, r2, #27
 8000fe0:	d53c      	bpl.n	800105c <I2C_Slave_ISR_IT+0x9c>
    if (hi2c->XferCount == 0U)
 8000fe2:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8000fe4:	b29b      	uxth	r3, r3
 8000fe6:	bb8b      	cbnz	r3, 800104c <I2C_Slave_ISR_IT+0x8c>
      if (((hi2c->XferOptions == I2C_FIRST_AND_LAST_FRAME) || (hi2c->XferOptions == I2C_LAST_FRAME)) && \
 8000fe8:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8000fea:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8000fee:	d003      	beq.n	8000ff8 <I2C_Slave_ISR_IT+0x38>
 8000ff0:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8000ff2:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8000ff6:	d114      	bne.n	8001022 <I2C_Slave_ISR_IT+0x62>
          (hi2c->State == HAL_I2C_STATE_LISTEN))
 8000ff8:	f894 3041 	ldrb.w	r3, [r4, #65]	; 0x41
      if (((hi2c->XferOptions == I2C_FIRST_AND_LAST_FRAME) || (hi2c->XferOptions == I2C_LAST_FRAME)) && \
 8000ffc:	2b28      	cmp	r3, #40	; 0x28
 8000ffe:	d110      	bne.n	8001022 <I2C_Slave_ISR_IT+0x62>
        I2C_ITListenCplt(hi2c, ITFlags);
 8001000:	4631      	mov	r1, r6
 8001002:	4620      	mov	r0, r4
 8001004:	f7ff feb8 	bl	8000d78 <I2C_ITListenCplt>
  if (((ITFlags & I2C_FLAG_STOPF) != RESET) && ((ITSources & I2C_IT_STOPI) != RESET))
 8001008:	06b2      	lsls	r2, r6, #26
 800100a:	d505      	bpl.n	8001018 <I2C_Slave_ISR_IT+0x58>
 800100c:	06bb      	lsls	r3, r7, #26
 800100e:	d503      	bpl.n	8001018 <I2C_Slave_ISR_IT+0x58>
    I2C_ITSlaveCplt(hi2c, ITFlags);
 8001010:	4631      	mov	r1, r6
 8001012:	4620      	mov	r0, r4
 8001014:	f7ff ff54 	bl	8000ec0 <I2C_ITSlaveCplt>
  __HAL_UNLOCK(hi2c);
 8001018:	2000      	movs	r0, #0
 800101a:	f884 0040 	strb.w	r0, [r4, #64]	; 0x40
 800101e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
      else if ((hi2c->XferOptions != I2C_NO_OPTION_FRAME) && (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8001022:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8001024:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8001028:	6823      	ldr	r3, [r4, #0]
 800102a:	d00c      	beq.n	8001046 <I2C_Slave_ISR_IT+0x86>
 800102c:	f894 2041 	ldrb.w	r2, [r4, #65]	; 0x41
 8001030:	2a29      	cmp	r2, #41	; 0x29
 8001032:	d108      	bne.n	8001046 <I2C_Slave_ISR_IT+0x86>
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001034:	2210      	movs	r2, #16
 8001036:	61da      	str	r2, [r3, #28]
        I2C_Flush_TXDR(hi2c);
 8001038:	4620      	mov	r0, r4
 800103a:	f7ff fb40 	bl	80006be <I2C_Flush_TXDR>
      I2C_ITSlaveSequentialCplt(hi2c);
 800103e:	4620      	mov	r0, r4
 8001040:	f7ff fe6f 	bl	8000d22 <I2C_ITSlaveSequentialCplt>
 8001044:	e7e0      	b.n	8001008 <I2C_Slave_ISR_IT+0x48>
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001046:	2210      	movs	r2, #16
 8001048:	61da      	str	r2, [r3, #28]
 800104a:	e7dd      	b.n	8001008 <I2C_Slave_ISR_IT+0x48>
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800104c:	6823      	ldr	r3, [r4, #0]
 800104e:	2210      	movs	r2, #16
 8001050:	61da      	str	r2, [r3, #28]
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8001052:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8001054:	f043 0304 	orr.w	r3, r3, #4
 8001058:	6463      	str	r3, [r4, #68]	; 0x44
 800105a:	e7d5      	b.n	8001008 <I2C_Slave_ISR_IT+0x48>
  else if (((ITFlags & I2C_FLAG_RXNE) != RESET) && ((ITSources & I2C_IT_RXI) != RESET))
 800105c:	0771      	lsls	r1, r6, #29
 800105e:	d51a      	bpl.n	8001096 <I2C_Slave_ISR_IT+0xd6>
 8001060:	077a      	lsls	r2, r7, #29
 8001062:	d518      	bpl.n	8001096 <I2C_Slave_ISR_IT+0xd6>
    if (hi2c->XferCount > 0U)
 8001064:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8001066:	b29b      	uxth	r3, r3
 8001068:	b163      	cbz	r3, 8001084 <I2C_Slave_ISR_IT+0xc4>
      (*hi2c->pBuffPtr++) = hi2c->Instance->RXDR;
 800106a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800106c:	1c5a      	adds	r2, r3, #1
 800106e:	6262      	str	r2, [r4, #36]	; 0x24
 8001070:	6822      	ldr	r2, [r4, #0]
 8001072:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001074:	701a      	strb	r2, [r3, #0]
      hi2c->XferSize--;
 8001076:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8001078:	3b01      	subs	r3, #1
 800107a:	8523      	strh	r3, [r4, #40]	; 0x28
      hi2c->XferCount--;
 800107c:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 800107e:	3b01      	subs	r3, #1
 8001080:	b29b      	uxth	r3, r3
 8001082:	8563      	strh	r3, [r4, #42]	; 0x2a
    if ((hi2c->XferCount == 0U) && \
 8001084:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8001086:	b29b      	uxth	r3, r3
 8001088:	2b00      	cmp	r3, #0
 800108a:	d1bd      	bne.n	8001008 <I2C_Slave_ISR_IT+0x48>
        (hi2c->XferOptions != I2C_NO_OPTION_FRAME))
 800108c:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    if ((hi2c->XferCount == 0U) && \
 800108e:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8001092:	d1d4      	bne.n	800103e <I2C_Slave_ISR_IT+0x7e>
 8001094:	e7b8      	b.n	8001008 <I2C_Slave_ISR_IT+0x48>
  else if (((ITFlags & I2C_FLAG_ADDR) != RESET) && ((ITSources & I2C_IT_ADDRI) != RESET))
 8001096:	0733      	lsls	r3, r6, #28
 8001098:	d546      	bpl.n	8001128 <I2C_Slave_ISR_IT+0x168>
 800109a:	073d      	lsls	r5, r7, #28
 800109c:	d544      	bpl.n	8001128 <I2C_Slave_ISR_IT+0x168>
  if ((hi2c->State & HAL_I2C_STATE_LISTEN) == HAL_I2C_STATE_LISTEN)
 800109e:	f894 3041 	ldrb.w	r3, [r4, #65]	; 0x41
 80010a2:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80010a6:	2b28      	cmp	r3, #40	; 0x28
 80010a8:	6823      	ldr	r3, [r4, #0]
 80010aa:	d137      	bne.n	800111c <I2C_Slave_ISR_IT+0x15c>
    transferdirection = I2C_GET_DIR(hi2c);
 80010ac:	699a      	ldr	r2, [r3, #24]
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80010ae:	68e1      	ldr	r1, [r4, #12]
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
 80010b0:	699d      	ldr	r5, [r3, #24]
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80010b2:	2902      	cmp	r1, #2
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
 80010b4:	ea4f 4515 	mov.w	r5, r5, lsr #16
    transferdirection = I2C_GET_DIR(hi2c);
 80010b8:	f3c2 4800 	ubfx	r8, r2, #16, #1
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
 80010bc:	f005 05fe 	and.w	r5, r5, #254	; 0xfe
    ownadd1code       = I2C_GET_OWN_ADDRESS1(hi2c);
 80010c0:	689a      	ldr	r2, [r3, #8]
    ownadd2code       = I2C_GET_OWN_ADDRESS2(hi2c);
 80010c2:	f8d3 900c 	ldr.w	r9, [r3, #12]
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80010c6:	d120      	bne.n	800110a <I2C_Slave_ISR_IT+0x14a>
    ownadd1code       = I2C_GET_OWN_ADDRESS1(hi2c);
 80010c8:	f3c2 0209 	ubfx	r2, r2, #0, #10
      if ((slaveaddrcode & SlaveAddr_MSK) == ((ownadd1code >> SlaveAddr_SHIFT) & SlaveAddr_MSK))
 80010cc:	ea85 15d2 	eor.w	r5, r5, r2, lsr #7
 80010d0:	f015 0506 	ands.w	r5, r5, #6
 80010d4:	d10f      	bne.n	80010f6 <I2C_Slave_ISR_IT+0x136>
        hi2c->AddrEventCount++;
 80010d6:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 80010d8:	3101      	adds	r1, #1
 80010da:	64a1      	str	r1, [r4, #72]	; 0x48
        if (hi2c->AddrEventCount == 2U)
 80010dc:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 80010de:	2902      	cmp	r1, #2
 80010e0:	d192      	bne.n	8001008 <I2C_Slave_ISR_IT+0x48>
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 80010e2:	2108      	movs	r1, #8
          hi2c->AddrEventCount = 0U;
 80010e4:	64a5      	str	r5, [r4, #72]	; 0x48
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 80010e6:	61d9      	str	r1, [r3, #28]
          __HAL_UNLOCK(hi2c);
 80010e8:	f884 5040 	strb.w	r5, [r4, #64]	; 0x40
      HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 80010ec:	4641      	mov	r1, r8
 80010ee:	4620      	mov	r0, r4
 80010f0:	f7ff fe40 	bl	8000d74 <HAL_I2C_AddrCallback>
 80010f4:	e788      	b.n	8001008 <I2C_Slave_ISR_IT+0x48>
        I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 80010f6:	2104      	movs	r1, #4
 80010f8:	4620      	mov	r0, r4
 80010fa:	f7ff fb39 	bl	8000770 <I2C_Disable_IRQ>
        __HAL_UNLOCK(hi2c);
 80010fe:	2300      	movs	r3, #0
 8001100:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
        HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8001104:	f009 02fe 	and.w	r2, r9, #254	; 0xfe
 8001108:	e7f0      	b.n	80010ec <I2C_Slave_ISR_IT+0x12c>
      I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 800110a:	2104      	movs	r1, #4
 800110c:	4620      	mov	r0, r4
 800110e:	f7ff fb2f 	bl	8000770 <I2C_Disable_IRQ>
      __HAL_UNLOCK(hi2c);
 8001112:	2300      	movs	r3, #0
 8001114:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
      HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8001118:	462a      	mov	r2, r5
 800111a:	e7e7      	b.n	80010ec <I2C_Slave_ISR_IT+0x12c>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 800111c:	2208      	movs	r2, #8
 800111e:	61da      	str	r2, [r3, #28]
    __HAL_UNLOCK(hi2c);
 8001120:	2300      	movs	r3, #0
 8001122:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
 8001126:	e76f      	b.n	8001008 <I2C_Slave_ISR_IT+0x48>
  else if (((ITFlags & I2C_FLAG_TXIS) != RESET) && ((ITSources & I2C_IT_TXI) != RESET))
 8001128:	07b0      	lsls	r0, r6, #30
 800112a:	f57f af6d 	bpl.w	8001008 <I2C_Slave_ISR_IT+0x48>
 800112e:	07b9      	lsls	r1, r7, #30
 8001130:	f57f af6a 	bpl.w	8001008 <I2C_Slave_ISR_IT+0x48>
    if (hi2c->XferCount > 0U)
 8001134:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8001136:	b29b      	uxth	r3, r3
 8001138:	b16b      	cbz	r3, 8001156 <I2C_Slave_ISR_IT+0x196>
      hi2c->Instance->TXDR = (*hi2c->pBuffPtr++);
 800113a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800113c:	6822      	ldr	r2, [r4, #0]
 800113e:	1c59      	adds	r1, r3, #1
 8001140:	6261      	str	r1, [r4, #36]	; 0x24
 8001142:	781b      	ldrb	r3, [r3, #0]
 8001144:	6293      	str	r3, [r2, #40]	; 0x28
      hi2c->XferCount--;
 8001146:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8001148:	3b01      	subs	r3, #1
 800114a:	b29b      	uxth	r3, r3
 800114c:	8563      	strh	r3, [r4, #42]	; 0x2a
      hi2c->XferSize--;
 800114e:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8001150:	3b01      	subs	r3, #1
 8001152:	8523      	strh	r3, [r4, #40]	; 0x28
 8001154:	e758      	b.n	8001008 <I2C_Slave_ISR_IT+0x48>
      if ((hi2c->XferOptions == I2C_NEXT_FRAME) || (hi2c->XferOptions == I2C_FIRST_FRAME))
 8001156:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8001158:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800115c:	f43f af6f 	beq.w	800103e <I2C_Slave_ISR_IT+0x7e>
 8001160:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8001162:	2b00      	cmp	r3, #0
 8001164:	f43f af6b 	beq.w	800103e <I2C_Slave_ISR_IT+0x7e>
 8001168:	e74e      	b.n	8001008 <I2C_Slave_ISR_IT+0x48>
  __HAL_LOCK(hi2c);
 800116a:	2002      	movs	r0, #2
}
 800116c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

08001170 <I2C_Slave_ISR_DMA>:
  __HAL_LOCK(hi2c);
 8001170:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 8001174:	2b01      	cmp	r3, #1
{
 8001176:	b510      	push	{r4, lr}
 8001178:	4604      	mov	r4, r0
  __HAL_LOCK(hi2c);
 800117a:	d02e      	beq.n	80011da <I2C_Slave_ISR_DMA+0x6a>
 800117c:	2301      	movs	r3, #1
 800117e:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
  if (((ITFlags & I2C_FLAG_AF) != RESET) && ((ITSources & I2C_IT_NACKI) != RESET))
 8001182:	06c8      	lsls	r0, r1, #27
 8001184:	d519      	bpl.n	80011ba <I2C_Slave_ISR_DMA+0x4a>
 8001186:	06d3      	lsls	r3, r2, #27
 8001188:	d517      	bpl.n	80011ba <I2C_Slave_ISR_DMA+0x4a>
    if (I2C_GET_DMA_REMAIN_DATA(hi2c) == 0U)
 800118a:	f894 3041 	ldrb.w	r3, [r4, #65]	; 0x41
 800118e:	6822      	ldr	r2, [r4, #0]
 8001190:	2b21      	cmp	r3, #33	; 0x21
 8001192:	bf0c      	ite	eq
 8001194:	6ba3      	ldreq	r3, [r4, #56]	; 0x38
 8001196:	6be3      	ldrne	r3, [r4, #60]	; 0x3c
 8001198:	681b      	ldr	r3, [r3, #0]
 800119a:	685b      	ldr	r3, [r3, #4]
 800119c:	fab3 f383 	clz	r3, r3
 80011a0:	2110      	movs	r1, #16
 80011a2:	095b      	lsrs	r3, r3, #5
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80011a4:	61d1      	str	r1, [r2, #28]
    if (I2C_GET_DMA_REMAIN_DATA(hi2c) == 0U)
 80011a6:	b11b      	cbz	r3, 80011b0 <I2C_Slave_ISR_DMA+0x40>
  __HAL_UNLOCK(hi2c);
 80011a8:	2000      	movs	r0, #0
 80011aa:	f884 0040 	strb.w	r0, [r4, #64]	; 0x40
 80011ae:	bd10      	pop	{r4, pc}
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80011b0:	6c63      	ldr	r3, [r4, #68]	; 0x44
 80011b2:	f043 0304 	orr.w	r3, r3, #4
 80011b6:	6463      	str	r3, [r4, #68]	; 0x44
 80011b8:	e7f6      	b.n	80011a8 <I2C_Slave_ISR_DMA+0x38>
  else if (((ITFlags & I2C_FLAG_ADDR) != RESET) && ((ITSources & I2C_IT_ADDRI) != RESET))
 80011ba:	0708      	lsls	r0, r1, #28
 80011bc:	d505      	bpl.n	80011ca <I2C_Slave_ISR_DMA+0x5a>
 80011be:	0713      	lsls	r3, r2, #28
 80011c0:	d503      	bpl.n	80011ca <I2C_Slave_ISR_DMA+0x5a>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 80011c2:	6823      	ldr	r3, [r4, #0]
 80011c4:	2208      	movs	r2, #8
 80011c6:	61da      	str	r2, [r3, #28]
 80011c8:	e7ee      	b.n	80011a8 <I2C_Slave_ISR_DMA+0x38>
  else if (((ITFlags & I2C_FLAG_STOPF) != RESET) && ((ITSources & I2C_IT_STOPI) != RESET))
 80011ca:	0688      	lsls	r0, r1, #26
 80011cc:	d5ec      	bpl.n	80011a8 <I2C_Slave_ISR_DMA+0x38>
 80011ce:	0693      	lsls	r3, r2, #26
 80011d0:	d5ea      	bpl.n	80011a8 <I2C_Slave_ISR_DMA+0x38>
    I2C_ITSlaveCplt(hi2c, ITFlags);
 80011d2:	4620      	mov	r0, r4
 80011d4:	f7ff fe74 	bl	8000ec0 <I2C_ITSlaveCplt>
 80011d8:	e7e6      	b.n	80011a8 <I2C_Slave_ISR_DMA+0x38>
  __HAL_LOCK(hi2c);
 80011da:	2002      	movs	r0, #2
}
 80011dc:	bd10      	pop	{r4, pc}

080011de <I2C_ITMasterCplt>:
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80011de:	6803      	ldr	r3, [r0, #0]
 80011e0:	2220      	movs	r2, #32
{
 80011e2:	b510      	push	{r4, lr}
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80011e4:	61da      	str	r2, [r3, #28]
  I2C_RESET_CR2(hi2c);
 80011e6:	685a      	ldr	r2, [r3, #4]
 80011e8:	f022 72ff 	bic.w	r2, r2, #33423360	; 0x1fe0000
 80011ec:	f422 328b 	bic.w	r2, r2, #71168	; 0x11600
 80011f0:	f422 72ff 	bic.w	r2, r2, #510	; 0x1fe
 80011f4:	f022 0201 	bic.w	r2, r2, #1
 80011f8:	605a      	str	r2, [r3, #4]
  hi2c->PreviousState = I2C_STATE_NONE;
 80011fa:	2200      	movs	r2, #0
 80011fc:	6302      	str	r2, [r0, #48]	; 0x30
  hi2c->XferISR       = NULL;
 80011fe:	6342      	str	r2, [r0, #52]	; 0x34
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8001200:	f5a2 3280 	sub.w	r2, r2, #65536	; 0x10000
 8001204:	62c2      	str	r2, [r0, #44]	; 0x2c
  if ((ITFlags & I2C_FLAG_AF) != RESET)
 8001206:	06ca      	lsls	r2, r1, #27
{
 8001208:	4604      	mov	r4, r0
  if ((ITFlags & I2C_FLAG_AF) != RESET)
 800120a:	d505      	bpl.n	8001218 <I2C_ITMasterCplt+0x3a>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800120c:	2210      	movs	r2, #16
 800120e:	61da      	str	r2, [r3, #28]
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8001210:	6c43      	ldr	r3, [r0, #68]	; 0x44
 8001212:	f043 0304 	orr.w	r3, r3, #4
 8001216:	6443      	str	r3, [r0, #68]	; 0x44
  I2C_Flush_TXDR(hi2c);
 8001218:	4620      	mov	r0, r4
 800121a:	f7ff fa50 	bl	80006be <I2C_Flush_TXDR>
  I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT | I2C_XFER_RX_IT);
 800121e:	2103      	movs	r1, #3
 8001220:	4620      	mov	r0, r4
 8001222:	f7ff faa5 	bl	8000770 <I2C_Disable_IRQ>
  if ((hi2c->ErrorCode != HAL_I2C_ERROR_NONE) || (hi2c->State == HAL_I2C_STATE_ABORT))
 8001226:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8001228:	b91b      	cbnz	r3, 8001232 <I2C_ITMasterCplt+0x54>
 800122a:	f894 2041 	ldrb.w	r2, [r4, #65]	; 0x41
 800122e:	2a60      	cmp	r2, #96	; 0x60
 8001230:	d105      	bne.n	800123e <I2C_ITMasterCplt+0x60>
    I2C_ITError(hi2c, hi2c->ErrorCode);
 8001232:	6c61      	ldr	r1, [r4, #68]	; 0x44
 8001234:	4620      	mov	r0, r4
}
 8001236:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    I2C_ITError(hi2c, hi2c->ErrorCode);
 800123a:	f7ff bdcf 	b.w	8000ddc <I2C_ITError>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 800123e:	f894 2041 	ldrb.w	r2, [r4, #65]	; 0x41
 8001242:	2a21      	cmp	r2, #33	; 0x21
 8001244:	d111      	bne.n	800126a <I2C_ITMasterCplt+0x8c>
    hi2c->State = HAL_I2C_STATE_READY;
 8001246:	2220      	movs	r2, #32
 8001248:	f884 2041 	strb.w	r2, [r4, #65]	; 0x41
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800124c:	f894 2042 	ldrb.w	r2, [r4, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 8001250:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8001254:	2a40      	cmp	r2, #64	; 0x40
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8001256:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
      HAL_I2C_MemTxCpltCallback(hi2c);
 800125a:	4620      	mov	r0, r4
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800125c:	d102      	bne.n	8001264 <I2C_ITMasterCplt+0x86>
      HAL_I2C_MemTxCpltCallback(hi2c);
 800125e:	f001 fbd9 	bl	8002a14 <HAL_I2C_MemTxCpltCallback>
 8001262:	bd10      	pop	{r4, pc}
      HAL_I2C_MasterTxCpltCallback(hi2c);
 8001264:	f7ff fd59 	bl	8000d1a <HAL_I2C_MasterTxCpltCallback>
 8001268:	bd10      	pop	{r4, pc}
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800126a:	f894 2041 	ldrb.w	r2, [r4, #65]	; 0x41
 800126e:	2a22      	cmp	r2, #34	; 0x22
 8001270:	d110      	bne.n	8001294 <I2C_ITMasterCplt+0xb6>
    hi2c->State = HAL_I2C_STATE_READY;
 8001272:	2220      	movs	r2, #32
 8001274:	f884 2041 	strb.w	r2, [r4, #65]	; 0x41
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8001278:	f894 2042 	ldrb.w	r2, [r4, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 800127c:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8001280:	2a40      	cmp	r2, #64	; 0x40
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8001282:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
      HAL_I2C_MemRxCpltCallback(hi2c);
 8001286:	4620      	mov	r0, r4
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8001288:	d102      	bne.n	8001290 <I2C_ITMasterCplt+0xb2>
      HAL_I2C_MemRxCpltCallback(hi2c);
 800128a:	f001 fbb7 	bl	80029fc <HAL_I2C_MemRxCpltCallback>
 800128e:	bd10      	pop	{r4, pc}
      HAL_I2C_MasterRxCpltCallback(hi2c);
 8001290:	f7ff fd44 	bl	8000d1c <HAL_I2C_MasterRxCpltCallback>
 8001294:	bd10      	pop	{r4, pc}

08001296 <I2C_Master_ISR_DMA>:
  __HAL_LOCK(hi2c);
 8001296:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 800129a:	2b01      	cmp	r3, #1
{
 800129c:	b513      	push	{r0, r1, r4, lr}
 800129e:	4604      	mov	r4, r0
  __HAL_LOCK(hi2c);
 80012a0:	d05a      	beq.n	8001358 <I2C_Master_ISR_DMA+0xc2>
 80012a2:	2301      	movs	r3, #1
 80012a4:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
  if (((ITFlags & I2C_FLAG_AF) != RESET) && ((ITSources & I2C_IT_NACKI) != RESET))
 80012a8:	06cb      	lsls	r3, r1, #27
 80012aa:	d513      	bpl.n	80012d4 <I2C_Master_ISR_DMA+0x3e>
 80012ac:	06d3      	lsls	r3, r2, #27
 80012ae:	d511      	bpl.n	80012d4 <I2C_Master_ISR_DMA+0x3e>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80012b0:	6803      	ldr	r3, [r0, #0]
 80012b2:	2210      	movs	r2, #16
 80012b4:	61da      	str	r2, [r3, #28]
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80012b6:	6c43      	ldr	r3, [r0, #68]	; 0x44
 80012b8:	f043 0304 	orr.w	r3, r3, #4
 80012bc:	6443      	str	r3, [r0, #68]	; 0x44
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 80012be:	2112      	movs	r1, #18
 80012c0:	f7ff fa20 	bl	8000704 <I2C_Enable_IRQ>
    I2C_Flush_TXDR(hi2c);
 80012c4:	4620      	mov	r0, r4
 80012c6:	f7ff f9fa 	bl	80006be <I2C_Flush_TXDR>
  __HAL_UNLOCK(hi2c);
 80012ca:	2000      	movs	r0, #0
 80012cc:	f884 0040 	strb.w	r0, [r4, #64]	; 0x40
}
 80012d0:	b002      	add	sp, #8
 80012d2:	bd10      	pop	{r4, pc}
  else if (((ITFlags & I2C_FLAG_TCR) != RESET) && ((ITSources & I2C_IT_TCI) != RESET))
 80012d4:	0608      	lsls	r0, r1, #24
 80012d6:	d537      	bpl.n	8001348 <I2C_Master_ISR_DMA+0xb2>
 80012d8:	0653      	lsls	r3, r2, #25
 80012da:	d535      	bpl.n	8001348 <I2C_Master_ISR_DMA+0xb2>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_TCI);
 80012dc:	6823      	ldr	r3, [r4, #0]
 80012de:	681a      	ldr	r2, [r3, #0]
 80012e0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80012e4:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 80012e6:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 80012e8:	b292      	uxth	r2, r2
 80012ea:	b342      	cbz	r2, 800133e <I2C_Master_ISR_DMA+0xa8>
      devaddress = (hi2c->Instance->CR2 & I2C_CR2_SADD);
 80012ec:	6859      	ldr	r1, [r3, #4]
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80012ee:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 80012f0:	b29b      	uxth	r3, r3
 80012f2:	2bff      	cmp	r3, #255	; 0xff
        hi2c->XferSize = MAX_NBYTE_SIZE;
 80012f4:	bf8b      	itete	hi
 80012f6:	23ff      	movhi	r3, #255	; 0xff
        hi2c->XferSize = hi2c->XferCount;
 80012f8:	8d63      	ldrhls	r3, [r4, #42]	; 0x2a
        hi2c->XferSize = MAX_NBYTE_SIZE;
 80012fa:	8523      	strhhi	r3, [r4, #40]	; 0x28
        hi2c->XferSize = hi2c->XferCount;
 80012fc:	8523      	strhls	r3, [r4, #40]	; 0x28
      I2C_TransferConfig(hi2c, devaddress, hi2c->XferSize, xfermode, I2C_NO_STARTSTOP);
 80012fe:	f04f 0000 	mov.w	r0, #0
        xfermode = I2C_RELOAD_MODE;
 8001302:	bf8c      	ite	hi
 8001304:	f04f 7380 	movhi.w	r3, #16777216	; 0x1000000
        xfermode = I2C_AUTOEND_MODE;
 8001308:	f04f 7300 	movls.w	r3, #33554432	; 0x2000000
      I2C_TransferConfig(hi2c, devaddress, hi2c->XferSize, xfermode, I2C_NO_STARTSTOP);
 800130c:	f894 2028 	ldrb.w	r2, [r4, #40]	; 0x28
 8001310:	9000      	str	r0, [sp, #0]
      devaddress = (hi2c->Instance->CR2 & I2C_CR2_SADD);
 8001312:	f3c1 0109 	ubfx	r1, r1, #0, #10
      I2C_TransferConfig(hi2c, devaddress, hi2c->XferSize, xfermode, I2C_NO_STARTSTOP);
 8001316:	4620      	mov	r0, r4
 8001318:	f7ff f9df 	bl	80006da <I2C_TransferConfig>
      hi2c->XferCount -= hi2c->XferSize;
 800131c:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 800131e:	8d22      	ldrh	r2, [r4, #40]	; 0x28
 8001320:	1a9b      	subs	r3, r3, r2
 8001322:	b29b      	uxth	r3, r3
 8001324:	8563      	strh	r3, [r4, #42]	; 0x2a
      if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8001326:	f894 3041 	ldrb.w	r3, [r4, #65]	; 0x41
 800132a:	2b22      	cmp	r3, #34	; 0x22
 800132c:	6823      	ldr	r3, [r4, #0]
        hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 800132e:	681a      	ldr	r2, [r3, #0]
 8001330:	bf0c      	ite	eq
 8001332:	f442 4200 	orreq.w	r2, r2, #32768	; 0x8000
        hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 8001336:	f442 4280 	orrne.w	r2, r2, #16384	; 0x4000
 800133a:	601a      	str	r2, [r3, #0]
 800133c:	e7c5      	b.n	80012ca <I2C_Master_ISR_DMA+0x34>
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 800133e:	2140      	movs	r1, #64	; 0x40
 8001340:	4620      	mov	r0, r4
 8001342:	f7ff fd4b 	bl	8000ddc <I2C_ITError>
 8001346:	e7c0      	b.n	80012ca <I2C_Master_ISR_DMA+0x34>
  else if (((ITFlags & I2C_FLAG_STOPF) != RESET) && ((ITSources & I2C_IT_STOPI) != RESET))
 8001348:	0688      	lsls	r0, r1, #26
 800134a:	d5be      	bpl.n	80012ca <I2C_Master_ISR_DMA+0x34>
 800134c:	0693      	lsls	r3, r2, #26
 800134e:	d5bc      	bpl.n	80012ca <I2C_Master_ISR_DMA+0x34>
    I2C_ITMasterCplt(hi2c, ITFlags);
 8001350:	4620      	mov	r0, r4
 8001352:	f7ff ff44 	bl	80011de <I2C_ITMasterCplt>
 8001356:	e7b8      	b.n	80012ca <I2C_Master_ISR_DMA+0x34>
  __HAL_LOCK(hi2c);
 8001358:	2002      	movs	r0, #2
 800135a:	e7b9      	b.n	80012d0 <I2C_Master_ISR_DMA+0x3a>

0800135c <I2C_DMAError>:
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800135c:	6a40      	ldr	r0, [r0, #36]	; 0x24
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 800135e:	6802      	ldr	r2, [r0, #0]
 8001360:	6853      	ldr	r3, [r2, #4]
 8001362:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001366:	6053      	str	r3, [r2, #4]
  I2C_ITError(hi2c, HAL_I2C_ERROR_DMA);
 8001368:	2110      	movs	r1, #16
 800136a:	f7ff bd37 	b.w	8000ddc <I2C_ITError>

0800136e <HAL_I2C_ER_IRQHandler>:
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 800136e:	6803      	ldr	r3, [r0, #0]
 8001370:	6999      	ldr	r1, [r3, #24]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8001372:	681a      	ldr	r2, [r3, #0]
{
 8001374:	b410      	push	{r4}
  if (((itflags & I2C_FLAG_BERR) != RESET) && ((itsources & I2C_IT_ERRI) != RESET))
 8001376:	05cc      	lsls	r4, r1, #23
 8001378:	d508      	bpl.n	800138c <HAL_I2C_ER_IRQHandler+0x1e>
 800137a:	0614      	lsls	r4, r2, #24
 800137c:	d506      	bpl.n	800138c <HAL_I2C_ER_IRQHandler+0x1e>
    hi2c->ErrorCode |= HAL_I2C_ERROR_BERR;
 800137e:	6c44      	ldr	r4, [r0, #68]	; 0x44
 8001380:	f044 0401 	orr.w	r4, r4, #1
 8001384:	6444      	str	r4, [r0, #68]	; 0x44
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8001386:	f44f 7480 	mov.w	r4, #256	; 0x100
 800138a:	61dc      	str	r4, [r3, #28]
  if (((itflags & I2C_FLAG_OVR) != RESET) && ((itsources & I2C_IT_ERRI) != RESET))
 800138c:	054c      	lsls	r4, r1, #21
 800138e:	d508      	bpl.n	80013a2 <HAL_I2C_ER_IRQHandler+0x34>
 8001390:	0614      	lsls	r4, r2, #24
 8001392:	d506      	bpl.n	80013a2 <HAL_I2C_ER_IRQHandler+0x34>
    hi2c->ErrorCode |= HAL_I2C_ERROR_OVR;
 8001394:	6c44      	ldr	r4, [r0, #68]	; 0x44
 8001396:	f044 0408 	orr.w	r4, r4, #8
 800139a:	6444      	str	r4, [r0, #68]	; 0x44
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 800139c:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80013a0:	61dc      	str	r4, [r3, #28]
  if (((itflags & I2C_FLAG_ARLO) != RESET) && ((itsources & I2C_IT_ERRI) != RESET))
 80013a2:	0589      	lsls	r1, r1, #22
 80013a4:	d508      	bpl.n	80013b8 <HAL_I2C_ER_IRQHandler+0x4a>
 80013a6:	0612      	lsls	r2, r2, #24
 80013a8:	d506      	bpl.n	80013b8 <HAL_I2C_ER_IRQHandler+0x4a>
    hi2c->ErrorCode |= HAL_I2C_ERROR_ARLO;
 80013aa:	6c42      	ldr	r2, [r0, #68]	; 0x44
 80013ac:	f042 0202 	orr.w	r2, r2, #2
 80013b0:	6442      	str	r2, [r0, #68]	; 0x44
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 80013b2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80013b6:	61da      	str	r2, [r3, #28]
  if ((hi2c->ErrorCode & (HAL_I2C_ERROR_BERR | HAL_I2C_ERROR_OVR | HAL_I2C_ERROR_ARLO)) !=  HAL_I2C_ERROR_NONE)
 80013b8:	6c43      	ldr	r3, [r0, #68]	; 0x44
 80013ba:	f013 0f0b 	tst.w	r3, #11
 80013be:	d004      	beq.n	80013ca <HAL_I2C_ER_IRQHandler+0x5c>
    I2C_ITError(hi2c, hi2c->ErrorCode);
 80013c0:	6c41      	ldr	r1, [r0, #68]	; 0x44
}
 80013c2:	f85d 4b04 	ldr.w	r4, [sp], #4
    I2C_ITError(hi2c, hi2c->ErrorCode);
 80013c6:	f7ff bd09 	b.w	8000ddc <I2C_ITError>
}
 80013ca:	f85d 4b04 	ldr.w	r4, [sp], #4
 80013ce:	4770      	bx	lr

080013d0 <I2C_DMAAbort>:
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80013d0:	6a40      	ldr	r0, [r0, #36]	; 0x24
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 80013d2:	6802      	ldr	r2, [r0, #0]
{
 80013d4:	b508      	push	{r3, lr}
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 80013d6:	6853      	ldr	r3, [r2, #4]
 80013d8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80013dc:	6053      	str	r3, [r2, #4]
  hi2c->hdmatx->XferAbortCallback = NULL;
 80013de:	6b82      	ldr	r2, [r0, #56]	; 0x38
 80013e0:	2300      	movs	r3, #0
 80013e2:	6353      	str	r3, [r2, #52]	; 0x34
  hi2c->hdmarx->XferAbortCallback = NULL;
 80013e4:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 80013e6:	6353      	str	r3, [r2, #52]	; 0x34
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 80013e8:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 80013ec:	2b60      	cmp	r3, #96	; 0x60
 80013ee:	d105      	bne.n	80013fc <I2C_DMAAbort+0x2c>
    hi2c->State = HAL_I2C_STATE_READY;
 80013f0:	2320      	movs	r3, #32
 80013f2:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41
    HAL_I2C_AbortCpltCallback(hi2c);
 80013f6:	f7ff fcf0 	bl	8000dda <HAL_I2C_AbortCpltCallback>
 80013fa:	bd08      	pop	{r3, pc}
    HAL_I2C_ErrorCallback(hi2c);
 80013fc:	f7ff fcec 	bl	8000dd8 <HAL_I2C_ErrorCallback>
 8001400:	bd08      	pop	{r3, pc}

08001402 <HAL_I2C_GetState>:
  return hi2c->State;
 8001402:	f890 0041 	ldrb.w	r0, [r0, #65]	; 0x41
}
 8001406:	4770      	bx	lr

08001408 <HAL_I2CEx_ConfigAnalogFilter>:
{
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001408:	f890 2041 	ldrb.w	r2, [r0, #65]	; 0x41
 800140c:	b2d2      	uxtb	r2, r2
 800140e:	2a20      	cmp	r2, #32
{
 8001410:	b510      	push	{r4, lr}
  if (hi2c->State == HAL_I2C_STATE_READY)
 8001412:	d11d      	bne.n	8001450 <HAL_I2CEx_ConfigAnalogFilter+0x48>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001414:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 8001418:	2b01      	cmp	r3, #1
 800141a:	d019      	beq.n	8001450 <HAL_I2CEx_ConfigAnalogFilter+0x48>

    hi2c->State = HAL_I2C_STATE_BUSY;
 800141c:	2324      	movs	r3, #36	; 0x24
 800141e:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001422:	6803      	ldr	r3, [r0, #0]
 8001424:	681c      	ldr	r4, [r3, #0]
 8001426:	f024 0401 	bic.w	r4, r4, #1
 800142a:	601c      	str	r4, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 800142c:	681c      	ldr	r4, [r3, #0]
 800142e:	f424 5480 	bic.w	r4, r4, #4096	; 0x1000
 8001432:	601c      	str	r4, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8001434:	681c      	ldr	r4, [r3, #0]
 8001436:	4321      	orrs	r1, r4
 8001438:	6019      	str	r1, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800143a:	6819      	ldr	r1, [r3, #0]
 800143c:	f041 0101 	orr.w	r1, r1, #1
 8001440:	6019      	str	r1, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001442:	2300      	movs	r3, #0
    hi2c->State = HAL_I2C_STATE_READY;
 8001444:	f880 2041 	strb.w	r2, [r0, #65]	; 0x41
    __HAL_UNLOCK(hi2c);
 8001448:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40

    return HAL_OK;
 800144c:	4618      	mov	r0, r3
 800144e:	bd10      	pop	{r4, pc}
  }
  else
  {
    return HAL_BUSY;
 8001450:	2002      	movs	r0, #2
  }
}
 8001452:	bd10      	pop	{r4, pc}

08001454 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8001454:	b510      	push	{r4, lr}

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001456:	f890 4041 	ldrb.w	r4, [r0, #65]	; 0x41
 800145a:	b2e4      	uxtb	r4, r4
 800145c:	2c20      	cmp	r4, #32
 800145e:	d11c      	bne.n	800149a <HAL_I2CEx_ConfigDigitalFilter+0x46>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001460:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 8001464:	2b01      	cmp	r3, #1
 8001466:	d018      	beq.n	800149a <HAL_I2CEx_ConfigDigitalFilter+0x46>

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001468:	2324      	movs	r3, #36	; 0x24
 800146a:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800146e:	6803      	ldr	r3, [r0, #0]
 8001470:	681a      	ldr	r2, [r3, #0]
 8001472:	f022 0201 	bic.w	r2, r2, #1
 8001476:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8001478:	681a      	ldr	r2, [r3, #0]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800147a:	f422 6270 	bic.w	r2, r2, #3840	; 0xf00

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800147e:	ea42 2101 	orr.w	r1, r2, r1, lsl #8

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8001482:	6019      	str	r1, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8001484:	681a      	ldr	r2, [r3, #0]
 8001486:	f042 0201 	orr.w	r2, r2, #1
 800148a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800148c:	2300      	movs	r3, #0
    hi2c->State = HAL_I2C_STATE_READY;
 800148e:	f880 4041 	strb.w	r4, [r0, #65]	; 0x41
    __HAL_UNLOCK(hi2c);
 8001492:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40

    return HAL_OK;
 8001496:	4618      	mov	r0, r3
 8001498:	bd10      	pop	{r4, pc}
  }
  else
  {
    return HAL_BUSY;
 800149a:	2002      	movs	r0, #2
  }
}
 800149c:	bd10      	pop	{r4, pc}

0800149e <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and create the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{ 
 800149e:	b538      	push	{r3, r4, r5, lr}
  uint32_t i = 0U;

  uint32_t wInterrupt_Mask = 0U;
  
  /* Check the PCD handle allocation */
  if(hpcd == NULL)
 80014a0:	4604      	mov	r4, r0
 80014a2:	2800      	cmp	r0, #0
 80014a4:	d04d      	beq.n	8001542 <HAL_PCD_Init+0xa4>
  }
  
  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if(hpcd->State == HAL_PCD_STATE_RESET)
 80014a6:	f890 3371 	ldrb.w	r3, [r0, #881]	; 0x371
 80014aa:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 80014ae:	b91b      	cbnz	r3, 80014b8 <HAL_PCD_Init+0x1a>
  {  
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80014b0:	f880 2370 	strb.w	r2, [r0, #880]	; 0x370
  
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80014b4:	f001 fba2 	bl	8002bfc <HAL_PCD_MspInit>
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80014b8:	2303      	movs	r3, #3
 
 /* Init endpoints structures */
 for (i = 0U; i < hpcd->Init.dev_endpoints ; i++)
 80014ba:	2100      	movs	r1, #0
 80014bc:	6860      	ldr	r0, [r4, #4]
  hpcd->State = HAL_PCD_STATE_BUSY;
 80014be:	f884 3371 	strb.w	r3, [r4, #881]	; 0x371
 80014c2:	460a      	mov	r2, r1
 80014c4:	f104 0328 	add.w	r3, r4, #40	; 0x28
 {
   /* Init ep structure */
   hpcd->IN_ep[i].is_in = 1U;
 80014c8:	2501      	movs	r5, #1
 for (i = 0U; i < hpcd->Init.dev_endpoints ; i++)
 80014ca:	4281      	cmp	r1, r0
 80014cc:	f103 031c 	add.w	r3, r3, #28
 80014d0:	d11b      	bne.n	800150a <HAL_PCD_Init+0x6c>
 80014d2:	2000      	movs	r0, #0
 80014d4:	f504 72e6 	add.w	r2, r4, #460	; 0x1cc
 80014d8:	4603      	mov	r3, r0
   hpcd->IN_ep[i].maxpacket =  0U;
   hpcd->IN_ep[i].xfer_buff = 0U;
   hpcd->IN_ep[i].xfer_len = 0U;
 }
 
 for (i = 0U; i < hpcd->Init.dev_endpoints ; i++)
 80014da:	4281      	cmp	r1, r0
 80014dc:	f102 021c 	add.w	r2, r2, #28
 80014e0:	d121      	bne.n	8001526 <HAL_PCD_Init+0x88>
   hpcd->OUT_ep[i].xfer_len = 0U;
 }
  
 /* Init Device */
 /*CNTR_FRES = 1U*/
 hpcd->Instance->CNTR = USB_CNTR_FRES;
 80014e2:	6822      	ldr	r2, [r4, #0]
 80014e4:	2101      	movs	r1, #1
  /*set wInterrupt_Mask global variable*/
  wInterrupt_Mask = USB_CNTR_CTRM  | USB_CNTR_WKUPM | USB_CNTR_SUSPM | USB_CNTR_ERRM \
  | USB_CNTR_SOFM | USB_CNTR_ESOFM | USB_CNTR_RESETM;
  
  /*Set interrupt mask*/
  hpcd->Instance->CNTR = wInterrupt_Mask;
 80014e6:	f44f 403f 	mov.w	r0, #48896	; 0xbf00
 hpcd->Instance->CNTR = USB_CNTR_FRES;
 80014ea:	f8a2 1040 	strh.w	r1, [r2, #64]	; 0x40
 hpcd->Instance->CNTR = 0U;
 80014ee:	f8a2 3040 	strh.w	r3, [r2, #64]	; 0x40
 hpcd->Instance->ISTR = 0U;
 80014f2:	f8a2 3044 	strh.w	r3, [r2, #68]	; 0x44
 hpcd->Instance->BTABLE = BTABLE_ADDRESS;
 80014f6:	f8a2 3050 	strh.w	r3, [r2, #80]	; 0x50
  hpcd->Instance->CNTR = wInterrupt_Mask;
 80014fa:	f8a2 0040 	strh.w	r0, [r2, #64]	; 0x40
  
  hpcd->USB_Address = 0U;
 80014fe:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
  hpcd->State= HAL_PCD_STATE_READY;

 return HAL_OK;
 8001502:	2000      	movs	r0, #0
  hpcd->State= HAL_PCD_STATE_READY;
 8001504:	f884 1371 	strb.w	r1, [r4, #881]	; 0x371
 return HAL_OK;
 8001508:	bd38      	pop	{r3, r4, r5, pc}
   hpcd->IN_ep[i].num = i;
 800150a:	f803 1c1c 	strb.w	r1, [r3, #-28]
   hpcd->IN_ep[i].is_in = 1U;
 800150e:	f803 5c1b 	strb.w	r5, [r3, #-27]
   hpcd->IN_ep[i].type = PCD_EP_TYPE_CTRL;
 8001512:	f803 2c19 	strb.w	r2, [r3, #-25]
   hpcd->IN_ep[i].maxpacket =  0U;
 8001516:	f843 2c10 	str.w	r2, [r3, #-16]
   hpcd->IN_ep[i].xfer_buff = 0U;
 800151a:	f843 2c0c 	str.w	r2, [r3, #-12]
   hpcd->IN_ep[i].xfer_len = 0U;
 800151e:	f843 2c08 	str.w	r2, [r3, #-8]
 for (i = 0U; i < hpcd->Init.dev_endpoints ; i++)
 8001522:	3101      	adds	r1, #1
 8001524:	e7d1      	b.n	80014ca <HAL_PCD_Init+0x2c>
   hpcd->OUT_ep[i].num = i;
 8001526:	f802 0c1c 	strb.w	r0, [r2, #-28]
   hpcd->OUT_ep[i].is_in = 0U;
 800152a:	f802 3c1b 	strb.w	r3, [r2, #-27]
   hpcd->OUT_ep[i].type = PCD_EP_TYPE_CTRL;
 800152e:	f802 3c19 	strb.w	r3, [r2, #-25]
   hpcd->OUT_ep[i].maxpacket = 0U;
 8001532:	f842 3c10 	str.w	r3, [r2, #-16]
   hpcd->OUT_ep[i].xfer_buff = 0U;
 8001536:	f842 3c0c 	str.w	r3, [r2, #-12]
   hpcd->OUT_ep[i].xfer_len = 0U;
 800153a:	f842 3c08 	str.w	r3, [r2, #-8]
 for (i = 0U; i < hpcd->Init.dev_endpoints ; i++)
 800153e:	3001      	adds	r0, #1
 8001540:	e7cb      	b.n	80014da <HAL_PCD_Init+0x3c>
    return HAL_ERROR;
 8001542:	2001      	movs	r0, #1
}
 8001544:	bd38      	pop	{r3, r4, r5, pc}
	...

08001548 <HAL_RCC_OscConfig>:
  /* Check the parameters */
  assert_param(RCC_OscInitStruct != NULL);
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001548:	6803      	ldr	r3, [r0, #0]
 800154a:	07da      	lsls	r2, r3, #31
{
 800154c:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
 8001550:	4605      	mov	r5, r0
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001552:	d411      	bmi.n	8001578 <HAL_RCC_OscConfig+0x30>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001554:	682b      	ldr	r3, [r5, #0]
 8001556:	079b      	lsls	r3, r3, #30
 8001558:	f100 8088 	bmi.w	800166c <HAL_RCC_OscConfig+0x124>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800155c:	682b      	ldr	r3, [r5, #0]
 800155e:	071c      	lsls	r4, r3, #28
 8001560:	f100 80f8 	bmi.w	8001754 <HAL_RCC_OscConfig+0x20c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001564:	682b      	ldr	r3, [r5, #0]
 8001566:	0758      	lsls	r0, r3, #29
 8001568:	f100 8141 	bmi.w	80017ee <HAL_RCC_OscConfig+0x2a6>
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800156c:	69ea      	ldr	r2, [r5, #28]
 800156e:	2a00      	cmp	r2, #0
 8001570:	f040 81d7 	bne.w	8001922 <HAL_RCC_OscConfig+0x3da>
    {
      return HAL_ERROR;
    }
  }
  
  return HAL_OK;
 8001574:	2000      	movs	r0, #0
 8001576:	e021      	b.n	80015bc <HAL_RCC_OscConfig+0x74>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8001578:	4cba      	ldr	r4, [pc, #744]	; (8001864 <HAL_RCC_OscConfig+0x31c>)
 800157a:	6863      	ldr	r3, [r4, #4]
 800157c:	f003 030c 	and.w	r3, r3, #12
 8001580:	2b04      	cmp	r3, #4
 8001582:	d007      	beq.n	8001594 <HAL_RCC_OscConfig+0x4c>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001584:	6863      	ldr	r3, [r4, #4]
 8001586:	f003 030c 	and.w	r3, r3, #12
 800158a:	2b08      	cmp	r3, #8
 800158c:	d119      	bne.n	80015c2 <HAL_RCC_OscConfig+0x7a>
 800158e:	6863      	ldr	r3, [r4, #4]
 8001590:	03df      	lsls	r7, r3, #15
 8001592:	d516      	bpl.n	80015c2 <HAL_RCC_OscConfig+0x7a>
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001594:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001598:	fa93 f2a3 	rbit	r2, r3
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800159c:	6821      	ldr	r1, [r4, #0]
 800159e:	fa93 f3a3 	rbit	r3, r3
 80015a2:	fab3 f383 	clz	r3, r3
 80015a6:	f003 031f 	and.w	r3, r3, #31
 80015aa:	2201      	movs	r2, #1
 80015ac:	fa02 f303 	lsl.w	r3, r2, r3
 80015b0:	420b      	tst	r3, r1
 80015b2:	d0cf      	beq.n	8001554 <HAL_RCC_OscConfig+0xc>
 80015b4:	686b      	ldr	r3, [r5, #4]
 80015b6:	2b00      	cmp	r3, #0
 80015b8:	d1cc      	bne.n	8001554 <HAL_RCC_OscConfig+0xc>
        return HAL_ERROR;
 80015ba:	2001      	movs	r0, #1
}
 80015bc:	b002      	add	sp, #8
 80015be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80015c2:	686a      	ldr	r2, [r5, #4]
 80015c4:	f5b2 3f80 	cmp.w	r2, #65536	; 0x10000
 80015c8:	d125      	bne.n	8001616 <HAL_RCC_OscConfig+0xce>
 80015ca:	6823      	ldr	r3, [r4, #0]
 80015cc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80015d0:	6023      	str	r3, [r4, #0]
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80015d2:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 80015d4:	68a9      	ldr	r1, [r5, #8]
 80015d6:	f023 030f 	bic.w	r3, r3, #15
 80015da:	430b      	orrs	r3, r1
 80015dc:	62e3      	str	r3, [r4, #44]	; 0x2c
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80015de:	b352      	cbz	r2, 8001636 <HAL_RCC_OscConfig+0xee>
        tickstart = HAL_GetTick();
 80015e0:	f7fe fe20 	bl	8000224 <HAL_GetTick>
 80015e4:	f44f 3600 	mov.w	r6, #131072	; 0x20000
 80015e8:	4680      	mov	r8, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80015ea:	2701      	movs	r7, #1
 80015ec:	fa96 f3a6 	rbit	r3, r6
 80015f0:	6822      	ldr	r2, [r4, #0]
 80015f2:	fa96 f3a6 	rbit	r3, r6
 80015f6:	fab3 f383 	clz	r3, r3
 80015fa:	f003 031f 	and.w	r3, r3, #31
 80015fe:	fa07 f303 	lsl.w	r3, r7, r3
 8001602:	4213      	tst	r3, r2
 8001604:	d1a6      	bne.n	8001554 <HAL_RCC_OscConfig+0xc>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001606:	f7fe fe0d 	bl	8000224 <HAL_GetTick>
 800160a:	eba0 0008 	sub.w	r0, r0, r8
 800160e:	2864      	cmp	r0, #100	; 0x64
 8001610:	d9ec      	bls.n	80015ec <HAL_RCC_OscConfig+0xa4>
            return HAL_TIMEOUT;
 8001612:	2003      	movs	r0, #3
 8001614:	e7d2      	b.n	80015bc <HAL_RCC_OscConfig+0x74>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001616:	6823      	ldr	r3, [r4, #0]
 8001618:	b932      	cbnz	r2, 8001628 <HAL_RCC_OscConfig+0xe0>
 800161a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800161e:	6023      	str	r3, [r4, #0]
 8001620:	6823      	ldr	r3, [r4, #0]
 8001622:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001626:	e7d3      	b.n	80015d0 <HAL_RCC_OscConfig+0x88>
 8001628:	f5b2 2fa0 	cmp.w	r2, #327680	; 0x50000
 800162c:	d1f5      	bne.n	800161a <HAL_RCC_OscConfig+0xd2>
 800162e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001632:	6023      	str	r3, [r4, #0]
 8001634:	e7c9      	b.n	80015ca <HAL_RCC_OscConfig+0x82>
        tickstart = HAL_GetTick();
 8001636:	f7fe fdf5 	bl	8000224 <HAL_GetTick>
 800163a:	f44f 3600 	mov.w	r6, #131072	; 0x20000
 800163e:	4680      	mov	r8, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001640:	2701      	movs	r7, #1
 8001642:	fa96 f3a6 	rbit	r3, r6
 8001646:	6822      	ldr	r2, [r4, #0]
 8001648:	fa96 f3a6 	rbit	r3, r6
 800164c:	fab3 f383 	clz	r3, r3
 8001650:	f003 031f 	and.w	r3, r3, #31
 8001654:	fa07 f303 	lsl.w	r3, r7, r3
 8001658:	4213      	tst	r3, r2
 800165a:	f43f af7b 	beq.w	8001554 <HAL_RCC_OscConfig+0xc>
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800165e:	f7fe fde1 	bl	8000224 <HAL_GetTick>
 8001662:	eba0 0008 	sub.w	r0, r0, r8
 8001666:	2864      	cmp	r0, #100	; 0x64
 8001668:	d9eb      	bls.n	8001642 <HAL_RCC_OscConfig+0xfa>
 800166a:	e7d2      	b.n	8001612 <HAL_RCC_OscConfig+0xca>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 800166c:	4c7d      	ldr	r4, [pc, #500]	; (8001864 <HAL_RCC_OscConfig+0x31c>)
 800166e:	6863      	ldr	r3, [r4, #4]
 8001670:	f013 0f0c 	tst.w	r3, #12
 8001674:	d007      	beq.n	8001686 <HAL_RCC_OscConfig+0x13e>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8001676:	6863      	ldr	r3, [r4, #4]
 8001678:	f003 030c 	and.w	r3, r3, #12
 800167c:	2b08      	cmp	r3, #8
 800167e:	d121      	bne.n	80016c4 <HAL_RCC_OscConfig+0x17c>
 8001680:	6863      	ldr	r3, [r4, #4]
 8001682:	03de      	lsls	r6, r3, #15
 8001684:	d41e      	bmi.n	80016c4 <HAL_RCC_OscConfig+0x17c>
 8001686:	2302      	movs	r3, #2
 8001688:	fa93 f2a3 	rbit	r2, r3
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800168c:	6821      	ldr	r1, [r4, #0]
 800168e:	fa93 f3a3 	rbit	r3, r3
 8001692:	fab3 f383 	clz	r3, r3
 8001696:	f003 031f 	and.w	r3, r3, #31
 800169a:	2201      	movs	r2, #1
 800169c:	fa02 f303 	lsl.w	r3, r2, r3
 80016a0:	420b      	tst	r3, r1
 80016a2:	d002      	beq.n	80016aa <HAL_RCC_OscConfig+0x162>
 80016a4:	692b      	ldr	r3, [r5, #16]
 80016a6:	4293      	cmp	r3, r2
 80016a8:	d187      	bne.n	80015ba <HAL_RCC_OscConfig+0x72>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80016aa:	6821      	ldr	r1, [r4, #0]
 80016ac:	23f8      	movs	r3, #248	; 0xf8
 80016ae:	fa93 f3a3 	rbit	r3, r3
 80016b2:	fab3 f283 	clz	r2, r3
 80016b6:	696b      	ldr	r3, [r5, #20]
 80016b8:	4093      	lsls	r3, r2
 80016ba:	f021 02f8 	bic.w	r2, r1, #248	; 0xf8
 80016be:	4313      	orrs	r3, r2
 80016c0:	6023      	str	r3, [r4, #0]
 80016c2:	e74b      	b.n	800155c <HAL_RCC_OscConfig+0x14>
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80016c4:	692a      	ldr	r2, [r5, #16]
 80016c6:	2601      	movs	r6, #1
 80016c8:	b30a      	cbz	r2, 800170e <HAL_RCC_OscConfig+0x1c6>
 80016ca:	fa96 f3a6 	rbit	r3, r6
        __HAL_RCC_HSI_ENABLE();
 80016ce:	fab3 f383 	clz	r3, r3
 80016d2:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80016d6:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80016da:	009b      	lsls	r3, r3, #2
 80016dc:	2702      	movs	r7, #2
 80016de:	601e      	str	r6, [r3, #0]
        tickstart = HAL_GetTick();
 80016e0:	f7fe fda0 	bl	8000224 <HAL_GetTick>
 80016e4:	4680      	mov	r8, r0
 80016e6:	fa97 f3a7 	rbit	r3, r7
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80016ea:	6822      	ldr	r2, [r4, #0]
 80016ec:	fa97 f3a7 	rbit	r3, r7
 80016f0:	fab3 f383 	clz	r3, r3
 80016f4:	f003 031f 	and.w	r3, r3, #31
 80016f8:	fa06 f303 	lsl.w	r3, r6, r3
 80016fc:	4213      	tst	r3, r2
 80016fe:	d1d4      	bne.n	80016aa <HAL_RCC_OscConfig+0x162>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001700:	f7fe fd90 	bl	8000224 <HAL_GetTick>
 8001704:	eba0 0008 	sub.w	r0, r0, r8
 8001708:	2802      	cmp	r0, #2
 800170a:	d9ec      	bls.n	80016e6 <HAL_RCC_OscConfig+0x19e>
 800170c:	e781      	b.n	8001612 <HAL_RCC_OscConfig+0xca>
 800170e:	fa96 f3a6 	rbit	r3, r6
        __HAL_RCC_HSI_DISABLE();
 8001712:	fab3 f383 	clz	r3, r3
 8001716:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 800171a:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 800171e:	009b      	lsls	r3, r3, #2
 8001720:	2702      	movs	r7, #2
 8001722:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8001724:	f7fe fd7e 	bl	8000224 <HAL_GetTick>
 8001728:	4680      	mov	r8, r0
 800172a:	fa97 f3a7 	rbit	r3, r7
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800172e:	6822      	ldr	r2, [r4, #0]
 8001730:	fa97 f3a7 	rbit	r3, r7
 8001734:	fab3 f383 	clz	r3, r3
 8001738:	f003 031f 	and.w	r3, r3, #31
 800173c:	fa06 f303 	lsl.w	r3, r6, r3
 8001740:	4213      	tst	r3, r2
 8001742:	f43f af0b 	beq.w	800155c <HAL_RCC_OscConfig+0x14>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001746:	f7fe fd6d 	bl	8000224 <HAL_GetTick>
 800174a:	eba0 0008 	sub.w	r0, r0, r8
 800174e:	2802      	cmp	r0, #2
 8001750:	d9eb      	bls.n	800172a <HAL_RCC_OscConfig+0x1e2>
 8001752:	e75e      	b.n	8001612 <HAL_RCC_OscConfig+0xca>
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001754:	69aa      	ldr	r2, [r5, #24]
 8001756:	4e43      	ldr	r6, [pc, #268]	; (8001864 <HAL_RCC_OscConfig+0x31c>)
 8001758:	4943      	ldr	r1, [pc, #268]	; (8001868 <HAL_RCC_OscConfig+0x320>)
 800175a:	2401      	movs	r4, #1
 800175c:	b31a      	cbz	r2, 80017a6 <HAL_RCC_OscConfig+0x25e>
 800175e:	fa94 f3a4 	rbit	r3, r4
      __HAL_RCC_LSI_ENABLE();
 8001762:	fab3 f383 	clz	r3, r3
 8001766:	440b      	add	r3, r1
 8001768:	009b      	lsls	r3, r3, #2
 800176a:	2702      	movs	r7, #2
 800176c:	601c      	str	r4, [r3, #0]
      tickstart = HAL_GetTick();
 800176e:	f7fe fd59 	bl	8000224 <HAL_GetTick>
 8001772:	4680      	mov	r8, r0
 8001774:	fa97 f3a7 	rbit	r3, r7
 8001778:	fa97 f3a7 	rbit	r3, r7
 800177c:	fa97 f3a7 	rbit	r3, r7
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001780:	6a72      	ldr	r2, [r6, #36]	; 0x24
 8001782:	fa97 f3a7 	rbit	r3, r7
 8001786:	fab3 f383 	clz	r3, r3
 800178a:	f003 031f 	and.w	r3, r3, #31
 800178e:	fa04 f303 	lsl.w	r3, r4, r3
 8001792:	4213      	tst	r3, r2
 8001794:	f47f aee6 	bne.w	8001564 <HAL_RCC_OscConfig+0x1c>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001798:	f7fe fd44 	bl	8000224 <HAL_GetTick>
 800179c:	eba0 0008 	sub.w	r0, r0, r8
 80017a0:	2802      	cmp	r0, #2
 80017a2:	d9e7      	bls.n	8001774 <HAL_RCC_OscConfig+0x22c>
 80017a4:	e735      	b.n	8001612 <HAL_RCC_OscConfig+0xca>
 80017a6:	fa94 f3a4 	rbit	r3, r4
      __HAL_RCC_LSI_DISABLE();
 80017aa:	fab3 f383 	clz	r3, r3
 80017ae:	440b      	add	r3, r1
 80017b0:	009b      	lsls	r3, r3, #2
 80017b2:	2702      	movs	r7, #2
 80017b4:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 80017b6:	f7fe fd35 	bl	8000224 <HAL_GetTick>
 80017ba:	4680      	mov	r8, r0
 80017bc:	fa97 f3a7 	rbit	r3, r7
 80017c0:	fa97 f3a7 	rbit	r3, r7
 80017c4:	fa97 f3a7 	rbit	r3, r7
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80017c8:	6a72      	ldr	r2, [r6, #36]	; 0x24
 80017ca:	fa97 f3a7 	rbit	r3, r7
 80017ce:	fab3 f383 	clz	r3, r3
 80017d2:	f003 031f 	and.w	r3, r3, #31
 80017d6:	fa04 f303 	lsl.w	r3, r4, r3
 80017da:	4213      	tst	r3, r2
 80017dc:	f43f aec2 	beq.w	8001564 <HAL_RCC_OscConfig+0x1c>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80017e0:	f7fe fd20 	bl	8000224 <HAL_GetTick>
 80017e4:	eba0 0008 	sub.w	r0, r0, r8
 80017e8:	2802      	cmp	r0, #2
 80017ea:	d9e7      	bls.n	80017bc <HAL_RCC_OscConfig+0x274>
 80017ec:	e711      	b.n	8001612 <HAL_RCC_OscConfig+0xca>
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80017ee:	4c1d      	ldr	r4, [pc, #116]	; (8001864 <HAL_RCC_OscConfig+0x31c>)
 80017f0:	69e3      	ldr	r3, [r4, #28]
 80017f2:	00d9      	lsls	r1, r3, #3
 80017f4:	d434      	bmi.n	8001860 <HAL_RCC_OscConfig+0x318>
      __HAL_RCC_PWR_CLK_ENABLE();
 80017f6:	69e3      	ldr	r3, [r4, #28]
 80017f8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80017fc:	61e3      	str	r3, [r4, #28]
 80017fe:	69e3      	ldr	r3, [r4, #28]
 8001800:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001804:	9301      	str	r3, [sp, #4]
 8001806:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8001808:	2601      	movs	r6, #1
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800180a:	4f18      	ldr	r7, [pc, #96]	; (800186c <HAL_RCC_OscConfig+0x324>)
 800180c:	683b      	ldr	r3, [r7, #0]
 800180e:	05da      	lsls	r2, r3, #23
 8001810:	d52e      	bpl.n	8001870 <HAL_RCC_OscConfig+0x328>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001812:	68eb      	ldr	r3, [r5, #12]
 8001814:	2b01      	cmp	r3, #1
 8001816:	d13c      	bne.n	8001892 <HAL_RCC_OscConfig+0x34a>
 8001818:	6a23      	ldr	r3, [r4, #32]
 800181a:	f043 0301 	orr.w	r3, r3, #1
 800181e:	6223      	str	r3, [r4, #32]
      tickstart = HAL_GetTick();
 8001820:	f7fe fd00 	bl	8000224 <HAL_GetTick>
 8001824:	2702      	movs	r7, #2
 8001826:	4682      	mov	sl, r0
 8001828:	46b9      	mov	r9, r7
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800182a:	f04f 0801 	mov.w	r8, #1
 800182e:	fa97 f3a7 	rbit	r3, r7
 8001832:	fa97 f3a7 	rbit	r3, r7
 8001836:	2b00      	cmp	r3, #0
 8001838:	d06b      	beq.n	8001912 <HAL_RCC_OscConfig+0x3ca>
 800183a:	6a22      	ldr	r2, [r4, #32]
 800183c:	fa99 f3a9 	rbit	r3, r9
 8001840:	fab3 f383 	clz	r3, r3
 8001844:	f003 031f 	and.w	r3, r3, #31
 8001848:	fa08 f303 	lsl.w	r3, r8, r3
 800184c:	4213      	tst	r3, r2
 800184e:	d057      	beq.n	8001900 <HAL_RCC_OscConfig+0x3b8>
    if(pwrclkchanged == SET)
 8001850:	2e00      	cmp	r6, #0
 8001852:	f43f ae8b 	beq.w	800156c <HAL_RCC_OscConfig+0x24>
      __HAL_RCC_PWR_CLK_DISABLE();
 8001856:	69e3      	ldr	r3, [r4, #28]
 8001858:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800185c:	61e3      	str	r3, [r4, #28]
 800185e:	e685      	b.n	800156c <HAL_RCC_OscConfig+0x24>
    FlagStatus       pwrclkchanged = RESET;
 8001860:	2600      	movs	r6, #0
 8001862:	e7d2      	b.n	800180a <HAL_RCC_OscConfig+0x2c2>
 8001864:	40021000 	.word	0x40021000
 8001868:	10908120 	.word	0x10908120
 800186c:	40007000 	.word	0x40007000
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001870:	683b      	ldr	r3, [r7, #0]
 8001872:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001876:	603b      	str	r3, [r7, #0]
      tickstart = HAL_GetTick();
 8001878:	f7fe fcd4 	bl	8000224 <HAL_GetTick>
 800187c:	4680      	mov	r8, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800187e:	683b      	ldr	r3, [r7, #0]
 8001880:	05db      	lsls	r3, r3, #23
 8001882:	d4c6      	bmi.n	8001812 <HAL_RCC_OscConfig+0x2ca>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001884:	f7fe fcce 	bl	8000224 <HAL_GetTick>
 8001888:	eba0 0008 	sub.w	r0, r0, r8
 800188c:	2864      	cmp	r0, #100	; 0x64
 800188e:	d9f6      	bls.n	800187e <HAL_RCC_OscConfig+0x336>
 8001890:	e6bf      	b.n	8001612 <HAL_RCC_OscConfig+0xca>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001892:	bb3b      	cbnz	r3, 80018e4 <HAL_RCC_OscConfig+0x39c>
 8001894:	6a23      	ldr	r3, [r4, #32]
 8001896:	f023 0301 	bic.w	r3, r3, #1
 800189a:	6223      	str	r3, [r4, #32]
 800189c:	6a23      	ldr	r3, [r4, #32]
 800189e:	f023 0304 	bic.w	r3, r3, #4
 80018a2:	6223      	str	r3, [r4, #32]
      tickstart = HAL_GetTick();
 80018a4:	f7fe fcbe 	bl	8000224 <HAL_GetTick>
 80018a8:	2702      	movs	r7, #2
 80018aa:	4682      	mov	sl, r0
 80018ac:	46b9      	mov	r9, r7
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80018ae:	f04f 0801 	mov.w	r8, #1
 80018b2:	fa97 f3a7 	rbit	r3, r7
 80018b6:	fa97 f3a7 	rbit	r3, r7
 80018ba:	b373      	cbz	r3, 800191a <HAL_RCC_OscConfig+0x3d2>
 80018bc:	6a22      	ldr	r2, [r4, #32]
 80018be:	fa99 f3a9 	rbit	r3, r9
 80018c2:	fab3 f383 	clz	r3, r3
 80018c6:	f003 031f 	and.w	r3, r3, #31
 80018ca:	fa08 f303 	lsl.w	r3, r8, r3
 80018ce:	4213      	tst	r3, r2
 80018d0:	d0be      	beq.n	8001850 <HAL_RCC_OscConfig+0x308>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80018d2:	f7fe fca7 	bl	8000224 <HAL_GetTick>
 80018d6:	f241 3388 	movw	r3, #5000	; 0x1388
 80018da:	eba0 000a 	sub.w	r0, r0, sl
 80018de:	4298      	cmp	r0, r3
 80018e0:	d9e7      	bls.n	80018b2 <HAL_RCC_OscConfig+0x36a>
 80018e2:	e696      	b.n	8001612 <HAL_RCC_OscConfig+0xca>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80018e4:	2b05      	cmp	r3, #5
 80018e6:	6a23      	ldr	r3, [r4, #32]
 80018e8:	d103      	bne.n	80018f2 <HAL_RCC_OscConfig+0x3aa>
 80018ea:	f043 0304 	orr.w	r3, r3, #4
 80018ee:	6223      	str	r3, [r4, #32]
 80018f0:	e792      	b.n	8001818 <HAL_RCC_OscConfig+0x2d0>
 80018f2:	f023 0301 	bic.w	r3, r3, #1
 80018f6:	6223      	str	r3, [r4, #32]
 80018f8:	6a23      	ldr	r3, [r4, #32]
 80018fa:	f023 0304 	bic.w	r3, r3, #4
 80018fe:	e78e      	b.n	800181e <HAL_RCC_OscConfig+0x2d6>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001900:	f7fe fc90 	bl	8000224 <HAL_GetTick>
 8001904:	f241 3388 	movw	r3, #5000	; 0x1388
 8001908:	eba0 000a 	sub.w	r0, r0, sl
 800190c:	4298      	cmp	r0, r3
 800190e:	d98e      	bls.n	800182e <HAL_RCC_OscConfig+0x2e6>
 8001910:	e67f      	b.n	8001612 <HAL_RCC_OscConfig+0xca>
 8001912:	fa97 f3a7 	rbit	r3, r7
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001916:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8001918:	e790      	b.n	800183c <HAL_RCC_OscConfig+0x2f4>
 800191a:	fa97 f3a7 	rbit	r3, r7
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800191e:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8001920:	e7cd      	b.n	80018be <HAL_RCC_OscConfig+0x376>
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001922:	4c41      	ldr	r4, [pc, #260]	; (8001a28 <HAL_RCC_OscConfig+0x4e0>)
 8001924:	6863      	ldr	r3, [r4, #4]
 8001926:	f003 030c 	and.w	r3, r3, #12
 800192a:	2b08      	cmp	r3, #8
 800192c:	f43f ae45 	beq.w	80015ba <HAL_RCC_OscConfig+0x72>
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001930:	2a02      	cmp	r2, #2
 8001932:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001936:	d152      	bne.n	80019de <HAL_RCC_OscConfig+0x496>
 8001938:	fa93 f3a3 	rbit	r3, r3
        __HAL_RCC_PLL_DISABLE();
 800193c:	fab3 f383 	clz	r3, r3
 8001940:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001944:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001948:	009b      	lsls	r3, r3, #2
 800194a:	2200      	movs	r2, #0
 800194c:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 800194e:	f7fe fc69 	bl	8000224 <HAL_GetTick>
 8001952:	f04f 7700 	mov.w	r7, #33554432	; 0x2000000
 8001956:	4680      	mov	r8, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001958:	2601      	movs	r6, #1
 800195a:	fa97 f3a7 	rbit	r3, r7
 800195e:	6822      	ldr	r2, [r4, #0]
 8001960:	fa97 f3a7 	rbit	r3, r7
 8001964:	fab3 f383 	clz	r3, r3
 8001968:	f003 031f 	and.w	r3, r3, #31
 800196c:	fa06 f303 	lsl.w	r3, r6, r3
 8001970:	4213      	tst	r3, r2
 8001972:	d12d      	bne.n	80019d0 <HAL_RCC_OscConfig+0x488>
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001974:	6862      	ldr	r2, [r4, #4]
 8001976:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8001978:	6a29      	ldr	r1, [r5, #32]
 800197a:	f422 1274 	bic.w	r2, r2, #3997696	; 0x3d0000
 800197e:	430b      	orrs	r3, r1
 8001980:	4313      	orrs	r3, r2
 8001982:	6063      	str	r3, [r4, #4]
 8001984:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001988:	fa93 f3a3 	rbit	r3, r3
        __HAL_RCC_PLL_ENABLE();
 800198c:	fab3 f383 	clz	r3, r3
 8001990:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001994:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001998:	009b      	lsls	r3, r3, #2
 800199a:	f04f 7500 	mov.w	r5, #33554432	; 0x2000000
 800199e:	601e      	str	r6, [r3, #0]
        tickstart = HAL_GetTick();
 80019a0:	f7fe fc40 	bl	8000224 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80019a4:	2601      	movs	r6, #1
        tickstart = HAL_GetTick();
 80019a6:	4607      	mov	r7, r0
 80019a8:	fa95 f3a5 	rbit	r3, r5
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80019ac:	6822      	ldr	r2, [r4, #0]
 80019ae:	fa95 f3a5 	rbit	r3, r5
 80019b2:	fab3 f383 	clz	r3, r3
 80019b6:	f003 031f 	and.w	r3, r3, #31
 80019ba:	fa06 f303 	lsl.w	r3, r6, r3
 80019be:	4213      	tst	r3, r2
 80019c0:	f47f add8 	bne.w	8001574 <HAL_RCC_OscConfig+0x2c>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80019c4:	f7fe fc2e 	bl	8000224 <HAL_GetTick>
 80019c8:	1bc0      	subs	r0, r0, r7
 80019ca:	2802      	cmp	r0, #2
 80019cc:	d9ec      	bls.n	80019a8 <HAL_RCC_OscConfig+0x460>
 80019ce:	e620      	b.n	8001612 <HAL_RCC_OscConfig+0xca>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80019d0:	f7fe fc28 	bl	8000224 <HAL_GetTick>
 80019d4:	eba0 0008 	sub.w	r0, r0, r8
 80019d8:	2802      	cmp	r0, #2
 80019da:	d9be      	bls.n	800195a <HAL_RCC_OscConfig+0x412>
 80019dc:	e619      	b.n	8001612 <HAL_RCC_OscConfig+0xca>
 80019de:	fa93 f3a3 	rbit	r3, r3
        __HAL_RCC_PLL_DISABLE();
 80019e2:	fab3 f383 	clz	r3, r3
 80019e6:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80019ea:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80019ee:	009b      	lsls	r3, r3, #2
 80019f0:	2200      	movs	r2, #0
 80019f2:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 80019f4:	f7fe fc16 	bl	8000224 <HAL_GetTick>
 80019f8:	f04f 7500 	mov.w	r5, #33554432	; 0x2000000
 80019fc:	4607      	mov	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80019fe:	2601      	movs	r6, #1
 8001a00:	fa95 f3a5 	rbit	r3, r5
 8001a04:	6822      	ldr	r2, [r4, #0]
 8001a06:	fa95 f3a5 	rbit	r3, r5
 8001a0a:	fab3 f383 	clz	r3, r3
 8001a0e:	f003 031f 	and.w	r3, r3, #31
 8001a12:	fa06 f303 	lsl.w	r3, r6, r3
 8001a16:	4213      	tst	r3, r2
 8001a18:	f43f adac 	beq.w	8001574 <HAL_RCC_OscConfig+0x2c>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001a1c:	f7fe fc02 	bl	8000224 <HAL_GetTick>
 8001a20:	1bc0      	subs	r0, r0, r7
 8001a22:	2802      	cmp	r0, #2
 8001a24:	d9ec      	bls.n	8001a00 <HAL_RCC_OscConfig+0x4b8>
 8001a26:	e5f4      	b.n	8001612 <HAL_RCC_OscConfig+0xca>
 8001a28:	40021000 	.word	0x40021000

08001a2c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001a2c:	b510      	push	{r4, lr}
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
  uint32_t sysclockfreq = 0U;
  
  tmpreg = RCC->CFGR;
 8001a2e:	4c13      	ldr	r4, [pc, #76]	; (8001a7c <HAL_RCC_GetSysClockFreq+0x50>)
 8001a30:	6861      	ldr	r1, [r4, #4]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001a32:	f001 030c 	and.w	r3, r1, #12
 8001a36:	2b08      	cmp	r3, #8
 8001a38:	d11e      	bne.n	8001a78 <HAL_RCC_GetSysClockFreq+0x4c>
 8001a3a:	f44f 1370 	mov.w	r3, #3932160	; 0x3c0000
 8001a3e:	fa93 f3a3 	rbit	r3, r3
      sysclockfreq = HSE_VALUE;
      break;
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 8001a42:	f401 1270 	and.w	r2, r1, #3932160	; 0x3c0000
 8001a46:	fab3 f383 	clz	r3, r3
 8001a4a:	fa22 f303 	lsr.w	r3, r2, r3
 8001a4e:	4a0c      	ldr	r2, [pc, #48]	; (8001a80 <HAL_RCC_GetSysClockFreq+0x54>)
 8001a50:	5cd0      	ldrb	r0, [r2, r3]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 8001a52:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8001a54:	220f      	movs	r2, #15
 8001a56:	fa92 f2a2 	rbit	r2, r2
 8001a5a:	fab2 f282 	clz	r2, r2
 8001a5e:	f003 030f 	and.w	r3, r3, #15
 8001a62:	40d3      	lsrs	r3, r2
 8001a64:	4a07      	ldr	r2, [pc, #28]	; (8001a84 <HAL_RCC_GetSysClockFreq+0x58>)
 8001a66:	5cd2      	ldrb	r2, [r2, r3]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 8001a68:	03cb      	lsls	r3, r1, #15
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (HSE_VALUE / prediv) * pllmul;
 8001a6a:	bf4a      	itet	mi
 8001a6c:	4b06      	ldrmi	r3, [pc, #24]	; (8001a88 <HAL_RCC_GetSysClockFreq+0x5c>)
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (HSI_VALUE >> 1U) * pllmul;
 8001a6e:	4b07      	ldrpl	r3, [pc, #28]	; (8001a8c <HAL_RCC_GetSysClockFreq+0x60>)
        pllclk = (HSE_VALUE / prediv) * pllmul;
 8001a70:	fbb3 f3f2 	udivmi	r3, r3, r2
        pllclk = (HSI_VALUE >> 1U) * pllmul;
 8001a74:	4358      	muls	r0, r3
 8001a76:	bd10      	pop	{r4, pc}
      sysclockfreq = HSE_VALUE;
 8001a78:	4803      	ldr	r0, [pc, #12]	; (8001a88 <HAL_RCC_GetSysClockFreq+0x5c>)
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 8001a7a:	bd10      	pop	{r4, pc}
 8001a7c:	40021000 	.word	0x40021000
 8001a80:	08002da4 	.word	0x08002da4
 8001a84:	08002db4 	.word	0x08002db4
 8001a88:	007a1200 	.word	0x007a1200
 8001a8c:	003d0900 	.word	0x003d0900

08001a90 <HAL_RCC_ClockConfig>:
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 8001a90:	4a5c      	ldr	r2, [pc, #368]	; (8001c04 <HAL_RCC_ClockConfig+0x174>)
 8001a92:	6813      	ldr	r3, [r2, #0]
 8001a94:	f003 0307 	and.w	r3, r3, #7
 8001a98:	428b      	cmp	r3, r1
{
 8001a9a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001a9e:	4606      	mov	r6, r0
 8001aa0:	460d      	mov	r5, r1
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 8001aa2:	d330      	bcc.n	8001b06 <HAL_RCC_ClockConfig+0x76>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001aa4:	6832      	ldr	r2, [r6, #0]
 8001aa6:	0791      	lsls	r1, r2, #30
 8001aa8:	d43a      	bmi.n	8001b20 <HAL_RCC_ClockConfig+0x90>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001aaa:	07d2      	lsls	r2, r2, #31
 8001aac:	d440      	bmi.n	8001b30 <HAL_RCC_ClockConfig+0xa0>
  if(FLatency < (FLASH->ACR & FLASH_ACR_LATENCY))
 8001aae:	4a55      	ldr	r2, [pc, #340]	; (8001c04 <HAL_RCC_ClockConfig+0x174>)
 8001ab0:	6813      	ldr	r3, [r2, #0]
 8001ab2:	f003 0307 	and.w	r3, r3, #7
 8001ab6:	429d      	cmp	r5, r3
 8001ab8:	f0c0 8092 	bcc.w	8001be0 <HAL_RCC_ClockConfig+0x150>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001abc:	6832      	ldr	r2, [r6, #0]
 8001abe:	4c52      	ldr	r4, [pc, #328]	; (8001c08 <HAL_RCC_ClockConfig+0x178>)
 8001ac0:	f012 0f04 	tst.w	r2, #4
 8001ac4:	f040 8097 	bne.w	8001bf6 <HAL_RCC_ClockConfig+0x166>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001ac8:	0713      	lsls	r3, r2, #28
 8001aca:	d506      	bpl.n	8001ada <HAL_RCC_ClockConfig+0x4a>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001acc:	6863      	ldr	r3, [r4, #4]
 8001ace:	6932      	ldr	r2, [r6, #16]
 8001ad0:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 8001ad4:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8001ad8:	6063      	str	r3, [r4, #4]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8001ada:	f7ff ffa7 	bl	8001a2c <HAL_RCC_GetSysClockFreq>
 8001ade:	6863      	ldr	r3, [r4, #4]
 8001ae0:	22f0      	movs	r2, #240	; 0xf0
 8001ae2:	fa92 f2a2 	rbit	r2, r2
 8001ae6:	fab2 f282 	clz	r2, r2
 8001aea:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001aee:	40d3      	lsrs	r3, r2
 8001af0:	4a46      	ldr	r2, [pc, #280]	; (8001c0c <HAL_RCC_ClockConfig+0x17c>)
 8001af2:	5cd3      	ldrb	r3, [r2, r3]
 8001af4:	40d8      	lsrs	r0, r3
 8001af6:	4b46      	ldr	r3, [pc, #280]	; (8001c10 <HAL_RCC_ClockConfig+0x180>)
 8001af8:	6018      	str	r0, [r3, #0]
  HAL_InitTick (TICK_INT_PRIORITY);
 8001afa:	2000      	movs	r0, #0
 8001afc:	f7fe fb64 	bl	80001c8 <HAL_InitTick>
  return HAL_OK;
 8001b00:	2000      	movs	r0, #0
}
 8001b02:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001b06:	6813      	ldr	r3, [r2, #0]
 8001b08:	f023 0307 	bic.w	r3, r3, #7
 8001b0c:	430b      	orrs	r3, r1
 8001b0e:	6013      	str	r3, [r2, #0]
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8001b10:	6813      	ldr	r3, [r2, #0]
 8001b12:	f003 0307 	and.w	r3, r3, #7
 8001b16:	4299      	cmp	r1, r3
 8001b18:	d0c4      	beq.n	8001aa4 <HAL_RCC_ClockConfig+0x14>
      return HAL_ERROR;
 8001b1a:	2001      	movs	r0, #1
 8001b1c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001b20:	4939      	ldr	r1, [pc, #228]	; (8001c08 <HAL_RCC_ClockConfig+0x178>)
 8001b22:	68b0      	ldr	r0, [r6, #8]
 8001b24:	684b      	ldr	r3, [r1, #4]
 8001b26:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001b2a:	4303      	orrs	r3, r0
 8001b2c:	604b      	str	r3, [r1, #4]
 8001b2e:	e7bc      	b.n	8001aaa <HAL_RCC_ClockConfig+0x1a>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001b30:	6872      	ldr	r2, [r6, #4]
 8001b32:	4c35      	ldr	r4, [pc, #212]	; (8001c08 <HAL_RCC_ClockConfig+0x178>)
 8001b34:	2a01      	cmp	r2, #1
 8001b36:	d128      	bne.n	8001b8a <HAL_RCC_ClockConfig+0xfa>
 8001b38:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001b3c:	fa93 f1a3 	rbit	r1, r3
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001b40:	6821      	ldr	r1, [r4, #0]
 8001b42:	fa93 f3a3 	rbit	r3, r3
 8001b46:	fab3 f383 	clz	r3, r3
 8001b4a:	f003 031f 	and.w	r3, r3, #31
 8001b4e:	fa02 f303 	lsl.w	r3, r2, r3
 8001b52:	420b      	tst	r3, r1
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001b54:	d0e1      	beq.n	8001b1a <HAL_RCC_ClockConfig+0x8a>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001b56:	6863      	ldr	r3, [r4, #4]
 8001b58:	f023 0303 	bic.w	r3, r3, #3
 8001b5c:	431a      	orrs	r2, r3
 8001b5e:	6062      	str	r2, [r4, #4]
    tickstart = HAL_GetTick();
 8001b60:	f7fe fb60 	bl	8000224 <HAL_GetTick>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001b64:	6873      	ldr	r3, [r6, #4]
 8001b66:	2b01      	cmp	r3, #1
    tickstart = HAL_GetTick();
 8001b68:	4607      	mov	r7, r0
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001b6a:	f241 3888 	movw	r8, #5000	; 0x1388
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001b6e:	d11f      	bne.n	8001bb0 <HAL_RCC_ClockConfig+0x120>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8001b70:	6863      	ldr	r3, [r4, #4]
 8001b72:	f003 030c 	and.w	r3, r3, #12
 8001b76:	2b04      	cmp	r3, #4
 8001b78:	d099      	beq.n	8001aae <HAL_RCC_ClockConfig+0x1e>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001b7a:	f7fe fb53 	bl	8000224 <HAL_GetTick>
 8001b7e:	1bc0      	subs	r0, r0, r7
 8001b80:	4540      	cmp	r0, r8
 8001b82:	d9f5      	bls.n	8001b70 <HAL_RCC_ClockConfig+0xe0>
          return HAL_TIMEOUT;
 8001b84:	2003      	movs	r0, #3
 8001b86:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001b8a:	2a02      	cmp	r2, #2
 8001b8c:	bf0c      	ite	eq
 8001b8e:	f04f 7300 	moveq.w	r3, #33554432	; 0x2000000
 8001b92:	2302      	movne	r3, #2
 8001b94:	fa93 f1a3 	rbit	r1, r3
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001b98:	6820      	ldr	r0, [r4, #0]
 8001b9a:	fa93 f3a3 	rbit	r3, r3
 8001b9e:	fab3 f383 	clz	r3, r3
 8001ba2:	f003 031f 	and.w	r3, r3, #31
 8001ba6:	2101      	movs	r1, #1
 8001ba8:	fa01 f303 	lsl.w	r3, r1, r3
 8001bac:	4203      	tst	r3, r0
 8001bae:	e7d1      	b.n	8001b54 <HAL_RCC_ClockConfig+0xc4>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001bb0:	2b02      	cmp	r3, #2
 8001bb2:	d110      	bne.n	8001bd6 <HAL_RCC_ClockConfig+0x146>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001bb4:	6863      	ldr	r3, [r4, #4]
 8001bb6:	f003 030c 	and.w	r3, r3, #12
 8001bba:	2b08      	cmp	r3, #8
 8001bbc:	f43f af77 	beq.w	8001aae <HAL_RCC_ClockConfig+0x1e>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001bc0:	f7fe fb30 	bl	8000224 <HAL_GetTick>
 8001bc4:	1bc0      	subs	r0, r0, r7
 8001bc6:	4540      	cmp	r0, r8
 8001bc8:	d9f4      	bls.n	8001bb4 <HAL_RCC_ClockConfig+0x124>
 8001bca:	e7db      	b.n	8001b84 <HAL_RCC_ClockConfig+0xf4>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001bcc:	f7fe fb2a 	bl	8000224 <HAL_GetTick>
 8001bd0:	1bc0      	subs	r0, r0, r7
 8001bd2:	4540      	cmp	r0, r8
 8001bd4:	d8d6      	bhi.n	8001b84 <HAL_RCC_ClockConfig+0xf4>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8001bd6:	6863      	ldr	r3, [r4, #4]
 8001bd8:	f013 0f0c 	tst.w	r3, #12
 8001bdc:	d1f6      	bne.n	8001bcc <HAL_RCC_ClockConfig+0x13c>
 8001bde:	e766      	b.n	8001aae <HAL_RCC_ClockConfig+0x1e>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001be0:	6813      	ldr	r3, [r2, #0]
 8001be2:	f023 0307 	bic.w	r3, r3, #7
 8001be6:	432b      	orrs	r3, r5
 8001be8:	6013      	str	r3, [r2, #0]
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8001bea:	6813      	ldr	r3, [r2, #0]
 8001bec:	f003 0307 	and.w	r3, r3, #7
 8001bf0:	429d      	cmp	r5, r3
 8001bf2:	d192      	bne.n	8001b1a <HAL_RCC_ClockConfig+0x8a>
 8001bf4:	e762      	b.n	8001abc <HAL_RCC_ClockConfig+0x2c>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001bf6:	6863      	ldr	r3, [r4, #4]
 8001bf8:	68f1      	ldr	r1, [r6, #12]
 8001bfa:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8001bfe:	430b      	orrs	r3, r1
 8001c00:	6063      	str	r3, [r4, #4]
 8001c02:	e761      	b.n	8001ac8 <HAL_RCC_ClockConfig+0x38>
 8001c04:	40022000 	.word	0x40022000
 8001c08:	40021000 	.word	0x40021000
 8001c0c:	08002e52 	.word	0x08002e52
 8001c10:	20000004 	.word	0x20000004

08001c14 <HAL_RCC_GetHCLKFreq>:
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
  return SystemCoreClock;
}
 8001c14:	4b01      	ldr	r3, [pc, #4]	; (8001c1c <HAL_RCC_GetHCLKFreq+0x8>)
 8001c16:	6818      	ldr	r0, [r3, #0]
 8001c18:	4770      	bx	lr
 8001c1a:	bf00      	nop
 8001c1c:	20000004 	.word	0x20000004

08001c20 <HAL_RCC_GetPCLK1Freq>:
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 8001c20:	4b08      	ldr	r3, [pc, #32]	; (8001c44 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001c22:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8001c26:	685b      	ldr	r3, [r3, #4]
 8001c28:	fa92 f2a2 	rbit	r2, r2
 8001c2c:	fab2 f282 	clz	r2, r2
 8001c30:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8001c34:	40d3      	lsrs	r3, r2
 8001c36:	4a04      	ldr	r2, [pc, #16]	; (8001c48 <HAL_RCC_GetPCLK1Freq+0x28>)
 8001c38:	5cd3      	ldrb	r3, [r2, r3]
 8001c3a:	4a04      	ldr	r2, [pc, #16]	; (8001c4c <HAL_RCC_GetPCLK1Freq+0x2c>)
 8001c3c:	6810      	ldr	r0, [r2, #0]
}    
 8001c3e:	40d8      	lsrs	r0, r3
 8001c40:	4770      	bx	lr
 8001c42:	bf00      	nop
 8001c44:	40021000 	.word	0x40021000
 8001c48:	08002e62 	.word	0x08002e62
 8001c4c:	20000004 	.word	0x20000004

08001c50 <HAL_RCC_GetPCLK2Freq>:
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 8001c50:	4b08      	ldr	r3, [pc, #32]	; (8001c74 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001c52:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 8001c56:	685b      	ldr	r3, [r3, #4]
 8001c58:	fa92 f2a2 	rbit	r2, r2
 8001c5c:	fab2 f282 	clz	r2, r2
 8001c60:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 8001c64:	40d3      	lsrs	r3, r2
 8001c66:	4a04      	ldr	r2, [pc, #16]	; (8001c78 <HAL_RCC_GetPCLK2Freq+0x28>)
 8001c68:	5cd3      	ldrb	r3, [r2, r3]
 8001c6a:	4a04      	ldr	r2, [pc, #16]	; (8001c7c <HAL_RCC_GetPCLK2Freq+0x2c>)
 8001c6c:	6810      	ldr	r0, [r2, #0]
} 
 8001c6e:	40d8      	lsrs	r0, r3
 8001c70:	4770      	bx	lr
 8001c72:	bf00      	nop
 8001c74:	40021000 	.word	0x40021000
 8001c78:	08002e62 	.word	0x08002e62
 8001c7c:	20000004 	.word	0x20000004

08001c80 <HAL_RCCEx_PeriphCLKConfig>:
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8001c80:	6803      	ldr	r3, [r0, #0]
{
 8001c82:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8001c86:	03dd      	lsls	r5, r3, #15
{
 8001c88:	4604      	mov	r4, r0
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8001c8a:	d523      	bpl.n	8001cd4 <HAL_RCCEx_PeriphCLKConfig+0x54>
    FlagStatus       pwrclkchanged = RESET;

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001c8c:	4d7c      	ldr	r5, [pc, #496]	; (8001e80 <HAL_RCCEx_PeriphCLKConfig+0x200>)
 8001c8e:	69eb      	ldr	r3, [r5, #28]
 8001c90:	00d8      	lsls	r0, r3, #3
 8001c92:	f100 8098 	bmi.w	8001dc6 <HAL_RCCEx_PeriphCLKConfig+0x146>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001c96:	69eb      	ldr	r3, [r5, #28]
 8001c98:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001c9c:	61eb      	str	r3, [r5, #28]
 8001c9e:	69eb      	ldr	r3, [r5, #28]
 8001ca0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001ca4:	9301      	str	r3, [sp, #4]
 8001ca6:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8001ca8:	2601      	movs	r6, #1
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001caa:	4f76      	ldr	r7, [pc, #472]	; (8001e84 <HAL_RCCEx_PeriphCLKConfig+0x204>)
 8001cac:	683b      	ldr	r3, [r7, #0]
 8001cae:	05d9      	lsls	r1, r3, #23
 8001cb0:	f140 808b 	bpl.w	8001dca <HAL_RCCEx_PeriphCLKConfig+0x14a>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8001cb4:	6a2b      	ldr	r3, [r5, #32]
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8001cb6:	f413 7340 	ands.w	r3, r3, #768	; 0x300
 8001cba:	f040 809b 	bne.w	8001df4 <HAL_RCCEx_PeriphCLKConfig+0x174>
            return HAL_TIMEOUT;
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 8001cbe:	6a2b      	ldr	r3, [r5, #32]
 8001cc0:	6862      	ldr	r2, [r4, #4]
 8001cc2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001cc6:	4313      	orrs	r3, r2
 8001cc8:	622b      	str	r3, [r5, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8001cca:	b11e      	cbz	r6, 8001cd4 <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001ccc:	69eb      	ldr	r3, [r5, #28]
 8001cce:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001cd2:	61eb      	str	r3, [r5, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8001cd4:	6820      	ldr	r0, [r4, #0]
 8001cd6:	07c7      	lsls	r7, r0, #31
 8001cd8:	d506      	bpl.n	8001ce8 <HAL_RCCEx_PeriphCLKConfig+0x68>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8001cda:	4a69      	ldr	r2, [pc, #420]	; (8001e80 <HAL_RCCEx_PeriphCLKConfig+0x200>)
 8001cdc:	68a1      	ldr	r1, [r4, #8]
 8001cde:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8001ce0:	f023 0303 	bic.w	r3, r3, #3
 8001ce4:	430b      	orrs	r3, r1
 8001ce6:	6313      	str	r3, [r2, #48]	; 0x30
  }

#if defined(RCC_CFGR3_USART2SW)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8001ce8:	0786      	lsls	r6, r0, #30
 8001cea:	d506      	bpl.n	8001cfa <HAL_RCCEx_PeriphCLKConfig+0x7a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8001cec:	4a64      	ldr	r2, [pc, #400]	; (8001e80 <HAL_RCCEx_PeriphCLKConfig+0x200>)
 8001cee:	68e1      	ldr	r1, [r4, #12]
 8001cf0:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8001cf2:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 8001cf6:	430b      	orrs	r3, r1
 8001cf8:	6313      	str	r3, [r2, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART2SW */

#if defined(RCC_CFGR3_USART3SW)
  /*------------------------------ USART3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8001cfa:	0745      	lsls	r5, r0, #29
 8001cfc:	d506      	bpl.n	8001d0c <HAL_RCCEx_PeriphCLKConfig+0x8c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8001cfe:	4a60      	ldr	r2, [pc, #384]	; (8001e80 <HAL_RCCEx_PeriphCLKConfig+0x200>)
 8001d00:	6921      	ldr	r1, [r4, #16]
 8001d02:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8001d04:	f423 2340 	bic.w	r3, r3, #786432	; 0xc0000
 8001d08:	430b      	orrs	r3, r1
 8001d0a:	6313      	str	r3, [r2, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8001d0c:	0681      	lsls	r1, r0, #26
 8001d0e:	d506      	bpl.n	8001d1e <HAL_RCCEx_PeriphCLKConfig+0x9e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8001d10:	4a5b      	ldr	r2, [pc, #364]	; (8001e80 <HAL_RCCEx_PeriphCLKConfig+0x200>)
 8001d12:	69e1      	ldr	r1, [r4, #28]
 8001d14:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8001d16:	f023 0310 	bic.w	r3, r3, #16
 8001d1a:	430b      	orrs	r3, r1
 8001d1c:	6313      	str	r3, [r2, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8001d1e:	0382      	lsls	r2, r0, #14
 8001d20:	d506      	bpl.n	8001d30 <HAL_RCCEx_PeriphCLKConfig+0xb0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 8001d22:	4a57      	ldr	r2, [pc, #348]	; (8001e80 <HAL_RCCEx_PeriphCLKConfig+0x200>)
 8001d24:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8001d26:	6853      	ldr	r3, [r2, #4]
 8001d28:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 8001d2c:	430b      	orrs	r3, r1
 8001d2e:	6053      	str	r3, [r2, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8001d30:	0643      	lsls	r3, r0, #25
 8001d32:	d506      	bpl.n	8001d42 <HAL_RCCEx_PeriphCLKConfig+0xc2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8001d34:	4a52      	ldr	r2, [pc, #328]	; (8001e80 <HAL_RCCEx_PeriphCLKConfig+0x200>)
 8001d36:	6a21      	ldr	r1, [r4, #32]
 8001d38:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8001d3a:	f023 0320 	bic.w	r3, r3, #32
 8001d3e:	430b      	orrs	r3, r1
 8001d40:	6313      	str	r3, [r2, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ UART4 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8001d42:	0707      	lsls	r7, r0, #28
 8001d44:	d506      	bpl.n	8001d54 <HAL_RCCEx_PeriphCLKConfig+0xd4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
    
    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8001d46:	4a4e      	ldr	r2, [pc, #312]	; (8001e80 <HAL_RCCEx_PeriphCLKConfig+0x200>)
 8001d48:	6961      	ldr	r1, [r4, #20]
 8001d4a:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8001d4c:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 8001d50:	430b      	orrs	r3, r1
 8001d52:	6313      	str	r3, [r2, #48]	; 0x30
  }

  /*------------------------------ UART5 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8001d54:	06c6      	lsls	r6, r0, #27
 8001d56:	d506      	bpl.n	8001d66 <HAL_RCCEx_PeriphCLKConfig+0xe6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
    
    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8001d58:	4a49      	ldr	r2, [pc, #292]	; (8001e80 <HAL_RCCEx_PeriphCLKConfig+0x200>)
 8001d5a:	69a1      	ldr	r1, [r4, #24]
 8001d5c:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8001d5e:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 8001d62:	430b      	orrs	r3, r1
 8001d64:	6313      	str	r3, [r2, #48]	; 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8001d66:	0585      	lsls	r5, r0, #22
 8001d68:	d506      	bpl.n	8001d78 <HAL_RCCEx_PeriphCLKConfig+0xf8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8001d6a:	4a45      	ldr	r2, [pc, #276]	; (8001e80 <HAL_RCCEx_PeriphCLKConfig+0x200>)
 8001d6c:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 8001d6e:	6853      	ldr	r3, [r2, #4]
 8001d70:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8001d74:	430b      	orrs	r3, r1
 8001d76:	6053      	str	r3, [r2, #4]
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8001d78:	0601      	lsls	r1, r0, #24
 8001d7a:	d506      	bpl.n	8001d8a <HAL_RCCEx_PeriphCLKConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8001d7c:	4a40      	ldr	r2, [pc, #256]	; (8001e80 <HAL_RCCEx_PeriphCLKConfig+0x200>)
 8001d7e:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8001d80:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8001d82:	f423 73f8 	bic.w	r3, r3, #496	; 0x1f0
 8001d86:	430b      	orrs	r3, r1
 8001d88:	62d3      	str	r3, [r2, #44]	; 0x2c
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ ADC3 & ADC4 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC34) == RCC_PERIPHCLK_ADC34)
 8001d8a:	05c2      	lsls	r2, r0, #23
 8001d8c:	d506      	bpl.n	8001d9c <HAL_RCCEx_PeriphCLKConfig+0x11c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC34PLLCLK_DIV(PeriphClkInit->Adc34ClockSelection));
    
    /* Configure the ADC34 clock source */
    __HAL_RCC_ADC34_CONFIG(PeriphClkInit->Adc34ClockSelection);
 8001d8e:	4a3c      	ldr	r2, [pc, #240]	; (8001e80 <HAL_RCCEx_PeriphCLKConfig+0x200>)
 8001d90:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 8001d92:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8001d94:	f423 5378 	bic.w	r3, r3, #15872	; 0x3e00
 8001d98:	430b      	orrs	r3, r1
 8001d9a:	62d3      	str	r3, [r2, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8001d9c:	04c3      	lsls	r3, r0, #19
 8001d9e:	d506      	bpl.n	8001dae <HAL_RCCEx_PeriphCLKConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8001da0:	4a37      	ldr	r2, [pc, #220]	; (8001e80 <HAL_RCCEx_PeriphCLKConfig+0x200>)
 8001da2:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8001da4:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8001da6:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001daa:	430b      	orrs	r3, r1
 8001dac:	6313      	str	r3, [r2, #48]	; 0x30
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ TIM8 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM8) == RCC_PERIPHCLK_TIM8)
 8001dae:	f410 5000 	ands.w	r0, r0, #8192	; 0x2000
 8001db2:	d01c      	beq.n	8001dee <HAL_RCCEx_PeriphCLKConfig+0x16e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM8CLKSOURCE(PeriphClkInit->Tim8ClockSelection));
    
    /* Configure the TIM8 clock source */
    __HAL_RCC_TIM8_CONFIG(PeriphClkInit->Tim8ClockSelection);
 8001db4:	4a32      	ldr	r2, [pc, #200]	; (8001e80 <HAL_RCCEx_PeriphCLKConfig+0x200>)
 8001db6:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8001db8:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8001dba:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8001dbe:	430b      	orrs	r3, r1
 8001dc0:	6313      	str	r3, [r2, #48]	; 0x30
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 8001dc2:	2000      	movs	r0, #0
 8001dc4:	e013      	b.n	8001dee <HAL_RCCEx_PeriphCLKConfig+0x16e>
    FlagStatus       pwrclkchanged = RESET;
 8001dc6:	2600      	movs	r6, #0
 8001dc8:	e76f      	b.n	8001caa <HAL_RCCEx_PeriphCLKConfig+0x2a>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001dca:	683b      	ldr	r3, [r7, #0]
 8001dcc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001dd0:	603b      	str	r3, [r7, #0]
      tickstart = HAL_GetTick();
 8001dd2:	f7fe fa27 	bl	8000224 <HAL_GetTick>
 8001dd6:	4680      	mov	r8, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001dd8:	683b      	ldr	r3, [r7, #0]
 8001dda:	05da      	lsls	r2, r3, #23
 8001ddc:	f53f af6a 	bmi.w	8001cb4 <HAL_RCCEx_PeriphCLKConfig+0x34>
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001de0:	f7fe fa20 	bl	8000224 <HAL_GetTick>
 8001de4:	eba0 0008 	sub.w	r0, r0, r8
 8001de8:	2864      	cmp	r0, #100	; 0x64
 8001dea:	d9f5      	bls.n	8001dd8 <HAL_RCCEx_PeriphCLKConfig+0x158>
          return HAL_TIMEOUT;
 8001dec:	2003      	movs	r0, #3
}
 8001dee:	b002      	add	sp, #8
 8001df0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8001df4:	6862      	ldr	r2, [r4, #4]
 8001df6:	f402 7240 	and.w	r2, r2, #768	; 0x300
 8001dfa:	4293      	cmp	r3, r2
 8001dfc:	f43f af5f 	beq.w	8001cbe <HAL_RCCEx_PeriphCLKConfig+0x3e>
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8001e00:	6a29      	ldr	r1, [r5, #32]
 8001e02:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001e06:	f421 7040 	bic.w	r0, r1, #768	; 0x300
 8001e0a:	fa93 f2a3 	rbit	r2, r3
      __HAL_RCC_BACKUPRESET_FORCE();
 8001e0e:	f8df e078 	ldr.w	lr, [pc, #120]	; 8001e88 <HAL_RCCEx_PeriphCLKConfig+0x208>
 8001e12:	fab2 f282 	clz	r2, r2
 8001e16:	4472      	add	r2, lr
 8001e18:	0092      	lsls	r2, r2, #2
 8001e1a:	2701      	movs	r7, #1
 8001e1c:	6017      	str	r7, [r2, #0]
 8001e1e:	fa93 f3a3 	rbit	r3, r3
      __HAL_RCC_BACKUPRESET_RELEASE();
 8001e22:	fab3 f383 	clz	r3, r3
 8001e26:	4473      	add	r3, lr
 8001e28:	009b      	lsls	r3, r3, #2
 8001e2a:	2200      	movs	r2, #0
 8001e2c:	601a      	str	r2, [r3, #0]
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8001e2e:	07cb      	lsls	r3, r1, #31
      RCC->BDCR = temp_reg;
 8001e30:	6228      	str	r0, [r5, #32]
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8001e32:	f57f af44 	bpl.w	8001cbe <HAL_RCCEx_PeriphCLKConfig+0x3e>
        tickstart = HAL_GetTick();
 8001e36:	f7fe f9f5 	bl	8000224 <HAL_GetTick>
 8001e3a:	f04f 0802 	mov.w	r8, #2
 8001e3e:	4682      	mov	sl, r0
 8001e40:	46c1      	mov	r9, r8
 8001e42:	fa98 f3a8 	rbit	r3, r8
 8001e46:	fa98 f3a8 	rbit	r3, r8
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001e4a:	b1a3      	cbz	r3, 8001e76 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
 8001e4c:	6a2a      	ldr	r2, [r5, #32]
 8001e4e:	fa99 f3a9 	rbit	r3, r9
 8001e52:	fab3 f383 	clz	r3, r3
 8001e56:	f003 031f 	and.w	r3, r3, #31
 8001e5a:	fa07 f303 	lsl.w	r3, r7, r3
 8001e5e:	4213      	tst	r3, r2
 8001e60:	f47f af2d 	bne.w	8001cbe <HAL_RCCEx_PeriphCLKConfig+0x3e>
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001e64:	f7fe f9de 	bl	8000224 <HAL_GetTick>
 8001e68:	f241 3388 	movw	r3, #5000	; 0x1388
 8001e6c:	eba0 000a 	sub.w	r0, r0, sl
 8001e70:	4298      	cmp	r0, r3
 8001e72:	d9e6      	bls.n	8001e42 <HAL_RCCEx_PeriphCLKConfig+0x1c2>
 8001e74:	e7ba      	b.n	8001dec <HAL_RCCEx_PeriphCLKConfig+0x16c>
 8001e76:	fa98 f3a8 	rbit	r3, r8
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001e7a:	6a6a      	ldr	r2, [r5, #36]	; 0x24
 8001e7c:	e7e7      	b.n	8001e4e <HAL_RCCEx_PeriphCLKConfig+0x1ce>
 8001e7e:	bf00      	nop
 8001e80:	40021000 	.word	0x40021000
 8001e84:	40007000 	.word	0x40007000
 8001e88:	10908100 	.word	0x10908100

08001e8c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8001e8c:	b570      	push	{r4, r5, r6, lr}
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8001e8e:	4604      	mov	r4, r0
 8001e90:	2800      	cmp	r0, #0
 8001e92:	d04e      	beq.n	8001f32 <HAL_SPI_Init+0xa6>
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001e94:	2300      	movs	r3, #0
 8001e96:	6283      	str	r3, [r0, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8001e98:	f890 305d 	ldrb.w	r3, [r0, #93]	; 0x5d
 8001e9c:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8001ea0:	b91b      	cbnz	r3, 8001eaa <HAL_SPI_Init+0x1e>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8001ea2:	f880 205c 	strb.w	r2, [r0, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8001ea6:	f000 fe5f 	bl	8002b68 <HAL_SPI_MspInit>
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8001eaa:	2302      	movs	r3, #2

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8001eac:	6821      	ldr	r1, [r4, #0]
  hspi->State = HAL_SPI_STATE_BUSY;
 8001eae:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
  __HAL_SPI_DISABLE(hspi);
 8001eb2:	680b      	ldr	r3, [r1, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8001eb4:	68e2      	ldr	r2, [r4, #12]
  __HAL_SPI_DISABLE(hspi);
 8001eb6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8001eba:	f5b2 6fe0 	cmp.w	r2, #1792	; 0x700
  __HAL_SPI_DISABLE(hspi);
 8001ebe:	600b      	str	r3, [r1, #0]
 8001ec0:	f04f 0300 	mov.w	r3, #0
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8001ec4:	d932      	bls.n	8001f2c <HAL_SPI_Init+0xa0>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8001ec6:	4618      	mov	r0, r3
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8001ec8:	f5b2 6f70 	cmp.w	r2, #3840	; 0xf00
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001ecc:	bf18      	it	ne
 8001ece:	62a3      	strne	r3, [r4, #40]	; 0x28
  }

  /* Align the CRC Length on the data size */
  if (hspi->Init.CRCLength == SPI_CRC_LENGTH_DATASIZE)
 8001ed0:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8001ed2:	b92b      	cbnz	r3, 8001ee0 <HAL_SPI_Init+0x54>
  {
    /* CRC Length aligned on the data size : value set by default */
    if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8001ed4:	f5b2 6fe0 	cmp.w	r2, #1792	; 0x700
    {
      hspi->Init.CRCLength = SPI_CRC_LENGTH_16BIT;
 8001ed8:	bf8c      	ite	hi
 8001eda:	2302      	movhi	r3, #2
    }
    else
    {
      hspi->Init.CRCLength = SPI_CRC_LENGTH_8BIT;
 8001edc:	2301      	movls	r3, #1
 8001ede:	6323      	str	r3, [r4, #48]	; 0x30
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction |
 8001ee0:	68a6      	ldr	r6, [r4, #8]
 8001ee2:	6863      	ldr	r3, [r4, #4]
 8001ee4:	69a5      	ldr	r5, [r4, #24]
 8001ee6:	4333      	orrs	r3, r6
 8001ee8:	6926      	ldr	r6, [r4, #16]
 8001eea:	4333      	orrs	r3, r6
 8001eec:	6966      	ldr	r6, [r4, #20]
 8001eee:	4333      	orrs	r3, r6
 8001ef0:	69e6      	ldr	r6, [r4, #28]
 8001ef2:	4333      	orrs	r3, r6
 8001ef4:	6a26      	ldr	r6, [r4, #32]
 8001ef6:	4333      	orrs	r3, r6
 8001ef8:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8001efa:	4333      	orrs	r3, r6
 8001efc:	f405 7600 	and.w	r6, r5, #512	; 0x200
 8001f00:	4333      	orrs	r3, r6
 8001f02:	600b      	str	r3, [r1, #0]
    hspi->Instance->CR1 |= SPI_CR1_CRCL;
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo Threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode |
 8001f04:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8001f06:	431a      	orrs	r2, r3
 8001f08:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8001f0a:	0c2d      	lsrs	r5, r5, #16
 8001f0c:	431a      	orrs	r2, r3
 8001f0e:	f005 0504 	and.w	r5, r5, #4
 8001f12:	432a      	orrs	r2, r5
 8001f14:	4302      	orrs	r2, r0
 8001f16:	604a      	str	r2, [r1, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8001f18:	69cb      	ldr	r3, [r1, #28]
 8001f1a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8001f1e:	61cb      	str	r3, [r1, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8001f20:	2000      	movs	r0, #0
  hspi->State     = HAL_SPI_STATE_READY;
 8001f22:	2301      	movs	r3, #1
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8001f24:	6620      	str	r0, [r4, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8001f26:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d

  return HAL_OK;
 8001f2a:	bd70      	pop	{r4, r5, r6, pc}
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8001f2c:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8001f30:	e7cc      	b.n	8001ecc <HAL_SPI_Init+0x40>
    return HAL_ERROR;
 8001f32:	2001      	movs	r0, #1
}
 8001f34:	bd70      	pop	{r4, r5, r6, pc}
	...

08001f38 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8001f38:	b538      	push	{r3, r4, r5, lr}
   *  the UART Word Length, Parity, Mode and oversampling:
   *  set the M bits according to huart->Init.WordLength value
   *  set PCE and PS bits according to huart->Init.Parity value
   *  set TE and RE bits according to huart->Init.Mode value
   *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8001f3a:	6882      	ldr	r2, [r0, #8]
  MODIFY_REG(huart->Instance->CR1, UART_CR1_FIELDS, tmpreg);
 8001f3c:	6805      	ldr	r5, [r0, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8001f3e:	69c3      	ldr	r3, [r0, #28]
  MODIFY_REG(huart->Instance->CR1, UART_CR1_FIELDS, tmpreg);
 8001f40:	6829      	ldr	r1, [r5, #0]
{
 8001f42:	4604      	mov	r4, r0
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8001f44:	6900      	ldr	r0, [r0, #16]
 8001f46:	4302      	orrs	r2, r0
 8001f48:	6960      	ldr	r0, [r4, #20]
  MODIFY_REG(huart->Instance->CR1, UART_CR1_FIELDS, tmpreg);
 8001f4a:	f421 4116 	bic.w	r1, r1, #38400	; 0x9600
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8001f4e:	4302      	orrs	r2, r0
  MODIFY_REG(huart->Instance->CR1, UART_CR1_FIELDS, tmpreg);
 8001f50:	f021 010c 	bic.w	r1, r1, #12
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8001f54:	431a      	orrs	r2, r3
  MODIFY_REG(huart->Instance->CR1, UART_CR1_FIELDS, tmpreg);
 8001f56:	430a      	orrs	r2, r1
 8001f58:	602a      	str	r2, [r5, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
   * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8001f5a:	686a      	ldr	r2, [r5, #4]
 8001f5c:	68e1      	ldr	r1, [r4, #12]
  /* Configure
   * - UART HardWare Flow Control: set CTSE and RTSE bits according
   *   to huart->Init.HwFlowCtl value
   * - one-bit sampling method versus three samples' majority rule according
   *   to huart->Init.OneBitSampling */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl | huart->Init.OneBitSampling ;
 8001f5e:	6a20      	ldr	r0, [r4, #32]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8001f60:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 8001f64:	430a      	orrs	r2, r1
 8001f66:	606a      	str	r2, [r5, #4]
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE | USART_CR3_ONEBIT), tmpreg);
 8001f68:	68a9      	ldr	r1, [r5, #8]
  tmpreg = (uint32_t)huart->Init.HwFlowCtl | huart->Init.OneBitSampling ;
 8001f6a:	69a2      	ldr	r2, [r4, #24]
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE | USART_CR3_ONEBIT), tmpreg);
 8001f6c:	f421 6130 	bic.w	r1, r1, #2816	; 0xb00
  tmpreg = (uint32_t)huart->Init.HwFlowCtl | huart->Init.OneBitSampling ;
 8001f70:	4302      	orrs	r2, r0
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE | USART_CR3_ONEBIT), tmpreg);
 8001f72:	430a      	orrs	r2, r1
 8001f74:	60aa      	str	r2, [r5, #8]

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8001f76:	4a6e      	ldr	r2, [pc, #440]	; (8002130 <UART_SetConfig+0x1f8>)
 8001f78:	4295      	cmp	r5, r2
 8001f7a:	d112      	bne.n	8001fa2 <UART_SetConfig+0x6a>
 8001f7c:	f502 4258 	add.w	r2, r2, #55296	; 0xd800
 8001f80:	496c      	ldr	r1, [pc, #432]	; (8002134 <UART_SetConfig+0x1fc>)
 8001f82:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8001f84:	f002 0203 	and.w	r2, r2, #3

  /* Check UART Over Sampling to set Baud Rate Register */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8001f88:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001f8c:	5c8a      	ldrb	r2, [r1, r2]
 8001f8e:	d066      	beq.n	800205e <UART_SetConfig+0x126>
    brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
    huart->Instance->BRR = brrtemp;
  }
  else
  {
    switch (clocksource)
 8001f90:	2a08      	cmp	r2, #8
 8001f92:	d819      	bhi.n	8001fc8 <UART_SetConfig+0x90>
 8001f94:	e8df f002 	tbb	[pc, r2]
 8001f98:	189e92c2 	.word	0x189e92c2
 8001f9c:	181818a9 	.word	0x181818a9
 8001fa0:	ac          	.byte	0xac
 8001fa1:	00          	.byte	0x00
  UART_GETCLOCKSOURCE(huart, clocksource);
 8001fa2:	4a65      	ldr	r2, [pc, #404]	; (8002138 <UART_SetConfig+0x200>)
 8001fa4:	4295      	cmp	r5, r2
 8001fa6:	d124      	bne.n	8001ff2 <UART_SetConfig+0xba>
 8001fa8:	f502 32e6 	add.w	r2, r2, #117760	; 0x1cc00
 8001fac:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8001fae:	f402 3240 	and.w	r2, r2, #196608	; 0x30000
 8001fb2:	f5b2 3f80 	cmp.w	r2, #65536	; 0x10000
 8001fb6:	f000 80a0 	beq.w	80020fa <UART_SetConfig+0x1c2>
 8001fba:	d807      	bhi.n	8001fcc <UART_SetConfig+0x94>
 8001fbc:	2a00      	cmp	r2, #0
 8001fbe:	f000 80aa 	beq.w	8002116 <UART_SetConfig+0x1de>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8001fc2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001fc6:	d076      	beq.n	80020b6 <UART_SetConfig+0x17e>
      case UART_CLOCKSOURCE_LSE:
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
        break;
      case UART_CLOCKSOURCE_UNDEFINED:
      default:
        ret = HAL_ERROR;
 8001fc8:	2001      	movs	r0, #1
        break;
    }
  }

  return ret;
 8001fca:	bd38      	pop	{r3, r4, r5, pc}
  UART_GETCLOCKSOURCE(huart, clocksource);
 8001fcc:	f5b2 3f00 	cmp.w	r2, #131072	; 0x20000
 8001fd0:	f000 8099 	beq.w	8002106 <UART_SetConfig+0x1ce>
 8001fd4:	f5b2 3f40 	cmp.w	r2, #196608	; 0x30000
 8001fd8:	d1f3      	bne.n	8001fc2 <UART_SetConfig+0x8a>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8001fda:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001fde:	d179      	bne.n	80020d4 <UART_SetConfig+0x19c>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 8001fe0:	6860      	ldr	r0, [r4, #4]
 8001fe2:	0843      	lsrs	r3, r0, #1
 8001fe4:	f503 0374 	add.w	r3, r3, #15990784	; 0xf40000
 8001fe8:	f503 5310 	add.w	r3, r3, #9216	; 0x2400
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 8001fec:	fbb3 f3f0 	udiv	r3, r3, r0
 8001ff0:	e054      	b.n	800209c <UART_SetConfig+0x164>
  UART_GETCLOCKSOURCE(huart, clocksource);
 8001ff2:	4a52      	ldr	r2, [pc, #328]	; (800213c <UART_SetConfig+0x204>)
 8001ff4:	4295      	cmp	r5, r2
 8001ff6:	d10e      	bne.n	8002016 <UART_SetConfig+0xde>
 8001ff8:	f502 32e4 	add.w	r2, r2, #116736	; 0x1c800
 8001ffc:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8001ffe:	f402 2240 	and.w	r2, r2, #786432	; 0xc0000
 8002002:	f5b2 2f80 	cmp.w	r2, #262144	; 0x40000
 8002006:	d078      	beq.n	80020fa <UART_SetConfig+0x1c2>
 8002008:	d9d8      	bls.n	8001fbc <UART_SetConfig+0x84>
 800200a:	f5b2 2f00 	cmp.w	r2, #524288	; 0x80000
 800200e:	d07a      	beq.n	8002106 <UART_SetConfig+0x1ce>
 8002010:	f5b2 2f40 	cmp.w	r2, #786432	; 0xc0000
 8002014:	e7e0      	b.n	8001fd8 <UART_SetConfig+0xa0>
 8002016:	4a4a      	ldr	r2, [pc, #296]	; (8002140 <UART_SetConfig+0x208>)
 8002018:	4295      	cmp	r5, r2
 800201a:	d10e      	bne.n	800203a <UART_SetConfig+0x102>
 800201c:	f502 32e2 	add.w	r2, r2, #115712	; 0x1c400
 8002020:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8002022:	f402 1240 	and.w	r2, r2, #3145728	; 0x300000
 8002026:	f5b2 1f80 	cmp.w	r2, #1048576	; 0x100000
 800202a:	d066      	beq.n	80020fa <UART_SetConfig+0x1c2>
 800202c:	d9c6      	bls.n	8001fbc <UART_SetConfig+0x84>
 800202e:	f5b2 1f00 	cmp.w	r2, #2097152	; 0x200000
 8002032:	d068      	beq.n	8002106 <UART_SetConfig+0x1ce>
 8002034:	f5b2 1f40 	cmp.w	r2, #3145728	; 0x300000
 8002038:	e7ce      	b.n	8001fd8 <UART_SetConfig+0xa0>
 800203a:	4a42      	ldr	r2, [pc, #264]	; (8002144 <UART_SetConfig+0x20c>)
 800203c:	4295      	cmp	r5, r2
 800203e:	d1c0      	bne.n	8001fc2 <UART_SetConfig+0x8a>
 8002040:	f502 32e0 	add.w	r2, r2, #114688	; 0x1c000
 8002044:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8002046:	f402 0240 	and.w	r2, r2, #12582912	; 0xc00000
 800204a:	f5b2 0f80 	cmp.w	r2, #4194304	; 0x400000
 800204e:	d054      	beq.n	80020fa <UART_SetConfig+0x1c2>
 8002050:	d9b4      	bls.n	8001fbc <UART_SetConfig+0x84>
 8002052:	f5b2 0f00 	cmp.w	r2, #8388608	; 0x800000
 8002056:	d056      	beq.n	8002106 <UART_SetConfig+0x1ce>
 8002058:	f5b2 0f40 	cmp.w	r2, #12582912	; 0xc00000
 800205c:	e7bc      	b.n	8001fd8 <UART_SetConfig+0xa0>
    switch (clocksource)
 800205e:	2a08      	cmp	r2, #8
 8002060:	d829      	bhi.n	80020b6 <UART_SetConfig+0x17e>
 8002062:	a301      	add	r3, pc, #4	; (adr r3, 8002068 <UART_SetConfig+0x130>)
 8002064:	f853 f022 	ldr.w	pc, [r3, r2, lsl #2]
 8002068:	0800208d 	.word	0x0800208d
 800206c:	080020b1 	.word	0x080020b1
 8002070:	08001fe1 	.word	0x08001fe1
 8002074:	080020b7 	.word	0x080020b7
 8002078:	08002101 	.word	0x08002101
 800207c:	080020b7 	.word	0x080020b7
 8002080:	080020b7 	.word	0x080020b7
 8002084:	080020b7 	.word	0x080020b7
 8002088:	0800210d 	.word	0x0800210d
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 800208c:	f7ff fdc8 	bl	8001c20 <HAL_RCC_GetPCLK1Freq>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 8002090:	6861      	ldr	r1, [r4, #4]
 8002092:	084a      	lsrs	r2, r1, #1
 8002094:	eb02 0340 	add.w	r3, r2, r0, lsl #1
 8002098:	fbb3 f3f1 	udiv	r3, r3, r1
 800209c:	b29b      	uxth	r3, r3
  HAL_StatusTypeDef ret               = HAL_OK;
 800209e:	2000      	movs	r0, #0
    brrtemp = usartdiv & 0xFFF0U;
 80020a0:	f023 020f 	bic.w	r2, r3, #15
    huart->Instance->BRR = brrtemp;
 80020a4:	6821      	ldr	r1, [r4, #0]
    brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80020a6:	f3c3 0342 	ubfx	r3, r3, #1, #3
    huart->Instance->BRR = brrtemp;
 80020aa:	4313      	orrs	r3, r2
 80020ac:	60cb      	str	r3, [r1, #12]
 80020ae:	bd38      	pop	{r3, r4, r5, pc}
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 80020b0:	f7ff fdce 	bl	8001c50 <HAL_RCC_GetPCLK2Freq>
 80020b4:	e7ec      	b.n	8002090 <UART_SetConfig+0x158>
        ret = HAL_ERROR;
 80020b6:	2001      	movs	r0, #1
  uint16_t usartdiv                   = 0x0000U;
 80020b8:	2300      	movs	r3, #0
 80020ba:	e7f1      	b.n	80020a0 <UART_SetConfig+0x168>
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 80020bc:	f7ff fdc8 	bl	8001c50 <HAL_RCC_GetPCLK2Freq>
 80020c0:	6863      	ldr	r3, [r4, #4]
 80020c2:	eb00 0053 	add.w	r0, r0, r3, lsr #1
 80020c6:	fbb0 f0f3 	udiv	r0, r0, r3
 80020ca:	4b19      	ldr	r3, [pc, #100]	; (8002130 <UART_SetConfig+0x1f8>)
 80020cc:	b280      	uxth	r0, r0
 80020ce:	60d8      	str	r0, [r3, #12]
  HAL_StatusTypeDef ret               = HAL_OK;
 80020d0:	2000      	movs	r0, #0
        break;
 80020d2:	bd38      	pop	{r3, r4, r5, pc}
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 80020d4:	6862      	ldr	r2, [r4, #4]
 80020d6:	0853      	lsrs	r3, r2, #1
 80020d8:	f503 03f4 	add.w	r3, r3, #7995392	; 0x7a0000
 80020dc:	f503 5390 	add.w	r3, r3, #4608	; 0x1200
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 80020e0:	fbb3 f3f2 	udiv	r3, r3, r2
 80020e4:	b29b      	uxth	r3, r3
 80020e6:	60eb      	str	r3, [r5, #12]
 80020e8:	e7f2      	b.n	80020d0 <UART_SetConfig+0x198>
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 80020ea:	f7ff fc9f 	bl	8001a2c <HAL_RCC_GetSysClockFreq>
 80020ee:	e017      	b.n	8002120 <UART_SetConfig+0x1e8>
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 80020f0:	6862      	ldr	r2, [r4, #4]
 80020f2:	0853      	lsrs	r3, r2, #1
 80020f4:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 80020f8:	e7f2      	b.n	80020e0 <UART_SetConfig+0x1a8>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80020fa:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80020fe:	d1f4      	bne.n	80020ea <UART_SetConfig+0x1b2>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8002100:	f7ff fc94 	bl	8001a2c <HAL_RCC_GetSysClockFreq>
 8002104:	e7c4      	b.n	8002090 <UART_SetConfig+0x158>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002106:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800210a:	d1f1      	bne.n	80020f0 <UART_SetConfig+0x1b8>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 800210c:	6860      	ldr	r0, [r4, #4]
 800210e:	0843      	lsrs	r3, r0, #1
 8002110:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
 8002114:	e76a      	b.n	8001fec <UART_SetConfig+0xb4>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002116:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800211a:	d0b7      	beq.n	800208c <UART_SetConfig+0x154>
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 800211c:	f7ff fd80 	bl	8001c20 <HAL_RCC_GetPCLK1Freq>
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8002120:	6863      	ldr	r3, [r4, #4]
 8002122:	eb00 0053 	add.w	r0, r0, r3, lsr #1
 8002126:	fbb0 f0f3 	udiv	r0, r0, r3
 800212a:	b280      	uxth	r0, r0
 800212c:	60e8      	str	r0, [r5, #12]
 800212e:	e7cf      	b.n	80020d0 <UART_SetConfig+0x198>
 8002130:	40013800 	.word	0x40013800
 8002134:	08002dc4 	.word	0x08002dc4
 8002138:	40004400 	.word	0x40004400
 800213c:	40004800 	.word	0x40004800
 8002140:	40004c00 	.word	0x40004c00
 8002144:	40005000 	.word	0x40005000

08002148 <UART_AdvFeatureConfig>:
{
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8002148:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800214a:	07da      	lsls	r2, r3, #31
{
 800214c:	b510      	push	{r4, lr}
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800214e:	d506      	bpl.n	800215e <UART_AdvFeatureConfig+0x16>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8002150:	6801      	ldr	r1, [r0, #0]
 8002152:	6a84      	ldr	r4, [r0, #40]	; 0x28
 8002154:	684a      	ldr	r2, [r1, #4]
 8002156:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 800215a:	4322      	orrs	r2, r4
 800215c:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure RX pin active level inversion */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800215e:	079c      	lsls	r4, r3, #30
 8002160:	d506      	bpl.n	8002170 <UART_AdvFeatureConfig+0x28>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8002162:	6801      	ldr	r1, [r0, #0]
 8002164:	6ac4      	ldr	r4, [r0, #44]	; 0x2c
 8002166:	684a      	ldr	r2, [r1, #4]
 8002168:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 800216c:	4322      	orrs	r2, r4
 800216e:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure data inversion */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8002170:	0759      	lsls	r1, r3, #29
 8002172:	d506      	bpl.n	8002182 <UART_AdvFeatureConfig+0x3a>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8002174:	6801      	ldr	r1, [r0, #0]
 8002176:	6b04      	ldr	r4, [r0, #48]	; 0x30
 8002178:	684a      	ldr	r2, [r1, #4]
 800217a:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800217e:	4322      	orrs	r2, r4
 8002180:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure RX/TX pins swap */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8002182:	071a      	lsls	r2, r3, #28
 8002184:	d506      	bpl.n	8002194 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8002186:	6801      	ldr	r1, [r0, #0]
 8002188:	6b44      	ldr	r4, [r0, #52]	; 0x34
 800218a:	684a      	ldr	r2, [r1, #4]
 800218c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002190:	4322      	orrs	r2, r4
 8002192:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8002194:	06dc      	lsls	r4, r3, #27
 8002196:	d506      	bpl.n	80021a6 <UART_AdvFeatureConfig+0x5e>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8002198:	6801      	ldr	r1, [r0, #0]
 800219a:	6b84      	ldr	r4, [r0, #56]	; 0x38
 800219c:	688a      	ldr	r2, [r1, #8]
 800219e:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80021a2:	4322      	orrs	r2, r4
 80021a4:	608a      	str	r2, [r1, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80021a6:	0699      	lsls	r1, r3, #26
 80021a8:	d506      	bpl.n	80021b8 <UART_AdvFeatureConfig+0x70>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80021aa:	6801      	ldr	r1, [r0, #0]
 80021ac:	6bc4      	ldr	r4, [r0, #60]	; 0x3c
 80021ae:	688a      	ldr	r2, [r1, #8]
 80021b0:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80021b4:	4322      	orrs	r2, r4
 80021b6:	608a      	str	r2, [r1, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80021b8:	065a      	lsls	r2, r3, #25
 80021ba:	d50f      	bpl.n	80021dc <UART_AdvFeatureConfig+0x94>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80021bc:	6801      	ldr	r1, [r0, #0]
 80021be:	6c04      	ldr	r4, [r0, #64]	; 0x40
 80021c0:	684a      	ldr	r2, [r1, #4]
 80021c2:	f422 1280 	bic.w	r2, r2, #1048576	; 0x100000
 80021c6:	4322      	orrs	r2, r4
    /* set auto Baudrate detection parameters if detection is enabled */
    if(huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80021c8:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80021cc:	604a      	str	r2, [r1, #4]
    if(huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80021ce:	d105      	bne.n	80021dc <UART_AdvFeatureConfig+0x94>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80021d0:	684a      	ldr	r2, [r1, #4]
 80021d2:	6c44      	ldr	r4, [r0, #68]	; 0x44
 80021d4:	f422 02c0 	bic.w	r2, r2, #6291456	; 0x600000
 80021d8:	4322      	orrs	r2, r4
 80021da:	604a      	str	r2, [r1, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80021dc:	061b      	lsls	r3, r3, #24
 80021de:	d506      	bpl.n	80021ee <UART_AdvFeatureConfig+0xa6>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80021e0:	6802      	ldr	r2, [r0, #0]
 80021e2:	6c81      	ldr	r1, [r0, #72]	; 0x48
 80021e4:	6853      	ldr	r3, [r2, #4]
 80021e6:	f423 2300 	bic.w	r3, r3, #524288	; 0x80000
 80021ea:	430b      	orrs	r3, r1
 80021ec:	6053      	str	r3, [r2, #4]
 80021ee:	bd10      	pop	{r4, pc}

080021f0 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 80021f0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80021f4:	9d06      	ldr	r5, [sp, #24]
 80021f6:	4604      	mov	r4, r0
 80021f8:	460f      	mov	r7, r1
 80021fa:	4616      	mov	r6, r2
 80021fc:	4698      	mov	r8, r3
  /* Wait until flag is set */
  while((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80021fe:	6821      	ldr	r1, [r4, #0]
 8002200:	69ca      	ldr	r2, [r1, #28]
 8002202:	ea37 0302 	bics.w	r3, r7, r2
 8002206:	bf0c      	ite	eq
 8002208:	2201      	moveq	r2, #1
 800220a:	2200      	movne	r2, #0
 800220c:	42b2      	cmp	r2, r6
 800220e:	d002      	beq.n	8002216 <UART_WaitOnFlagUntilTimeout+0x26>
        __HAL_UNLOCK(huart);
        return HAL_TIMEOUT;
      }
    }
  }
  return HAL_OK;
 8002210:	2000      	movs	r0, #0
}
 8002212:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if(Timeout != HAL_MAX_DELAY)
 8002216:	1c6b      	adds	r3, r5, #1
 8002218:	d0f2      	beq.n	8002200 <UART_WaitOnFlagUntilTimeout+0x10>
      if((Timeout == 0U) || ((HAL_GetTick()-Tickstart) > Timeout))
 800221a:	b99d      	cbnz	r5, 8002244 <UART_WaitOnFlagUntilTimeout+0x54>
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800221c:	6823      	ldr	r3, [r4, #0]
 800221e:	681a      	ldr	r2, [r3, #0]
 8002220:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8002224:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002226:	689a      	ldr	r2, [r3, #8]
 8002228:	f022 0201 	bic.w	r2, r2, #1
 800222c:	609a      	str	r2, [r3, #8]
        huart->gState  = HAL_UART_STATE_READY;
 800222e:	2320      	movs	r3, #32
 8002230:	f884 3069 	strb.w	r3, [r4, #105]	; 0x69
        huart->RxState = HAL_UART_STATE_READY;
 8002234:	f884 306a 	strb.w	r3, [r4, #106]	; 0x6a
        __HAL_UNLOCK(huart);
 8002238:	2300      	movs	r3, #0
 800223a:	f884 3068 	strb.w	r3, [r4, #104]	; 0x68
 800223e:	2003      	movs	r0, #3
 8002240:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      if((Timeout == 0U) || ((HAL_GetTick()-Tickstart) > Timeout))
 8002244:	f7fd ffee 	bl	8000224 <HAL_GetTick>
 8002248:	eba0 0008 	sub.w	r0, r0, r8
 800224c:	4285      	cmp	r5, r0
 800224e:	d2d6      	bcs.n	80021fe <UART_WaitOnFlagUntilTimeout+0xe>
 8002250:	e7e4      	b.n	800221c <UART_WaitOnFlagUntilTimeout+0x2c>

08002252 <UART_CheckIdleState>:
{
 8002252:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8002254:	4604      	mov	r4, r0
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002256:	2600      	movs	r6, #0
 8002258:	66c6      	str	r6, [r0, #108]	; 0x6c
  tickstart = HAL_GetTick();
 800225a:	f7fd ffe3 	bl	8000224 <HAL_GetTick>
  if((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800225e:	6823      	ldr	r3, [r4, #0]
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	071a      	lsls	r2, r3, #28
  tickstart = HAL_GetTick();
 8002264:	4605      	mov	r5, r0
  if((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8002266:	d417      	bmi.n	8002298 <UART_CheckIdleState+0x46>
  if((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8002268:	6823      	ldr	r3, [r4, #0]
 800226a:	681b      	ldr	r3, [r3, #0]
 800226c:	075b      	lsls	r3, r3, #29
 800226e:	d50a      	bpl.n	8002286 <UART_CheckIdleState+0x34>
    if(UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8002270:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8002274:	9300      	str	r3, [sp, #0]
 8002276:	2200      	movs	r2, #0
 8002278:	462b      	mov	r3, r5
 800227a:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800227e:	4620      	mov	r0, r4
 8002280:	f7ff ffb6 	bl	80021f0 <UART_WaitOnFlagUntilTimeout>
 8002284:	b9a0      	cbnz	r0, 80022b0 <UART_CheckIdleState+0x5e>
  huart->gState  = HAL_UART_STATE_READY;
 8002286:	2320      	movs	r3, #32
  __HAL_UNLOCK(huart);
 8002288:	2000      	movs	r0, #0
  huart->gState  = HAL_UART_STATE_READY;
 800228a:	f884 3069 	strb.w	r3, [r4, #105]	; 0x69
  __HAL_UNLOCK(huart);
 800228e:	f884 0068 	strb.w	r0, [r4, #104]	; 0x68
  huart->RxState = HAL_UART_STATE_READY;
 8002292:	f884 306a 	strb.w	r3, [r4, #106]	; 0x6a
  return HAL_OK;
 8002296:	e00c      	b.n	80022b2 <UART_CheckIdleState+0x60>
    if(UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8002298:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800229c:	9300      	str	r3, [sp, #0]
 800229e:	4632      	mov	r2, r6
 80022a0:	4603      	mov	r3, r0
 80022a2:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80022a6:	4620      	mov	r0, r4
 80022a8:	f7ff ffa2 	bl	80021f0 <UART_WaitOnFlagUntilTimeout>
 80022ac:	2800      	cmp	r0, #0
 80022ae:	d0db      	beq.n	8002268 <UART_CheckIdleState+0x16>
      return HAL_TIMEOUT;
 80022b0:	2003      	movs	r0, #3
}
 80022b2:	b002      	add	sp, #8
 80022b4:	bd70      	pop	{r4, r5, r6, pc}

080022b6 <HAL_UART_Init>:
{
 80022b6:	b510      	push	{r4, lr}
  if(huart == NULL)
 80022b8:	4604      	mov	r4, r0
 80022ba:	b360      	cbz	r0, 8002316 <HAL_UART_Init+0x60>
  if(huart->gState == HAL_UART_STATE_RESET)
 80022bc:	f890 3069 	ldrb.w	r3, [r0, #105]	; 0x69
 80022c0:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 80022c4:	b91b      	cbnz	r3, 80022ce <HAL_UART_Init+0x18>
    huart->Lock = HAL_UNLOCKED;
 80022c6:	f880 2068 	strb.w	r2, [r0, #104]	; 0x68
    HAL_UART_MspInit(huart);
 80022ca:	f000 fc71 	bl	8002bb0 <HAL_UART_MspInit>
  __HAL_UART_DISABLE(huart);
 80022ce:	6822      	ldr	r2, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 80022d0:	2324      	movs	r3, #36	; 0x24
 80022d2:	f884 3069 	strb.w	r3, [r4, #105]	; 0x69
  __HAL_UART_DISABLE(huart);
 80022d6:	6813      	ldr	r3, [r2, #0]
 80022d8:	f023 0301 	bic.w	r3, r3, #1
 80022dc:	6013      	str	r3, [r2, #0]
  if (UART_SetConfig(huart) == HAL_ERROR)
 80022de:	4620      	mov	r0, r4
 80022e0:	f7ff fe2a 	bl	8001f38 <UART_SetConfig>
 80022e4:	2801      	cmp	r0, #1
 80022e6:	d016      	beq.n	8002316 <HAL_UART_Init+0x60>
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80022e8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80022ea:	b113      	cbz	r3, 80022f2 <HAL_UART_Init+0x3c>
    UART_AdvFeatureConfig(huart);
 80022ec:	4620      	mov	r0, r4
 80022ee:	f7ff ff2b 	bl	8002148 <UART_AdvFeatureConfig>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80022f2:	6823      	ldr	r3, [r4, #0]
 80022f4:	685a      	ldr	r2, [r3, #4]
 80022f6:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80022fa:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80022fc:	689a      	ldr	r2, [r3, #8]
 80022fe:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002302:	609a      	str	r2, [r3, #8]
  __HAL_UART_ENABLE(huart);
 8002304:	681a      	ldr	r2, [r3, #0]
 8002306:	f042 0201 	orr.w	r2, r2, #1
  return (UART_CheckIdleState(huart));
 800230a:	4620      	mov	r0, r4
  __HAL_UART_ENABLE(huart);
 800230c:	601a      	str	r2, [r3, #0]
}
 800230e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  return (UART_CheckIdleState(huart));
 8002312:	f7ff bf9e 	b.w	8002252 <UART_CheckIdleState>
}
 8002316:	2001      	movs	r0, #1
 8002318:	bd10      	pop	{r4, pc}
	...

0800231c <debug_outbyte>:

#if DEBUG 

void debug_outbyte(char c)
{
	while(!(DEBUG_UART_HANDLE.Instance->ISR & (1 << 7))) {};
 800231c:	4b03      	ldr	r3, [pc, #12]	; (800232c <debug_outbyte+0x10>)
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	69da      	ldr	r2, [r3, #28]
 8002322:	0612      	lsls	r2, r2, #24
 8002324:	d5fc      	bpl.n	8002320 <debug_outbyte+0x4>
	DEBUG_UART_HANDLE.Instance->TDR = c;
 8002326:	b280      	uxth	r0, r0
 8002328:	8518      	strh	r0, [r3, #40]	; 0x28
 800232a:	4770      	bx	lr
 800232c:	200000e4 	.word	0x200000e4

08002330 <printchar>:

#define putchar_s(c) debug_outbyte(c)

static void printchar(char **str, int c)
{
	if (str) {
 8002330:	b128      	cbz	r0, 800233e <printchar+0xe>
		**str = c;
 8002332:	6803      	ldr	r3, [r0, #0]
 8002334:	7019      	strb	r1, [r3, #0]
		++(*str);
 8002336:	6803      	ldr	r3, [r0, #0]
 8002338:	3301      	adds	r3, #1
 800233a:	6003      	str	r3, [r0, #0]
 800233c:	4770      	bx	lr
	}
	else 
		putchar_s(c);
 800233e:	b2c8      	uxtb	r0, r1
 8002340:	f7ff bfec 	b.w	800231c <debug_outbyte>

08002344 <prints>:

#define PAD_RIGHT 1
#define PAD_ZERO 2

static int prints(char **out, const char *string, int width, int pad)
{
 8002344:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	register int pc = 0, padchar = ' ';

	if (width > 0) {
 8002348:	1e14      	subs	r4, r2, #0
{
 800234a:	4680      	mov	r8, r0
 800234c:	460d      	mov	r5, r1
	if (width > 0) {
 800234e:	dd27      	ble.n	80023a0 <prints+0x5c>
 8002350:	460a      	mov	r2, r1
 8002352:	1b50      	subs	r0, r2, r5
		register int len = 0;
		register const char *ptr;
		for (ptr = string; *ptr; ++ptr) ++len;
 8002354:	f812 1b01 	ldrb.w	r1, [r2], #1
 8002358:	2900      	cmp	r1, #0
 800235a:	d1fa      	bne.n	8002352 <prints+0xe>
		if (len >= width) width = 0;
 800235c:	4284      	cmp	r4, r0
		else width -= len;
 800235e:	bfcc      	ite	gt
 8002360:	1a24      	subgt	r4, r4, r0
		if (len >= width) width = 0;
 8002362:	460c      	movle	r4, r1
		if (pad & PAD_ZERO) padchar = '0';
 8002364:	f013 0f02 	tst.w	r3, #2
 8002368:	bf0c      	ite	eq
 800236a:	2720      	moveq	r7, #32
 800236c:	2730      	movne	r7, #48	; 0x30
	}
	if (!(pad & PAD_RIGHT)) {
 800236e:	07db      	lsls	r3, r3, #31
 8002370:	d41e      	bmi.n	80023b0 <prints+0x6c>
 8002372:	4626      	mov	r6, r4
		for ( ; width > 0; --width) {
 8002374:	2e00      	cmp	r6, #0
 8002376:	dc15      	bgt.n	80023a4 <prints+0x60>
 8002378:	ea24 73e4 	bic.w	r3, r4, r4, asr #31
 800237c:	1ae4      	subs	r4, r4, r3
 800237e:	1b5e      	subs	r6, r3, r5
 8002380:	eb06 0905 	add.w	r9, r6, r5
			printchar (out, padchar);
			++pc;
		}
	}
	for ( ; *string ; ++string) {
 8002384:	f815 1b01 	ldrb.w	r1, [r5], #1
 8002388:	b9a1      	cbnz	r1, 80023b4 <prints+0x70>
 800238a:	4625      	mov	r5, r4
		printchar (out, *string);
		++pc;
	}
	for ( ; width > 0; --width) {
 800238c:	2d00      	cmp	r5, #0
 800238e:	dc15      	bgt.n	80023bc <prints+0x78>
		printchar (out, padchar);
		++pc;
	}

	return pc;
}
 8002390:	2c00      	cmp	r4, #0
 8002392:	bfac      	ite	ge
 8002394:	eb09 0004 	addge.w	r0, r9, r4
 8002398:	f109 0000 	addlt.w	r0, r9, #0
 800239c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	register int pc = 0, padchar = ' ';
 80023a0:	2720      	movs	r7, #32
 80023a2:	e7e4      	b.n	800236e <prints+0x2a>
			printchar (out, padchar);
 80023a4:	4639      	mov	r1, r7
 80023a6:	4640      	mov	r0, r8
 80023a8:	f7ff ffc2 	bl	8002330 <printchar>
		for ( ; width > 0; --width) {
 80023ac:	3e01      	subs	r6, #1
 80023ae:	e7e1      	b.n	8002374 <prints+0x30>
	register int pc = 0, padchar = ' ';
 80023b0:	2300      	movs	r3, #0
 80023b2:	e7e4      	b.n	800237e <prints+0x3a>
		printchar (out, *string);
 80023b4:	4640      	mov	r0, r8
 80023b6:	f7ff ffbb 	bl	8002330 <printchar>
 80023ba:	e7e1      	b.n	8002380 <prints+0x3c>
		printchar (out, padchar);
 80023bc:	4639      	mov	r1, r7
 80023be:	4640      	mov	r0, r8
 80023c0:	f7ff ffb6 	bl	8002330 <printchar>
	for ( ; width > 0; --width) {
 80023c4:	3d01      	subs	r5, #1
 80023c6:	e7e1      	b.n	800238c <prints+0x48>

080023c8 <printi>:

/* the following should be enough for 32 bit int */
#define PRINT_BUF_LEN 12

static int printi(char **out, int i, int b, int sg, int width, int pad, int letbase)
{
 80023c8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80023cc:	b085      	sub	sp, #20
 80023ce:	4681      	mov	r9, r0
 80023d0:	461d      	mov	r5, r3
 80023d2:	9f0c      	ldr	r7, [sp, #48]	; 0x30
 80023d4:	f8dd 8034 	ldr.w	r8, [sp, #52]	; 0x34
	char print_buf[PRINT_BUF_LEN];
	register char *s;
	register int t, neg = 0, pc = 0;
	register unsigned int u = i;
 80023d8:	460c      	mov	r4, r1

	if (i == 0) {
 80023da:	b961      	cbnz	r1, 80023f6 <printi+0x2e>
		print_buf[0] = '0';
 80023dc:	2330      	movs	r3, #48	; 0x30
 80023de:	f88d 3004 	strb.w	r3, [sp, #4]
		print_buf[1] = '\0';
 80023e2:	f88d 1005 	strb.w	r1, [sp, #5]
		return prints (out, print_buf, width, pad);
 80023e6:	4643      	mov	r3, r8
 80023e8:	463a      	mov	r2, r7
 80023ea:	a901      	add	r1, sp, #4
 80023ec:	f7ff ffaa 	bl	8002344 <prints>
			*--s = '-';
		}
	}

	return pc + prints (out, s, width, pad);
}
 80023f0:	b005      	add	sp, #20
 80023f2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	if (sg && b == 10 && i < 0) {
 80023f6:	b12b      	cbz	r3, 8002404 <printi+0x3c>
 80023f8:	2a0a      	cmp	r2, #10
 80023fa:	d11c      	bne.n	8002436 <printi+0x6e>
 80023fc:	2900      	cmp	r1, #0
 80023fe:	da1a      	bge.n	8002436 <printi+0x6e>
		u = -i;
 8002400:	424c      	negs	r4, r1
		neg = 1;
 8002402:	2501      	movs	r5, #1
	*s = '\0';
 8002404:	ae04      	add	r6, sp, #16
 8002406:	2300      	movs	r3, #0
 8002408:	f806 3d01 	strb.w	r3, [r6, #-1]!
			t += letbase - '0' - 10;
 800240c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800240e:	3b3a      	subs	r3, #58	; 0x3a
	while (u) {
 8002410:	b99c      	cbnz	r4, 800243a <printi+0x72>
	if (neg) {
 8002412:	b145      	cbz	r5, 8002426 <printi+0x5e>
		if( width && (pad & PAD_ZERO) ) {
 8002414:	b1ef      	cbz	r7, 8002452 <printi+0x8a>
 8002416:	f018 0f02 	tst.w	r8, #2
 800241a:	d01a      	beq.n	8002452 <printi+0x8a>
			printchar (out, '-');
 800241c:	212d      	movs	r1, #45	; 0x2d
 800241e:	4648      	mov	r0, r9
 8002420:	f7ff ff86 	bl	8002330 <printchar>
			--width;
 8002424:	3f01      	subs	r7, #1
	return pc + prints (out, s, width, pad);
 8002426:	4643      	mov	r3, r8
 8002428:	463a      	mov	r2, r7
 800242a:	4631      	mov	r1, r6
 800242c:	4648      	mov	r0, r9
 800242e:	f7ff ff89 	bl	8002344 <prints>
 8002432:	4428      	add	r0, r5
 8002434:	e7dc      	b.n	80023f0 <printi+0x28>
	register int t, neg = 0, pc = 0;
 8002436:	2500      	movs	r5, #0
 8002438:	e7e4      	b.n	8002404 <printi+0x3c>
		t = u % b;
 800243a:	fbb4 f1f2 	udiv	r1, r4, r2
 800243e:	fb02 4411 	mls	r4, r2, r1, r4
		if( t >= 10 )
 8002442:	2c09      	cmp	r4, #9
			t += letbase - '0' - 10;
 8002444:	bfc8      	it	gt
 8002446:	18e4      	addgt	r4, r4, r3
		*--s = t + '0';
 8002448:	3430      	adds	r4, #48	; 0x30
 800244a:	f806 4d01 	strb.w	r4, [r6, #-1]!
		u /= b;
 800244e:	460c      	mov	r4, r1
 8002450:	e7de      	b.n	8002410 <printi+0x48>
			*--s = '-';
 8002452:	232d      	movs	r3, #45	; 0x2d
 8002454:	f806 3c01 	strb.w	r3, [r6, #-1]
	register int t, neg = 0, pc = 0;
 8002458:	2500      	movs	r5, #0
			*--s = '-';
 800245a:	3e01      	subs	r6, #1
 800245c:	e7e3      	b.n	8002426 <printi+0x5e>
	...

08002460 <print>:

static int print(char **out, int *varg)
{
 8002460:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	register int width, pad;
	register int pc = 0;
	register char *format = (char *)(*varg++);
 8002464:	680e      	ldr	r6, [r1, #0]
				width *= 10;
				width += *format - '0';
			}
			if( *format == 's' ) {
				register char *s = *((char **)varg++);
				pc += prints (out, s?s:"(null)", width, pad);
 8002466:	f8df 9108 	ldr.w	r9, [pc, #264]	; 8002570 <print+0x110>
{
 800246a:	b086      	sub	sp, #24
 800246c:	4607      	mov	r7, r0
	register char *format = (char *)(*varg++);
 800246e:	1d0c      	adds	r4, r1, #4
	register int pc = 0;
 8002470:	2500      	movs	r5, #0
				width *= 10;
 8002472:	f04f 080a 	mov.w	r8, #10
	for (; *format != 0; ++format) {
 8002476:	7833      	ldrb	r3, [r6, #0]
 8002478:	b123      	cbz	r3, 8002484 <print+0x24>
		if (*format == '%') {
 800247a:	2b25      	cmp	r3, #37	; 0x25
 800247c:	d16d      	bne.n	800255a <print+0xfa>
			if (*format == '\0') break;
 800247e:	7873      	ldrb	r3, [r6, #1]
			++format;
 8002480:	1c71      	adds	r1, r6, #1
			if (*format == '\0') break;
 8002482:	b92b      	cbnz	r3, 8002490 <print+0x30>
		out:
			printchar (out, *format);
			++pc;
		}
	}
	if (out) **out = '\0';
 8002484:	2f00      	cmp	r7, #0
 8002486:	d16e      	bne.n	8002566 <print+0x106>
	return pc;
}
 8002488:	4628      	mov	r0, r5
 800248a:	b006      	add	sp, #24
 800248c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
			if (*format == '%') goto out;
 8002490:	2b25      	cmp	r3, #37	; 0x25
 8002492:	d061      	beq.n	8002558 <print+0xf8>
			if (*format == '-') {
 8002494:	2b2d      	cmp	r3, #45	; 0x2d
				++format;
 8002496:	bf06      	itte	eq
 8002498:	1cb1      	addeq	r1, r6, #2
				pad = PAD_RIGHT;
 800249a:	2301      	moveq	r3, #1
			width = pad = 0;
 800249c:	2300      	movne	r3, #0
			while (*format == '0') {
 800249e:	780a      	ldrb	r2, [r1, #0]
 80024a0:	2a30      	cmp	r2, #48	; 0x30
 80024a2:	f101 0001 	add.w	r0, r1, #1
 80024a6:	d017      	beq.n	80024d8 <print+0x78>
 80024a8:	2200      	movs	r2, #0
			for ( ; *format >= '0' && *format <= '9'; ++format) {
 80024aa:	7808      	ldrb	r0, [r1, #0]
 80024ac:	f1a0 0e30 	sub.w	lr, r0, #48	; 0x30
 80024b0:	fa5f fc8e 	uxtb.w	ip, lr
 80024b4:	f1bc 0f09 	cmp.w	ip, #9
 80024b8:	460e      	mov	r6, r1
 80024ba:	f101 0101 	add.w	r1, r1, #1
 80024be:	d90f      	bls.n	80024e0 <print+0x80>
			if( *format == 's' ) {
 80024c0:	2873      	cmp	r0, #115	; 0x73
 80024c2:	d110      	bne.n	80024e6 <print+0x86>
				register char *s = *((char **)varg++);
 80024c4:	6821      	ldr	r1, [r4, #0]
 80024c6:	f104 0a04 	add.w	sl, r4, #4
				pc += prints (out, s?s:"(null)", width, pad);
 80024ca:	2900      	cmp	r1, #0
 80024cc:	bf08      	it	eq
 80024ce:	4649      	moveq	r1, r9
				pc += prints (out, scr, width, pad);
 80024d0:	4638      	mov	r0, r7
 80024d2:	f7ff ff37 	bl	8002344 <prints>
 80024d6:	e014      	b.n	8002502 <print+0xa2>
				pad |= PAD_ZERO;
 80024d8:	f043 0302 	orr.w	r3, r3, #2
 80024dc:	4601      	mov	r1, r0
 80024de:	e7de      	b.n	800249e <print+0x3e>
				width += *format - '0';
 80024e0:	fb08 e202 	mla	r2, r8, r2, lr
 80024e4:	e7e1      	b.n	80024aa <print+0x4a>
			if( *format == 'd' ) {
 80024e6:	2864      	cmp	r0, #100	; 0x64
 80024e8:	d10f      	bne.n	800250a <print+0xaa>
				pc += printi (out, *varg++, 10, 1, width, pad, 'a');
 80024ea:	2161      	movs	r1, #97	; 0x61
 80024ec:	e88d 000c 	stmia.w	sp, {r2, r3}
 80024f0:	f104 0a04 	add.w	sl, r4, #4
 80024f4:	9102      	str	r1, [sp, #8]
 80024f6:	2301      	movs	r3, #1
 80024f8:	220a      	movs	r2, #10
 80024fa:	6821      	ldr	r1, [r4, #0]
 80024fc:	4638      	mov	r0, r7
 80024fe:	f7ff ff63 	bl	80023c8 <printi>
 8002502:	4405      	add	r5, r0
 8002504:	4654      	mov	r4, sl
	for (; *format != 0; ++format) {
 8002506:	3601      	adds	r6, #1
 8002508:	e7b5      	b.n	8002476 <print+0x16>
			if( *format == 'x' ) {
 800250a:	2878      	cmp	r0, #120	; 0x78
 800250c:	d108      	bne.n	8002520 <print+0xc0>
				pc += printi (out, *varg++, 16, 0, width, pad, 'a');
 800250e:	f104 0a04 	add.w	sl, r4, #4
 8002512:	2161      	movs	r1, #97	; 0x61
				pc += printi (out, *varg++, 16, 0, width, pad, 'A');
 8002514:	e88d 000c 	stmia.w	sp, {r2, r3}
 8002518:	9102      	str	r1, [sp, #8]
 800251a:	2300      	movs	r3, #0
 800251c:	2210      	movs	r2, #16
 800251e:	e7ec      	b.n	80024fa <print+0x9a>
			if( *format == 'X' ) {
 8002520:	2858      	cmp	r0, #88	; 0x58
 8002522:	d103      	bne.n	800252c <print+0xcc>
				pc += printi (out, *varg++, 16, 0, width, pad, 'A');
 8002524:	f104 0a04 	add.w	sl, r4, #4
 8002528:	2141      	movs	r1, #65	; 0x41
 800252a:	e7f3      	b.n	8002514 <print+0xb4>
			if( *format == 'u' ) {
 800252c:	2875      	cmp	r0, #117	; 0x75
 800252e:	d107      	bne.n	8002540 <print+0xe0>
				pc += printi (out, *varg++, 10, 0, width, pad, 'a');
 8002530:	2161      	movs	r1, #97	; 0x61
 8002532:	e88d 000c 	stmia.w	sp, {r2, r3}
 8002536:	f104 0a04 	add.w	sl, r4, #4
 800253a:	9102      	str	r1, [sp, #8]
 800253c:	2300      	movs	r3, #0
 800253e:	e7db      	b.n	80024f8 <print+0x98>
			if( *format == 'c' ) {
 8002540:	2863      	cmp	r0, #99	; 0x63
 8002542:	d1e0      	bne.n	8002506 <print+0xa6>
				scr[0] = *varg++;
 8002544:	6821      	ldr	r1, [r4, #0]
 8002546:	f88d 1014 	strb.w	r1, [sp, #20]
				scr[1] = '\0';
 800254a:	2100      	movs	r1, #0
 800254c:	f88d 1015 	strb.w	r1, [sp, #21]
				scr[0] = *varg++;
 8002550:	f104 0a04 	add.w	sl, r4, #4
				pc += prints (out, scr, width, pad);
 8002554:	a905      	add	r1, sp, #20
 8002556:	e7bb      	b.n	80024d0 <print+0x70>
			++format;
 8002558:	460e      	mov	r6, r1
			printchar (out, *format);
 800255a:	7831      	ldrb	r1, [r6, #0]
 800255c:	4638      	mov	r0, r7
 800255e:	f7ff fee7 	bl	8002330 <printchar>
			++pc;
 8002562:	3501      	adds	r5, #1
 8002564:	e7cf      	b.n	8002506 <print+0xa6>
	if (out) **out = '\0';
 8002566:	683b      	ldr	r3, [r7, #0]
 8002568:	2200      	movs	r2, #0
 800256a:	701a      	strb	r2, [r3, #0]
	return pc;
 800256c:	e78c      	b.n	8002488 <print+0x28>
 800256e:	bf00      	nop
 8002570:	08002dc8 	.word	0x08002dc8

08002574 <debug_print>:
{
 8002574:	b508      	push	{r3, lr}
 8002576:	1e41      	subs	r1, r0, #1
	while(*str) {
 8002578:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800257c:	b900      	cbnz	r0, 8002580 <debug_print+0xc>
}
 800257e:	bd08      	pop	{r3, pc}
		debug_outbyte(*str);
 8002580:	f7ff fecc 	bl	800231c <debug_outbyte>
 8002584:	e7f8      	b.n	8002578 <debug_print+0x4>

08002586 <debug_printf>:

/* assuming sizeof(void *) == sizeof(int) */

int debug_printf(const char *format, ...)
{
 8002586:	b40f      	push	{r0, r1, r2, r3}
 8002588:	b508      	push	{r3, lr}
	register int *varg = (int *)(&format);
	return print(0, varg);
 800258a:	2000      	movs	r0, #0
 800258c:	a902      	add	r1, sp, #8
 800258e:	f7ff ff67 	bl	8002460 <print>
}
 8002592:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8002596:	b004      	add	sp, #16
 8002598:	4770      	bx	lr

0800259a <DS1307_GetDateTime>:
/**
 * @brief	Get date time from array of DS1307 registers values from 0x00 to 0x06
 */
void DS1307_GetDateTime(const uint8_t *pRegVals, DateTime_t *pDateTime)
{
	if(pRegVals == 0 || pDateTime == 0) {
 800259a:	b3b8      	cbz	r0, 800260c <DS1307_GetDateTime+0x72>
 800259c:	b3b1      	cbz	r1, 800260c <DS1307_GetDateTime+0x72>
		return;
	}

	pDateTime->sec = bcd2dec(pRegVals[0]);
 800259e:	7803      	ldrb	r3, [r0, #0]
	return (bcd & 0x0F) + (10 * ((bcd >> 4) & 0x0F));
 80025a0:	091a      	lsrs	r2, r3, #4
 80025a2:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 80025a6:	f003 030f 	and.w	r3, r3, #15
 80025aa:	eb03 0342 	add.w	r3, r3, r2, lsl #1
	pDateTime->sec = bcd2dec(pRegVals[0]);
 80025ae:	700b      	strb	r3, [r1, #0]
	pDateTime->min = bcd2dec(pRegVals[1]);
 80025b0:	7843      	ldrb	r3, [r0, #1]
	return (bcd & 0x0F) + (10 * ((bcd >> 4) & 0x0F));
 80025b2:	091a      	lsrs	r2, r3, #4
 80025b4:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 80025b8:	f003 030f 	and.w	r3, r3, #15
 80025bc:	eb03 0342 	add.w	r3, r3, r2, lsl #1
	pDateTime->min = bcd2dec(pRegVals[1]);
 80025c0:	704b      	strb	r3, [r1, #1]
	pDateTime->hour= bcd2dec(pRegVals[2]);
 80025c2:	7883      	ldrb	r3, [r0, #2]
	return (bcd & 0x0F) + (10 * ((bcd >> 4) & 0x0F));
 80025c4:	091a      	lsrs	r2, r3, #4
 80025c6:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 80025ca:	f003 030f 	and.w	r3, r3, #15
 80025ce:	eb03 0342 	add.w	r3, r3, r2, lsl #1
	pDateTime->hour= bcd2dec(pRegVals[2]);
 80025d2:	708b      	strb	r3, [r1, #2]

	pDateTime->date= bcd2dec(pRegVals[4]);
 80025d4:	7903      	ldrb	r3, [r0, #4]
	return (bcd & 0x0F) + (10 * ((bcd >> 4) & 0x0F));
 80025d6:	091a      	lsrs	r2, r3, #4
 80025d8:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 80025dc:	f003 030f 	and.w	r3, r3, #15
 80025e0:	eb03 0342 	add.w	r3, r3, r2, lsl #1
	pDateTime->date= bcd2dec(pRegVals[4]);
 80025e4:	70cb      	strb	r3, [r1, #3]
	pDateTime->month=bcd2dec(pRegVals[5]);
 80025e6:	7943      	ldrb	r3, [r0, #5]
	return (bcd & 0x0F) + (10 * ((bcd >> 4) & 0x0F));
 80025e8:	091a      	lsrs	r2, r3, #4
 80025ea:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 80025ee:	f003 030f 	and.w	r3, r3, #15
 80025f2:	eb03 0342 	add.w	r3, r3, r2, lsl #1
	pDateTime->month=bcd2dec(pRegVals[5]);
 80025f6:	710b      	strb	r3, [r1, #4]
	pDateTime->year= bcd2dec(pRegVals[6]);
 80025f8:	7983      	ldrb	r3, [r0, #6]
	return (bcd & 0x0F) + (10 * ((bcd >> 4) & 0x0F));
 80025fa:	091a      	lsrs	r2, r3, #4
 80025fc:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 8002600:	f003 030f 	and.w	r3, r3, #15
 8002604:	eb03 0342 	add.w	r3, r3, r2, lsl #1
	pDateTime->year= bcd2dec(pRegVals[6]);
 8002608:	b2db      	uxtb	r3, r3
 800260a:	80cb      	strh	r3, [r1, #6]
 800260c:	4770      	bx	lr
	...

08002610 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002610:	b530      	push	{r4, r5, lr}
 8002612:	b09f      	sub	sp, #124	; 0x7c
	RCC_ClkInitTypeDef RCC_ClkInitStruct;
	RCC_PeriphCLKInitTypeDef PeriphClkInit;

	/**Initializes the CPU, AHB and APB busses clocks
	*/
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE;
 8002614:	2303      	movs	r3, #3
 8002616:	9305      	str	r3, [sp, #20]
	RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8002618:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 800261c:	9306      	str	r3, [sp, #24]
	RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 800261e:	2300      	movs	r3, #0
 8002620:	9307      	str	r3, [sp, #28]
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
	RCC_OscInitStruct.HSICalibrationValue = 16;
 8002622:	2310      	movs	r3, #16
 8002624:	930a      	str	r3, [sp, #40]	; 0x28
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8002626:	f44f 3380 	mov.w	r3, #65536	; 0x10000
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800262a:	2401      	movs	r4, #1
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800262c:	2502      	movs	r5, #2
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800262e:	930d      	str	r3, [sp, #52]	; 0x34
	RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002630:	a805      	add	r0, sp, #20
	RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
 8002632:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002636:	9409      	str	r4, [sp, #36]	; 0x24
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002638:	950c      	str	r5, [sp, #48]	; 0x30
	RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
 800263a:	930e      	str	r3, [sp, #56]	; 0x38
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800263c:	f7fe ff84 	bl	8001548 <HAL_RCC_OscConfig>
 8002640:	b100      	cbz	r0, 8002644 <SystemClock_Config+0x34>
 8002642:	e7fe      	b.n	8002642 <SystemClock_Config+0x32>
		_Error_Handler(__FILE__, __LINE__);
	}

	/**Initializes the CPU, AHB and APB busses clocks
	*/
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002644:	230f      	movs	r3, #15
							  	  |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002646:	e88d 0028 	stmia.w	sp, {r3, r5}
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800264a:	9002      	str	r0, [sp, #8]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800264c:	f44f 6380 	mov.w	r3, #1024	; 0x400
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002650:	9004      	str	r0, [sp, #16]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8002652:	4621      	mov	r1, r4
 8002654:	4668      	mov	r0, sp
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8002656:	9303      	str	r3, [sp, #12]
	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8002658:	f7ff fa1a 	bl	8001a90 <HAL_RCC_ClockConfig>
 800265c:	b100      	cbz	r0, 8002660 <SystemClock_Config+0x50>
 800265e:	e7fe      	b.n	800265e <SystemClock_Config+0x4e>
	{
		_Error_Handler(__FILE__, __LINE__);
	}

	PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB|RCC_PERIPHCLK_USART1
 8002660:	4b0f      	ldr	r3, [pc, #60]	; (80026a0 <SystemClock_Config+0x90>)
 8002662:	930f      	str	r3, [sp, #60]	; 0x3c
							  |RCC_PERIPHCLK_I2C1;
	PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8002664:	9011      	str	r0, [sp, #68]	; 0x44
	PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_HSI;
 8002666:	9016      	str	r0, [sp, #88]	; 0x58
	PeriphClkInit.USBClockSelection = RCC_USBCLKSOURCE_PLL;
 8002668:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
	if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800266c:	a80f      	add	r0, sp, #60	; 0x3c
	PeriphClkInit.USBClockSelection = RCC_USBCLKSOURCE_PLL;
 800266e:	931d      	str	r3, [sp, #116]	; 0x74
	if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002670:	f7ff fb06 	bl	8001c80 <HAL_RCCEx_PeriphCLKConfig>
 8002674:	4604      	mov	r4, r0
 8002676:	b100      	cbz	r0, 800267a <SystemClock_Config+0x6a>
 8002678:	e7fe      	b.n	8002678 <SystemClock_Config+0x68>
		_Error_Handler(__FILE__, __LINE__);
	}

	/**Configure the Systick interrupt time
	*/
	HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/1000);
 800267a:	f7ff facb 	bl	8001c14 <HAL_RCC_GetHCLKFreq>
 800267e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002682:	fbb0 f0f3 	udiv	r0, r0, r3
 8002686:	f7fd fe35 	bl	80002f4 <HAL_SYSTICK_Config>

	/**Configure the Systick
	*/
	HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 800268a:	2004      	movs	r0, #4
 800268c:	f7fd fe48 	bl	8000320 <HAL_SYSTICK_CLKSourceConfig>

	/* SysTick_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 8002690:	4622      	mov	r2, r4
 8002692:	4621      	mov	r1, r4
 8002694:	f04f 30ff 	mov.w	r0, #4294967295
 8002698:	f7fd fdec 	bl	8000274 <HAL_NVIC_SetPriority>
}
 800269c:	b01f      	add	sp, #124	; 0x7c
 800269e:	bd30      	pop	{r4, r5, pc}
 80026a0:	00020021 	.word	0x00020021

080026a4 <main>:
{
 80026a4:	e92d 4880 	stmdb	sp!, {r7, fp, lr}
{

  GPIO_InitTypeDef GPIO_InitStruct;

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80026a8:	4c67      	ldr	r4, [pc, #412]	; (8002848 <main+0x1a4>)
{
 80026aa:	b091      	sub	sp, #68	; 0x44
	HAL_Init();
 80026ac:	f7fd fda0 	bl	80001f0 <HAL_Init>
	SystemClock_Config();
 80026b0:	f7ff ffae 	bl	8002610 <SystemClock_Config>
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80026b4:	6963      	ldr	r3, [r4, #20]
  __HAL_RCC_GPIOF_CLK_ENABLE();
  __HAL_RCC_GPIOA_CLK_ENABLE();
  __HAL_RCC_GPIOB_CLK_ENABLE();

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, CS_I2C_SPI_Pin|LD4_Pin|LD3_Pin|LD5_Pin 
 80026b6:	4865      	ldr	r0, [pc, #404]	; (800284c <main+0x1a8>)
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80026b8:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80026bc:	6163      	str	r3, [r4, #20]
 80026be:	6963      	ldr	r3, [r4, #20]
 80026c0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80026c4:	9306      	str	r3, [sp, #24]
 80026c6:	9b06      	ldr	r3, [sp, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80026c8:	6963      	ldr	r3, [r4, #20]
 80026ca:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80026ce:	6163      	str	r3, [r4, #20]
 80026d0:	6963      	ldr	r3, [r4, #20]
 80026d2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80026d6:	9307      	str	r3, [sp, #28]
 80026d8:	9b07      	ldr	r3, [sp, #28]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80026da:	6963      	ldr	r3, [r4, #20]
 80026dc:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80026e0:	6163      	str	r3, [r4, #20]
 80026e2:	6963      	ldr	r3, [r4, #20]
 80026e4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80026e8:	9308      	str	r3, [sp, #32]
 80026ea:	9b08      	ldr	r3, [sp, #32]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80026ec:	6963      	ldr	r3, [r4, #20]
 80026ee:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80026f2:	6163      	str	r3, [r4, #20]
 80026f4:	6963      	ldr	r3, [r4, #20]
 80026f6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80026fa:	9309      	str	r3, [sp, #36]	; 0x24
 80026fc:	9b09      	ldr	r3, [sp, #36]	; 0x24
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80026fe:	6963      	ldr	r3, [r4, #20]
 8002700:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002704:	6163      	str	r3, [r4, #20]
 8002706:	6963      	ldr	r3, [r4, #20]
 8002708:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
  HAL_GPIO_WritePin(GPIOE, CS_I2C_SPI_Pin|LD4_Pin|LD3_Pin|LD5_Pin 
 800270c:	2200      	movs	r2, #0
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800270e:	930a      	str	r3, [sp, #40]	; 0x28
  HAL_GPIO_WritePin(GPIOE, CS_I2C_SPI_Pin|LD4_Pin|LD3_Pin|LD5_Pin 
 8002710:	f64f 7108 	movw	r1, #65288	; 0xff08
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002714:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  HAL_GPIO_WritePin(GPIOE, CS_I2C_SPI_Pin|LD4_Pin|LD3_Pin|LD5_Pin 
 8002716:	f7fd ffcd 	bl	80006b4 <HAL_GPIO_WritePin>
                          |LD7_Pin|LD9_Pin|LD10_Pin|LD8_Pin 
                          |LD6_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : DRDY_Pin MEMS_INT3_Pin MEMS_INT4_Pin MEMS_INT1_Pin 
                           MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = DRDY_Pin|MEMS_INT3_Pin|MEMS_INT4_Pin|MEMS_INT1_Pin 
 800271a:	2337      	movs	r3, #55	; 0x37
                          |MEMS_INT2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800271c:	2500      	movs	r5, #0
  GPIO_InitStruct.Pin = DRDY_Pin|MEMS_INT3_Pin|MEMS_INT4_Pin|MEMS_INT1_Pin 
 800271e:	930b      	str	r3, [sp, #44]	; 0x2c
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002720:	a90b      	add	r1, sp, #44	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8002722:	4b4b      	ldr	r3, [pc, #300]	; (8002850 <main+0x1ac>)
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002724:	4849      	ldr	r0, [pc, #292]	; (800284c <main+0x1a8>)
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8002726:	930c      	str	r3, [sp, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002728:	950d      	str	r5, [sp, #52]	; 0x34
                           LD7_Pin LD9_Pin LD10_Pin LD8_Pin 
                           LD6_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin|LD4_Pin|LD3_Pin|LD5_Pin 
                          |LD7_Pin|LD9_Pin|LD10_Pin|LD8_Pin 
                          |LD6_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800272a:	2601      	movs	r6, #1
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800272c:	f7fd ff00 	bl	8000530 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin|LD4_Pin|LD3_Pin|LD5_Pin 
 8002730:	f64f 7308 	movw	r3, #65288	; 0xff08
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002734:	a90b      	add	r1, sp, #44	; 0x2c
 8002736:	4845      	ldr	r0, [pc, #276]	; (800284c <main+0x1a8>)
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin|LD4_Pin|LD3_Pin|LD5_Pin 
 8002738:	930b      	str	r3, [sp, #44]	; 0x2c
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800273a:	950d      	str	r5, [sp, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800273c:	950e      	str	r5, [sp, #56]	; 0x38
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800273e:	960c      	str	r6, [sp, #48]	; 0x30
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002740:	f7fd fef6 	bl	8000530 <HAL_GPIO_Init>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8002744:	a90b      	add	r1, sp, #44	; 0x2c
 8002746:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800274a:	950c      	str	r5, [sp, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800274c:	950d      	str	r5, [sp, #52]	; 0x34
  GPIO_InitStruct.Pin = B1_Pin;
 800274e:	960b      	str	r6, [sp, #44]	; 0x2c
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8002750:	f7fd feee 	bl	8000530 <HAL_GPIO_Init>
  huart1.Instance = USART1;
 8002754:	483f      	ldr	r0, [pc, #252]	; (8002854 <main+0x1b0>)
  huart1.Init.BaudRate = 115200;
 8002756:	4b40      	ldr	r3, [pc, #256]	; (8002858 <main+0x1b4>)
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8002758:	6085      	str	r5, [r0, #8]
  huart1.Init.BaudRate = 115200;
 800275a:	f44f 3ee1 	mov.w	lr, #115200	; 0x1c200
 800275e:	e880 4008 	stmia.w	r0, {r3, lr}
  huart1.Init.Mode = UART_MODE_TX_RX;
 8002762:	230c      	movs	r3, #12
  huart1.Init.StopBits = UART_STOPBITS_1;
 8002764:	60c5      	str	r5, [r0, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8002766:	6105      	str	r5, [r0, #16]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002768:	6185      	str	r5, [r0, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800276a:	61c5      	str	r5, [r0, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800276c:	6205      	str	r5, [r0, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800276e:	6245      	str	r5, [r0, #36]	; 0x24
  huart1.Init.Mode = UART_MODE_TX_RX;
 8002770:	6143      	str	r3, [r0, #20]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8002772:	f7ff fda0 	bl	80022b6 <HAL_UART_Init>
 8002776:	4605      	mov	r5, r0
 8002778:	b100      	cbz	r0, 800277c <main+0xd8>
 800277a:	e7fe      	b.n	800277a <main+0xd6>
  __HAL_RCC_DMA1_CLK_ENABLE();
 800277c:	6963      	ldr	r3, [r4, #20]
 800277e:	f043 0301 	orr.w	r3, r3, #1
 8002782:	6163      	str	r3, [r4, #20]
 8002784:	6963      	ldr	r3, [r4, #20]
	if(HAL_I2C_GetState(&hi2c1) == HAL_I2C_STATE_RESET) {
 8002786:	4c35      	ldr	r4, [pc, #212]	; (800285c <main+0x1b8>)
  __HAL_RCC_DMA1_CLK_ENABLE();
 8002788:	f003 0301 	and.w	r3, r3, #1
  HAL_NVIC_SetPriority(DMA1_Channel6_IRQn, 0, 0);
 800278c:	4602      	mov	r2, r0
 800278e:	4601      	mov	r1, r0
  __HAL_RCC_DMA1_CLK_ENABLE();
 8002790:	930b      	str	r3, [sp, #44]	; 0x2c
  HAL_NVIC_SetPriority(DMA1_Channel6_IRQn, 0, 0);
 8002792:	2010      	movs	r0, #16
  __HAL_RCC_DMA1_CLK_ENABLE();
 8002794:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
  HAL_NVIC_SetPriority(DMA1_Channel6_IRQn, 0, 0);
 8002796:	f7fd fd6d 	bl	8000274 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel6_IRQn);
 800279a:	2010      	movs	r0, #16
 800279c:	f7fd fd9e 	bl	80002dc <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(DMA1_Channel7_IRQn, 0, 0);
 80027a0:	462a      	mov	r2, r5
 80027a2:	4629      	mov	r1, r5
 80027a4:	2011      	movs	r0, #17
 80027a6:	f7fd fd65 	bl	8000274 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel7_IRQn);
 80027aa:	2011      	movs	r0, #17
 80027ac:	f7fd fd96 	bl	80002dc <HAL_NVIC_EnableIRQ>
	if(HAL_I2C_GetState(&hi2c1) == HAL_I2C_STATE_RESET) {
 80027b0:	4620      	mov	r0, r4
 80027b2:	f7fe fe26 	bl	8001402 <HAL_I2C_GetState>
 80027b6:	bb50      	cbnz	r0, 800280e <main+0x16a>
		hi2c1.Instance = I2C1;
 80027b8:	4b29      	ldr	r3, [pc, #164]	; (8002860 <main+0x1bc>)
 80027ba:	6023      	str	r3, [r4, #0]
		hi2c1.Init.DualAddressMode 	= I2C_DUALADDRESS_DISABLE;
 80027bc:	6120      	str	r0, [r4, #16]
		hi2c1.Init.OwnAddress1 		= ACCELERO_I2C_ADDRESS;
 80027be:	2332      	movs	r3, #50	; 0x32
		hi2c1.Init.OwnAddress2		= 0;
 80027c0:	6160      	str	r0, [r4, #20]
		hi2c1.Init.GeneralCallMode 	= I2C_GENERALCALL_DISABLE;
 80027c2:	61e0      	str	r0, [r4, #28]
		hi2c1.Init.NoStretchMode 	= I2C_NOSTRETCH_DISABLE;
 80027c4:	6220      	str	r0, [r4, #32]
		if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80027c6:	4620      	mov	r0, r4
		hi2c1.Init.OwnAddress1 		= ACCELERO_I2C_ADDRESS;
 80027c8:	60a3      	str	r3, [r4, #8]
		hi2c1.Init.AddressingMode 	= I2C_ADDRESSINGMODE_7BIT;
 80027ca:	60e6      	str	r6, [r4, #12]
		if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80027cc:	f7fe f906 	bl	80009dc <HAL_I2C_Init>
 80027d0:	4601      	mov	r1, r0
 80027d2:	b100      	cbz	r0, 80027d6 <main+0x132>
 80027d4:	e7fe      	b.n	80027d4 <main+0x130>
		if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80027d6:	4620      	mov	r0, r4
 80027d8:	f7fe fe16 	bl	8001408 <HAL_I2CEx_ConfigAnalogFilter>
 80027dc:	4601      	mov	r1, r0
 80027de:	b100      	cbz	r0, 80027e2 <main+0x13e>
 80027e0:	e7fe      	b.n	80027e0 <main+0x13c>
		if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80027e2:	4620      	mov	r0, r4
 80027e4:	f7fe fe36 	bl	8001454 <HAL_I2CEx_ConfigDigitalFilter>
 80027e8:	4604      	mov	r4, r0
 80027ea:	b100      	cbz	r0, 80027ee <main+0x14a>
 80027ec:	e7fe      	b.n	80027ec <main+0x148>
		HAL_NVIC_SetPriority(I2C1_EV_IRQn, 5, 0);
 80027ee:	4602      	mov	r2, r0
 80027f0:	2105      	movs	r1, #5
 80027f2:	201f      	movs	r0, #31
 80027f4:	f7fd fd3e 	bl	8000274 <HAL_NVIC_SetPriority>
		HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 80027f8:	201f      	movs	r0, #31
 80027fa:	f7fd fd6f 	bl	80002dc <HAL_NVIC_EnableIRQ>
		HAL_NVIC_SetPriority(I2C1_ER_IRQn, 5, 0);
 80027fe:	2020      	movs	r0, #32
 8002800:	4622      	mov	r2, r4
 8002802:	2105      	movs	r1, #5
 8002804:	f7fd fd36 	bl	8000274 <HAL_NVIC_SetPriority>
		HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 8002808:	2020      	movs	r0, #32
 800280a:	f7fd fd67 	bl	80002dc <HAL_NVIC_EnableIRQ>
  hspi1.Instance = SPI1;
 800280e:	4815      	ldr	r0, [pc, #84]	; (8002864 <main+0x1c0>)
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8002810:	4b15      	ldr	r3, [pc, #84]	; (8002868 <main+0x1c4>)
  hspi1.Init.DataSize = SPI_DATASIZE_4BIT;
 8002812:	f44f 7240 	mov.w	r2, #768	; 0x300
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8002816:	f44f 7782 	mov.w	r7, #260	; 0x104
  hspi1.Init.DataSize = SPI_DATASIZE_4BIT;
 800281a:	60c2      	str	r2, [r0, #12]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800281c:	f44f 7200 	mov.w	r2, #512	; 0x200
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 8002820:	2408      	movs	r4, #8
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8002822:	e880 0088 	stmia.w	r0, {r3, r7}
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8002826:	6182      	str	r2, [r0, #24]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8002828:	2300      	movs	r3, #0
  hspi1.Init.CRCPolynomial = 7;
 800282a:	2207      	movs	r2, #7
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800282c:	6083      	str	r3, [r0, #8]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800282e:	6103      	str	r3, [r0, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8002830:	6143      	str	r3, [r0, #20]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 8002832:	61c4      	str	r4, [r0, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002834:	6203      	str	r3, [r0, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8002836:	6243      	str	r3, [r0, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002838:	6283      	str	r3, [r0, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 800283a:	62c2      	str	r2, [r0, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 800283c:	6303      	str	r3, [r0, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 800283e:	6344      	str	r4, [r0, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8002840:	f7ff fb24 	bl	8001e8c <HAL_SPI_Init>
 8002844:	b190      	cbz	r0, 800286c <main+0x1c8>
 8002846:	e7fe      	b.n	8002846 <main+0x1a2>
 8002848:	40021000 	.word	0x40021000
 800284c:	48001000 	.word	0x48001000
 8002850:	10120000 	.word	0x10120000
 8002854:	200000e4 	.word	0x200000e4
 8002858:	40013800 	.word	0x40013800
 800285c:	20000098 	.word	0x20000098
 8002860:	40005400 	.word	0x40005400
 8002864:	20000198 	.word	0x20000198
 8002868:	40013000 	.word	0x40013000
  hpcd_USB_FS.Instance = USB;
 800286c:	4b54      	ldr	r3, [pc, #336]	; (80029c0 <main+0x31c>)
 800286e:	4a55      	ldr	r2, [pc, #340]	; (80029c4 <main+0x320>)
  hpcd_USB_FS.Init.ep0_mps = DEP0CTL_MPS_64;
 8002870:	60d8      	str	r0, [r3, #12]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 8002872:	e883 0014 	stmia.w	r3, {r2, r4}
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 8002876:	6198      	str	r0, [r3, #24]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 8002878:	2202      	movs	r2, #2
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 800287a:	6218      	str	r0, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 800287c:	4618      	mov	r0, r3
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 800287e:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8002880:	611a      	str	r2, [r3, #16]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 8002882:	f7fe fe0c 	bl	800149e <HAL_PCD_Init>
 8002886:	2800      	cmp	r0, #0
 8002888:	d17e      	bne.n	8002988 <main+0x2e4>
	  status = HAL_I2C_Mem_Read(&hi2c1, ACCELERO_I2C_ADDRESS, reg_addr, I2C_MEMADD_SIZE_8BIT, &val, 1, I2cxTimeout);
 800288a:	4f4f      	ldr	r7, [pc, #316]	; (80029c8 <main+0x324>)
	uint8_t val = 0;
 800288c:	4605      	mov	r5, r0
	  status = HAL_I2C_Mem_Read(&hi2c1, ACCELERO_I2C_ADDRESS, reg_addr, I2C_MEMADD_SIZE_8BIT, &val, 1, I2cxTimeout);
 800288e:	f04f 0801 	mov.w	r8, #1
 8002892:	f8df 9158 	ldr.w	r9, [pc, #344]	; 80029ec <main+0x348>
	uint8_t val = 0;
 8002896:	f88d 5017 	strb.w	r5, [sp, #23]
 800289a:	2620      	movs	r6, #32
 800289c:	46ca      	mov	sl, r9
	  status = HAL_I2C_Mem_Read(&hi2c1, ACCELERO_I2C_ADDRESS, reg_addr, I2C_MEMADD_SIZE_8BIT, &val, 1, I2cxTimeout);
 800289e:	f8d9 3000 	ldr.w	r3, [r9]
 80028a2:	9302      	str	r3, [sp, #8]
 80028a4:	f10d 0417 	add.w	r4, sp, #23
 80028a8:	b2b2      	uxth	r2, r6
 80028aa:	f8cd 8004 	str.w	r8, [sp, #4]
 80028ae:	9400      	str	r4, [sp, #0]
 80028b0:	2301      	movs	r3, #1
 80028b2:	2132      	movs	r1, #50	; 0x32
 80028b4:	4638      	mov	r0, r7
 80028b6:	f7fe f8e2 	bl	8000a7e <HAL_I2C_Mem_Read>
	  if(val > 0) {
 80028ba:	f89d 2017 	ldrb.w	r2, [sp, #23]
 80028be:	b11a      	cbz	r2, 80028c8 <main+0x224>
		  debug_printf("ACCELERO 0x%02x: 0x%02x\r\n", reg_addr, val);
 80028c0:	4631      	mov	r1, r6
 80028c2:	4842      	ldr	r0, [pc, #264]	; (80029cc <main+0x328>)
 80028c4:	f7ff fe5f 	bl	8002586 <debug_printf>
	  HAL_Delay(100);
 80028c8:	2064      	movs	r0, #100	; 0x64
 80028ca:	3601      	adds	r6, #1
 80028cc:	f7fd fcb0 	bl	8000230 <HAL_Delay>
	for(reg_addr = 0x20; reg_addr < 0x3D; reg_addr++) {
 80028d0:	2e3d      	cmp	r6, #61	; 0x3d
 80028d2:	d1e4      	bne.n	800289e <main+0x1fa>
		  debug_printf("COMPASS 0x%02x: 0x%02x\r\n", reg_addr, val);
 80028d4:	f8df b118 	ldr.w	fp, [pc, #280]	; 80029f0 <main+0x34c>
	for(reg_addr = 0x20; reg_addr < 0x3D; reg_addr++) {
 80028d8:	2600      	movs	r6, #0
	  status = HAL_I2C_Mem_Read(&hi2c1, COMPASS_I2C_ADDR, reg_addr, I2C_MEMADD_SIZE_8BIT, &val, 1, I2cxTimeout);
 80028da:	f8da 3000 	ldr.w	r3, [sl]
 80028de:	9302      	str	r3, [sp, #8]
 80028e0:	e88d 0110 	stmia.w	sp, {r4, r8}
 80028e4:	2301      	movs	r3, #1
 80028e6:	b2b2      	uxth	r2, r6
 80028e8:	213c      	movs	r1, #60	; 0x3c
 80028ea:	4638      	mov	r0, r7
 80028ec:	f7fe f8c7 	bl	8000a7e <HAL_I2C_Mem_Read>
	  if(status == HAL_OK && val > 0) {
 80028f0:	b930      	cbnz	r0, 8002900 <main+0x25c>
 80028f2:	f89d 2017 	ldrb.w	r2, [sp, #23]
 80028f6:	b11a      	cbz	r2, 8002900 <main+0x25c>
		  debug_printf("COMPASS 0x%02x: 0x%02x\r\n", reg_addr, val);
 80028f8:	4631      	mov	r1, r6
 80028fa:	4658      	mov	r0, fp
 80028fc:	f7ff fe43 	bl	8002586 <debug_printf>
	  HAL_Delay(100);
 8002900:	2064      	movs	r0, #100	; 0x64
 8002902:	3601      	adds	r6, #1
 8002904:	f7fd fc94 	bl	8000230 <HAL_Delay>
	for(reg_addr = 0x00; reg_addr < 0x0C; reg_addr++) {
 8002908:	2e0c      	cmp	r6, #12
 800290a:	d1e6      	bne.n	80028da <main+0x236>
	status = HAL_I2C_Mem_Read(&hi2c1, DS1307_I2C_ADDR, 0x00, I2C_MEMADD_SIZE_8BIT, buffer, 32, I2cxTimeout);
 800290c:	f8d9 3000 	ldr.w	r3, [r9]
 8002910:	9302      	str	r3, [sp, #8]
 8002912:	4e2f      	ldr	r6, [pc, #188]	; (80029d0 <main+0x32c>)
 8002914:	9600      	str	r6, [sp, #0]
 8002916:	2320      	movs	r3, #32
 8002918:	9301      	str	r3, [sp, #4]
 800291a:	2200      	movs	r2, #0
 800291c:	2301      	movs	r3, #1
 800291e:	21d0      	movs	r1, #208	; 0xd0
 8002920:	4638      	mov	r0, r7
 8002922:	f7fe f8ac 	bl	8000a7e <HAL_I2C_Mem_Read>
	if(status == HAL_OK && val > 0) {
 8002926:	b9b0      	cbnz	r0, 8002956 <main+0x2b2>
 8002928:	f89d 3017 	ldrb.w	r3, [sp, #23]
 800292c:	b19b      	cbz	r3, 8002956 <main+0x2b2>
	  DS1307_GetDateTime(buffer, &dt);
 800292e:	4c29      	ldr	r4, [pc, #164]	; (80029d4 <main+0x330>)
	  debug_printf("RTC: ");
 8002930:	4829      	ldr	r0, [pc, #164]	; (80029d8 <main+0x334>)
 8002932:	f7ff fe28 	bl	8002586 <debug_printf>
	  DS1307_GetDateTime(buffer, &dt);
 8002936:	4621      	mov	r1, r4
 8002938:	4630      	mov	r0, r6
 800293a:	f7ff fe2e 	bl	800259a <DS1307_GetDateTime>
	  debug_printf("%d:%d:%d - %d/%d/%d\r\n", dt.hour, dt.min, dt.sec, dt.date, dt.month, dt.year);
 800293e:	88e0      	ldrh	r0, [r4, #6]
 8002940:	7823      	ldrb	r3, [r4, #0]
 8002942:	7862      	ldrb	r2, [r4, #1]
 8002944:	78a1      	ldrb	r1, [r4, #2]
 8002946:	9002      	str	r0, [sp, #8]
 8002948:	7920      	ldrb	r0, [r4, #4]
 800294a:	9001      	str	r0, [sp, #4]
 800294c:	78e0      	ldrb	r0, [r4, #3]
 800294e:	9000      	str	r0, [sp, #0]
 8002950:	4822      	ldr	r0, [pc, #136]	; (80029dc <main+0x338>)
 8002952:	f7ff fe18 	bl	8002586 <debug_printf>
	status = HAL_I2C_Mem_Read_DMA(&hi2c1, EEPROM_I2C_ADDR, page_idx * 32, I2C_MEMADD_SIZE_16BIT, buffer, 32);
 8002956:	4c22      	ldr	r4, [pc, #136]	; (80029e0 <main+0x33c>)
	I2C1_RxDone = 0;
 8002958:	f8df 9098 	ldr.w	r9, [pc, #152]	; 80029f4 <main+0x350>
	status = HAL_I2C_Mem_Read_DMA(&hi2c1, EEPROM_I2C_ADDR, page_idx * 32, I2C_MEMADD_SIZE_16BIT, buffer, 32);
 800295c:	8822      	ldrh	r2, [r4, #0]
	I2C1_RxDone = 0;
 800295e:	f889 5000 	strb.w	r5, [r9]
	status = HAL_I2C_Mem_Read_DMA(&hi2c1, EEPROM_I2C_ADDR, page_idx * 32, I2C_MEMADD_SIZE_16BIT, buffer, 32);
 8002962:	2320      	movs	r3, #32
 8002964:	0152      	lsls	r2, r2, #5
 8002966:	9301      	str	r3, [sp, #4]
 8002968:	b292      	uxth	r2, r2
 800296a:	9600      	str	r6, [sp, #0]
 800296c:	2302      	movs	r3, #2
 800296e:	21a0      	movs	r1, #160	; 0xa0
 8002970:	4638      	mov	r0, r7
 8002972:	f7fe f943 	bl	8000bfc <HAL_I2C_Mem_Read_DMA>
	if(status == HAL_OK) {
 8002976:	b140      	cbz	r0, 800298a <main+0x2e6>
	debug_print("\r\n");
 8002978:	481a      	ldr	r0, [pc, #104]	; (80029e4 <main+0x340>)
 800297a:	f7ff fdfb 	bl	8002574 <debug_print>
	HAL_Delay(1000);
 800297e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8002982:	f7fd fc55 	bl	8000230 <HAL_Delay>
 8002986:	e784      	b.n	8002892 <main+0x1ee>
 8002988:	e7fe      	b.n	8002988 <main+0x2e4>
		while(I2C1_RxDone == 0);
 800298a:	f899 3000 	ldrb.w	r3, [r9]
 800298e:	2b00      	cmp	r3, #0
 8002990:	d0fb      	beq.n	800298a <main+0x2e6>
		debug_printf("EEPROM page %d: ", page_idx);
 8002992:	8821      	ldrh	r1, [r4, #0]
 8002994:	4814      	ldr	r0, [pc, #80]	; (80029e8 <main+0x344>)
		  debug_printf("0x%02x ", buffer[i]);
 8002996:	f8df 9060 	ldr.w	r9, [pc, #96]	; 80029f8 <main+0x354>
		debug_printf("EEPROM page %d: ", page_idx);
 800299a:	f7ff fdf4 	bl	8002586 <debug_printf>
		page_idx++;
 800299e:	8823      	ldrh	r3, [r4, #0]
 80029a0:	3301      	adds	r3, #1
 80029a2:	b29b      	uxth	r3, r3
		if(page_idx >= EEPROM_PAGE_COUNT) {
 80029a4:	2b7f      	cmp	r3, #127	; 0x7f
		page_idx++;
 80029a6:	bf94      	ite	ls
 80029a8:	8023      	strhls	r3, [r4, #0]
		  page_idx = 0;
 80029aa:	8025      	strhhi	r5, [r4, #0]
	for(reg_addr = 0x20; reg_addr < 0x3D; reg_addr++) {
 80029ac:	2400      	movs	r4, #0
		  debug_printf("0x%02x ", buffer[i]);
 80029ae:	5d31      	ldrb	r1, [r6, r4]
 80029b0:	4648      	mov	r0, r9
		for(i = 0; i < 32; i++) {
 80029b2:	3401      	adds	r4, #1
		  debug_printf("0x%02x ", buffer[i]);
 80029b4:	f7ff fde7 	bl	8002586 <debug_printf>
		for(i = 0; i < 32; i++) {
 80029b8:	2c20      	cmp	r4, #32
 80029ba:	d1f8      	bne.n	80029ae <main+0x30a>
 80029bc:	e7dc      	b.n	8002978 <main+0x2d4>
 80029be:	bf00      	nop
 80029c0:	200001fc 	.word	0x200001fc
 80029c4:	40005c00 	.word	0x40005c00
 80029c8:	20000098 	.word	0x20000098
 80029cc:	08002dcf 	.word	0x08002dcf
 80029d0:	20000026 	.word	0x20000026
 80029d4:	20000046 	.word	0x20000046
 80029d8:	08002e02 	.word	0x08002e02
 80029dc:	08002e08 	.word	0x08002e08
 80029e0:	2000004e 	.word	0x2000004e
 80029e4:	08002e1b 	.word	0x08002e1b
 80029e8:	08002e1e 	.word	0x08002e1e
 80029ec:	20000000 	.word	0x20000000
 80029f0:	08002de9 	.word	0x08002de9
 80029f4:	20000024 	.word	0x20000024
 80029f8:	08002e2f 	.word	0x08002e2f

080029fc <HAL_I2C_MemRxCpltCallback>:
	if(hi2c == &hi2c1) {
 80029fc:	4b03      	ldr	r3, [pc, #12]	; (8002a0c <HAL_I2C_MemRxCpltCallback+0x10>)
 80029fe:	4283      	cmp	r3, r0
		I2C1_RxDone = 1;
 8002a00:	bf02      	ittt	eq
 8002a02:	4b03      	ldreq	r3, [pc, #12]	; (8002a10 <HAL_I2C_MemRxCpltCallback+0x14>)
 8002a04:	2201      	moveq	r2, #1
 8002a06:	701a      	strbeq	r2, [r3, #0]
 8002a08:	4770      	bx	lr
 8002a0a:	bf00      	nop
 8002a0c:	20000098 	.word	0x20000098
 8002a10:	20000024 	.word	0x20000024

08002a14 <HAL_I2C_MemTxCpltCallback>:
	if(hi2c == &hi2c1) {
 8002a14:	4b03      	ldr	r3, [pc, #12]	; (8002a24 <HAL_I2C_MemTxCpltCallback+0x10>)
 8002a16:	4283      	cmp	r3, r0
		I2C1_TxDone = 1;
 8002a18:	bf02      	ittt	eq
 8002a1a:	4b03      	ldreq	r3, [pc, #12]	; (8002a28 <HAL_I2C_MemTxCpltCallback+0x14>)
 8002a1c:	2201      	moveq	r2, #1
 8002a1e:	701a      	strbeq	r2, [r3, #0]
 8002a20:	4770      	bx	lr
 8002a22:	bf00      	nop
 8002a24:	20000098 	.word	0x20000098
 8002a28:	20000025 	.word	0x20000025

08002a2c <_Error_Handler>:
  * @param  file: The file name as string.
  * @param  line: The line in file as a number.
  * @retval None
  */
void _Error_Handler(char *file, int line)
{
 8002a2c:	e7fe      	b.n	8002a2c <_Error_Handler>
	...

08002a30 <HAL_MspInit>:
{
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002a30:	4b1d      	ldr	r3, [pc, #116]	; (8002aa8 <HAL_MspInit+0x78>)
{
 8002a32:	b507      	push	{r0, r1, r2, lr}
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002a34:	699a      	ldr	r2, [r3, #24]
 8002a36:	f042 0201 	orr.w	r2, r2, #1
 8002a3a:	619a      	str	r2, [r3, #24]
 8002a3c:	699b      	ldr	r3, [r3, #24]
 8002a3e:	f003 0301 	and.w	r3, r3, #1
 8002a42:	9301      	str	r3, [sp, #4]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8002a44:	2007      	movs	r0, #7
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002a46:	9b01      	ldr	r3, [sp, #4]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8002a48:	f7fd fc02 	bl	8000250 <HAL_NVIC_SetPriorityGrouping>

  /* System interrupt init*/
  /* MemoryManagement_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(MemoryManagement_IRQn, 0, 0);
 8002a4c:	2200      	movs	r2, #0
 8002a4e:	4611      	mov	r1, r2
 8002a50:	f06f 000b 	mvn.w	r0, #11
 8002a54:	f7fd fc0e 	bl	8000274 <HAL_NVIC_SetPriority>
  /* BusFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(BusFault_IRQn, 0, 0);
 8002a58:	2200      	movs	r2, #0
 8002a5a:	4611      	mov	r1, r2
 8002a5c:	f06f 000a 	mvn.w	r0, #10
 8002a60:	f7fd fc08 	bl	8000274 <HAL_NVIC_SetPriority>
  /* UsageFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(UsageFault_IRQn, 0, 0);
 8002a64:	2200      	movs	r2, #0
 8002a66:	4611      	mov	r1, r2
 8002a68:	f06f 0009 	mvn.w	r0, #9
 8002a6c:	f7fd fc02 	bl	8000274 <HAL_NVIC_SetPriority>
  /* SVCall_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SVCall_IRQn, 0, 0);
 8002a70:	2200      	movs	r2, #0
 8002a72:	4611      	mov	r1, r2
 8002a74:	f06f 0004 	mvn.w	r0, #4
 8002a78:	f7fd fbfc 	bl	8000274 <HAL_NVIC_SetPriority>
  /* DebugMonitor_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DebugMonitor_IRQn, 0, 0);
 8002a7c:	2200      	movs	r2, #0
 8002a7e:	4611      	mov	r1, r2
 8002a80:	f06f 0003 	mvn.w	r0, #3
 8002a84:	f7fd fbf6 	bl	8000274 <HAL_NVIC_SetPriority>
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 0, 0);
 8002a88:	2200      	movs	r2, #0
 8002a8a:	4611      	mov	r1, r2
 8002a8c:	f06f 0001 	mvn.w	r0, #1
 8002a90:	f7fd fbf0 	bl	8000274 <HAL_NVIC_SetPriority>
  /* SysTick_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 8002a94:	2200      	movs	r2, #0
 8002a96:	4611      	mov	r1, r2
 8002a98:	f04f 30ff 	mov.w	r0, #4294967295
 8002a9c:	f7fd fbea 	bl	8000274 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002aa0:	b003      	add	sp, #12
 8002aa2:	f85d fb04 	ldr.w	pc, [sp], #4
 8002aa6:	bf00      	nop
 8002aa8:	40021000 	.word	0x40021000

08002aac <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002aac:	b530      	push	{r4, r5, lr}

  GPIO_InitTypeDef GPIO_InitStruct;
  if(hi2c->Instance==I2C1)
 8002aae:	6802      	ldr	r2, [r0, #0]
 8002ab0:	4b25      	ldr	r3, [pc, #148]	; (8002b48 <HAL_I2C_MspInit+0x9c>)
 8002ab2:	429a      	cmp	r2, r3
{
 8002ab4:	b087      	sub	sp, #28
 8002ab6:	4605      	mov	r5, r0
  if(hi2c->Instance==I2C1)
 8002ab8:	d144      	bne.n	8002b44 <HAL_I2C_MspInit+0x98>
  
    /**I2C1 GPIO Configuration    
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA 
    */
    GPIO_InitStruct.Pin 	= I2C1_SCL_Pin|I2C1_SDA_Pin;
 8002aba:	23c0      	movs	r3, #192	; 0xc0
 8002abc:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Mode 	= GPIO_MODE_AF_PP; // GPIO_MODE_AF_OD;
 8002abe:	2302      	movs	r3, #2
 8002ac0:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Pull 	= GPIO_PULLDOWN;
 8002ac2:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Speed 	= GPIO_SPEED_FREQ_HIGH;
 8002ac4:	2303      	movs	r3, #3
 8002ac6:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8002ac8:	2304      	movs	r3, #4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002aca:	eb0d 0103 	add.w	r1, sp, r3
 8002ace:	481f      	ldr	r0, [pc, #124]	; (8002b4c <HAL_I2C_MspInit+0xa0>)
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8002ad0:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002ad2:	f7fd fd2d 	bl	8000530 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8002ad6:	4b1e      	ldr	r3, [pc, #120]	; (8002b50 <HAL_I2C_MspInit+0xa4>)
  
    /* I2C1 DMA Init */
    /* I2C1_RX Init */
    hdma_i2c1_rx.Instance = DMA1_Channel7;
 8002ad8:	4c1e      	ldr	r4, [pc, #120]	; (8002b54 <HAL_I2C_MspInit+0xa8>)
    __HAL_RCC_I2C1_CLK_ENABLE();
 8002ada:	69da      	ldr	r2, [r3, #28]
 8002adc:	f442 1200 	orr.w	r2, r2, #2097152	; 0x200000
 8002ae0:	61da      	str	r2, [r3, #28]
 8002ae2:	69db      	ldr	r3, [r3, #28]
 8002ae4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002ae8:	9300      	str	r3, [sp, #0]
 8002aea:	9b00      	ldr	r3, [sp, #0]
    hdma_i2c1_rx.Instance = DMA1_Channel7;
 8002aec:	4b1a      	ldr	r3, [pc, #104]	; (8002b58 <HAL_I2C_MspInit+0xac>)
 8002aee:	6023      	str	r3, [r4, #0]
    hdma_i2c1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
    hdma_i2c1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
    hdma_i2c1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8002af0:	2280      	movs	r2, #128	; 0x80
    hdma_i2c1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002af2:	2300      	movs	r3, #0
    hdma_i2c1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
    hdma_i2c1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
    hdma_i2c1_rx.Init.Mode = DMA_NORMAL;
    hdma_i2c1_rx.Init.Priority = DMA_PRIORITY_LOW;
    if (HAL_DMA_Init(&hdma_i2c1_rx) != HAL_OK)
 8002af4:	4620      	mov	r0, r4
    hdma_i2c1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002af6:	6063      	str	r3, [r4, #4]
    hdma_i2c1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002af8:	60a3      	str	r3, [r4, #8]
    hdma_i2c1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8002afa:	60e2      	str	r2, [r4, #12]
    hdma_i2c1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002afc:	6123      	str	r3, [r4, #16]
    hdma_i2c1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002afe:	6163      	str	r3, [r4, #20]
    hdma_i2c1_rx.Init.Mode = DMA_NORMAL;
 8002b00:	61a3      	str	r3, [r4, #24]
    hdma_i2c1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8002b02:	61e3      	str	r3, [r4, #28]
    if (HAL_DMA_Init(&hdma_i2c1_rx) != HAL_OK)
 8002b04:	f7fd fc40 	bl	8000388 <HAL_DMA_Init>
 8002b08:	b118      	cbz	r0, 8002b12 <HAL_I2C_MspInit+0x66>
    {
      _Error_Handler(__FILE__, __LINE__);
 8002b0a:	2178      	movs	r1, #120	; 0x78
 8002b0c:	4813      	ldr	r0, [pc, #76]	; (8002b5c <HAL_I2C_MspInit+0xb0>)
 8002b0e:	f7ff ff8d 	bl	8002a2c <_Error_Handler>

    __HAL_LINKDMA(hi2c,hdmarx,hdma_i2c1_rx);

    /* I2C1_TX Init */
    hdma_i2c1_tx.Instance = DMA1_Channel6;
    hdma_i2c1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002b12:	4a13      	ldr	r2, [pc, #76]	; (8002b60 <HAL_I2C_MspInit+0xb4>)
    __HAL_LINKDMA(hi2c,hdmarx,hdma_i2c1_rx);
 8002b14:	63ec      	str	r4, [r5, #60]	; 0x3c
 8002b16:	6265      	str	r5, [r4, #36]	; 0x24
    hdma_i2c1_tx.Instance = DMA1_Channel6;
 8002b18:	4c12      	ldr	r4, [pc, #72]	; (8002b64 <HAL_I2C_MspInit+0xb8>)
    hdma_i2c1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002b1a:	2310      	movs	r3, #16
 8002b1c:	e884 000c 	stmia.w	r4, {r2, r3}
    hdma_i2c1_tx.Init.MemInc = DMA_MINC_ENABLE;
    hdma_i2c1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
    hdma_i2c1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
    hdma_i2c1_tx.Init.Mode = DMA_NORMAL;
    hdma_i2c1_tx.Init.Priority = DMA_PRIORITY_LOW;
    if (HAL_DMA_Init(&hdma_i2c1_tx) != HAL_OK)
 8002b20:	4620      	mov	r0, r4
    hdma_i2c1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002b22:	2300      	movs	r3, #0
    hdma_i2c1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8002b24:	2280      	movs	r2, #128	; 0x80
    hdma_i2c1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002b26:	60a3      	str	r3, [r4, #8]
    hdma_i2c1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8002b28:	60e2      	str	r2, [r4, #12]
    hdma_i2c1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002b2a:	6123      	str	r3, [r4, #16]
    hdma_i2c1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002b2c:	6163      	str	r3, [r4, #20]
    hdma_i2c1_tx.Init.Mode = DMA_NORMAL;
 8002b2e:	61a3      	str	r3, [r4, #24]
    hdma_i2c1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8002b30:	61e3      	str	r3, [r4, #28]
    if (HAL_DMA_Init(&hdma_i2c1_tx) != HAL_OK)
 8002b32:	f7fd fc29 	bl	8000388 <HAL_DMA_Init>
 8002b36:	b118      	cbz	r0, 8002b40 <HAL_I2C_MspInit+0x94>
    {
      _Error_Handler(__FILE__, __LINE__);
 8002b38:	2188      	movs	r1, #136	; 0x88
 8002b3a:	4808      	ldr	r0, [pc, #32]	; (8002b5c <HAL_I2C_MspInit+0xb0>)
 8002b3c:	f7ff ff76 	bl	8002a2c <_Error_Handler>
    }

    __HAL_LINKDMA(hi2c,hdmatx,hdma_i2c1_tx);
 8002b40:	63ac      	str	r4, [r5, #56]	; 0x38
 8002b42:	6265      	str	r5, [r4, #36]	; 0x24

  }
}
 8002b44:	b007      	add	sp, #28
 8002b46:	bd30      	pop	{r4, r5, pc}
 8002b48:	40005400 	.word	0x40005400
 8002b4c:	48000400 	.word	0x48000400
 8002b50:	40021000 	.word	0x40021000
 8002b54:	20000154 	.word	0x20000154
 8002b58:	40020080 	.word	0x40020080
 8002b5c:	08002e37 	.word	0x08002e37
 8002b60:	4002006c 	.word	0x4002006c
 8002b64:	20000054 	.word	0x20000054

08002b68 <HAL_SPI_MspInit>:
  }

}

void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8002b68:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}

  GPIO_InitTypeDef GPIO_InitStruct;
  if(hspi->Instance==SPI1)
 8002b6a:	6802      	ldr	r2, [r0, #0]
 8002b6c:	4b0f      	ldr	r3, [pc, #60]	; (8002bac <HAL_SPI_MspInit+0x44>)
 8002b6e:	429a      	cmp	r2, r3
 8002b70:	d119      	bne.n	8002ba6 <HAL_SPI_MspInit+0x3e>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8002b72:	f503 4360 	add.w	r3, r3, #57344	; 0xe000
    GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MISOA7_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002b76:	a901      	add	r1, sp, #4
    __HAL_RCC_SPI1_CLK_ENABLE();
 8002b78:	699a      	ldr	r2, [r3, #24]
 8002b7a:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8002b7e:	619a      	str	r2, [r3, #24]
 8002b80:	699b      	ldr	r3, [r3, #24]
 8002b82:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002b86:	9300      	str	r3, [sp, #0]
 8002b88:	9b00      	ldr	r3, [sp, #0]
    GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MISOA7_Pin;
 8002b8a:	23e0      	movs	r3, #224	; 0xe0
 8002b8c:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002b8e:	2302      	movs	r3, #2
 8002b90:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b92:	2300      	movs	r3, #0
 8002b94:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002b96:	2303      	movs	r3, #3
 8002b98:	9304      	str	r3, [sp, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002b9a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8002b9e:	2305      	movs	r3, #5
 8002ba0:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002ba2:	f7fd fcc5 	bl	8000530 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8002ba6:	b007      	add	sp, #28
 8002ba8:	f85d fb04 	ldr.w	pc, [sp], #4
 8002bac:	40013000 	.word	0x40013000

08002bb0 <HAL_UART_MspInit>:
  }

}

void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002bb0:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}

  GPIO_InitTypeDef GPIO_InitStruct;
  if(huart->Instance==USART1)
 8002bb2:	6802      	ldr	r2, [r0, #0]
 8002bb4:	4b0f      	ldr	r3, [pc, #60]	; (8002bf4 <HAL_UART_MspInit+0x44>)
 8002bb6:	429a      	cmp	r2, r3
 8002bb8:	d118      	bne.n	8002bec <HAL_UART_MspInit+0x3c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8002bba:	f503 4358 	add.w	r3, r3, #55296	; 0xd800
    GPIO_InitStruct.Pin = DEBUG_TX_Pin|DEBUG_RX_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002bbe:	a901      	add	r1, sp, #4
    __HAL_RCC_USART1_CLK_ENABLE();
 8002bc0:	699a      	ldr	r2, [r3, #24]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002bc2:	480d      	ldr	r0, [pc, #52]	; (8002bf8 <HAL_UART_MspInit+0x48>)
    __HAL_RCC_USART1_CLK_ENABLE();
 8002bc4:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002bc8:	619a      	str	r2, [r3, #24]
 8002bca:	699b      	ldr	r3, [r3, #24]
 8002bcc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002bd0:	9300      	str	r3, [sp, #0]
 8002bd2:	9b00      	ldr	r3, [sp, #0]
    GPIO_InitStruct.Pin = DEBUG_TX_Pin|DEBUG_RX_Pin;
 8002bd4:	2330      	movs	r3, #48	; 0x30
 8002bd6:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002bd8:	2302      	movs	r3, #2
 8002bda:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002bdc:	2300      	movs	r3, #0
 8002bde:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002be0:	2303      	movs	r3, #3
 8002be2:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8002be4:	2307      	movs	r3, #7
 8002be6:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002be8:	f7fd fca2 	bl	8000530 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8002bec:	b007      	add	sp, #28
 8002bee:	f85d fb04 	ldr.w	pc, [sp], #4
 8002bf2:	bf00      	nop
 8002bf4:	40013800 	.word	0x40013800
 8002bf8:	48000800 	.word	0x48000800

08002bfc <HAL_PCD_MspInit>:
  }

}

void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8002bfc:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}

  GPIO_InitTypeDef GPIO_InitStruct;
  if(hpcd->Instance==USB)
 8002bfe:	6802      	ldr	r2, [r0, #0]
 8002c00:	4b0f      	ldr	r3, [pc, #60]	; (8002c40 <HAL_PCD_MspInit+0x44>)
 8002c02:	429a      	cmp	r2, r3
 8002c04:	d119      	bne.n	8002c3a <HAL_PCD_MspInit+0x3e>
  
    /**USB GPIO Configuration    
    PA11     ------> USB_DM
    PA12     ------> USB_DP 
    */
    GPIO_InitStruct.Pin = DM_Pin|DP_Pin;
 8002c06:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8002c0a:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002c0c:	2302      	movs	r3, #2
 8002c0e:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c10:	2300      	movs	r3, #0
 8002c12:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002c14:	2303      	movs	r3, #3
 8002c16:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF14_USB;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002c18:	a901      	add	r1, sp, #4
    GPIO_InitStruct.Alternate = GPIO_AF14_USB;
 8002c1a:	230e      	movs	r3, #14
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002c1c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
    GPIO_InitStruct.Alternate = GPIO_AF14_USB;
 8002c20:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002c22:	f7fd fc85 	bl	8000530 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 8002c26:	4b07      	ldr	r3, [pc, #28]	; (8002c44 <HAL_PCD_MspInit+0x48>)
 8002c28:	69da      	ldr	r2, [r3, #28]
 8002c2a:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8002c2e:	61da      	str	r2, [r3, #28]
 8002c30:	69db      	ldr	r3, [r3, #28]
 8002c32:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002c36:	9300      	str	r3, [sp, #0]
 8002c38:	9b00      	ldr	r3, [sp, #0]
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }

}
 8002c3a:	b007      	add	sp, #28
 8002c3c:	f85d fb04 	ldr.w	pc, [sp], #4
 8002c40:	40005c00 	.word	0x40005c00
 8002c44:	40021000 	.word	0x40021000

08002c48 <SysTick_Handler>:

/**
* @brief This function handles System tick timer.
*/
void SysTick_Handler(void)
{
 8002c48:	b508      	push	{r3, lr}
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002c4a:	f7fd fae3 	bl	8000214 <HAL_IncTick>
  HAL_SYSTICK_IRQHandler();
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002c4e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  HAL_SYSTICK_IRQHandler();
 8002c52:	f7fd bb72 	b.w	800033a <HAL_SYSTICK_IRQHandler>
	...

08002c58 <DMA1_Channel6_IRQHandler>:
/**
* @brief This function handles DMA1 channel6 global interrupt.
*/
void DMA1_Channel6_IRQHandler(void)
{
  HAL_DMA_IRQHandler(&hdma_i2c1_tx);
 8002c58:	4801      	ldr	r0, [pc, #4]	; (8002c60 <DMA1_Channel6_IRQHandler+0x8>)
 8002c5a:	f7fd bc21 	b.w	80004a0 <HAL_DMA_IRQHandler>
 8002c5e:	bf00      	nop
 8002c60:	20000054 	.word	0x20000054

08002c64 <DMA1_Channel7_IRQHandler>:
/**
* @brief This function handles DMA1 channel7 global interrupt.
*/
void DMA1_Channel7_IRQHandler(void)
{
  HAL_DMA_IRQHandler(&hdma_i2c1_rx);
 8002c64:	4801      	ldr	r0, [pc, #4]	; (8002c6c <DMA1_Channel7_IRQHandler+0x8>)
 8002c66:	f7fd bc1b 	b.w	80004a0 <HAL_DMA_IRQHandler>
 8002c6a:	bf00      	nop
 8002c6c:	20000154 	.word	0x20000154

08002c70 <I2C1_EV_IRQHandler>:
//  debug_outbyte('2');
}

void I2C1_EV_IRQHandler(void)
{
	HAL_I2C_EV_IRQHandler(&hi2c1);
 8002c70:	4801      	ldr	r0, [pc, #4]	; (8002c78 <I2C1_EV_IRQHandler+0x8>)
 8002c72:	f7fe b84b 	b.w	8000d0c <HAL_I2C_EV_IRQHandler>
 8002c76:	bf00      	nop
 8002c78:	20000098 	.word	0x20000098

08002c7c <I2C1_ER_IRQHandler>:
}

void I2C1_ER_IRQHandler(void)
{
	HAL_I2C_ER_IRQHandler(&hi2c1);
 8002c7c:	4801      	ldr	r0, [pc, #4]	; (8002c84 <I2C1_ER_IRQHandler+0x8>)
 8002c7e:	f7fe bb76 	b.w	800136e <HAL_I2C_ER_IRQHandler>
 8002c82:	bf00      	nop
 8002c84:	20000098 	.word	0x20000098

08002c88 <SystemInit>:
  */
void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002c88:	4915      	ldr	r1, [pc, #84]	; (8002ce0 <SystemInit+0x58>)
 8002c8a:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
 8002c8e:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002c92:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= 0x00000001U;
 8002c96:	4b13      	ldr	r3, [pc, #76]	; (8002ce4 <SystemInit+0x5c>)
 8002c98:	681a      	ldr	r2, [r3, #0]
 8002c9a:	f042 0201 	orr.w	r2, r2, #1
 8002c9e:	601a      	str	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR &= 0xF87FC00CU;
 8002ca0:	6858      	ldr	r0, [r3, #4]
 8002ca2:	4a11      	ldr	r2, [pc, #68]	; (8002ce8 <SystemInit+0x60>)
 8002ca4:	4002      	ands	r2, r0
 8002ca6:	605a      	str	r2, [r3, #4]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= 0xFEF6FFFFU;
 8002ca8:	681a      	ldr	r2, [r3, #0]
 8002caa:	f022 7284 	bic.w	r2, r2, #17301504	; 0x1080000
 8002cae:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8002cb2:	601a      	str	r2, [r3, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8002cb4:	681a      	ldr	r2, [r3, #0]
 8002cb6:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8002cba:	601a      	str	r2, [r3, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE bits */
  RCC->CFGR &= 0xFF80FFFFU;
 8002cbc:	685a      	ldr	r2, [r3, #4]
 8002cbe:	f422 02fe 	bic.w	r2, r2, #8323072	; 0x7f0000
 8002cc2:	605a      	str	r2, [r3, #4]

  /* Reset PREDIV1[3:0] bits */
  RCC->CFGR2 &= 0xFFFFFFF0U;
 8002cc4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002cc6:	f022 020f 	bic.w	r2, r2, #15
 8002cca:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Reset USARTSW[1:0], I2CSW and TIMs bits */
  RCC->CFGR3 &= 0xFF00FCCCU;
 8002ccc:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8002cce:	4a07      	ldr	r2, [pc, #28]	; (8002cec <SystemInit+0x64>)
 8002cd0:	4002      	ands	r2, r0
 8002cd2:	631a      	str	r2, [r3, #48]	; 0x30

  /* Disable all interrupts */
  RCC->CIR = 0x00000000U;
 8002cd4:	2200      	movs	r2, #0
 8002cd6:	609a      	str	r2, [r3, #8]

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8002cd8:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8002cdc:	608b      	str	r3, [r1, #8]
 8002cde:	4770      	bx	lr
 8002ce0:	e000ed00 	.word	0xe000ed00
 8002ce4:	40021000 	.word	0x40021000
 8002ce8:	f87fc00c 	.word	0xf87fc00c
 8002cec:	ff00fccc 	.word	0xff00fccc

08002cf0 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8002cf0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002d28 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8002cf4:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8002cf6:	e003      	b.n	8002d00 <LoopCopyDataInit>

08002cf8 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8002cf8:	4b0c      	ldr	r3, [pc, #48]	; (8002d2c <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8002cfa:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8002cfc:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8002cfe:	3104      	adds	r1, #4

08002d00 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8002d00:	480b      	ldr	r0, [pc, #44]	; (8002d30 <LoopForever+0xa>)
	ldr	r3, =_edata
 8002d02:	4b0c      	ldr	r3, [pc, #48]	; (8002d34 <LoopForever+0xe>)
	adds	r2, r0, r1
 8002d04:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8002d06:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8002d08:	d3f6      	bcc.n	8002cf8 <CopyDataInit>
	ldr	r2, =_sbss
 8002d0a:	4a0b      	ldr	r2, [pc, #44]	; (8002d38 <LoopForever+0x12>)
	b	LoopFillZerobss
 8002d0c:	e002      	b.n	8002d14 <LoopFillZerobss>

08002d0e <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8002d0e:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8002d10:	f842 3b04 	str.w	r3, [r2], #4

08002d14 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8002d14:	4b09      	ldr	r3, [pc, #36]	; (8002d3c <LoopForever+0x16>)
	cmp	r2, r3
 8002d16:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8002d18:	d3f9      	bcc.n	8002d0e <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8002d1a:	f7ff ffb5 	bl	8002c88 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002d1e:	f000 f811 	bl	8002d44 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8002d22:	f7ff fcbf 	bl	80026a4 <main>

08002d26 <LoopForever>:

LoopForever:
    b LoopForever
 8002d26:	e7fe      	b.n	8002d26 <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8002d28:	2000a000 	.word	0x2000a000
	ldr	r3, =_sidata
 8002d2c:	08002e74 	.word	0x08002e74
	ldr	r0, =_sdata
 8002d30:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8002d34:	20000008 	.word	0x20000008
	ldr	r2, =_sbss
 8002d38:	20000008 	.word	0x20000008
	ldr	r3, = _ebss
 8002d3c:	200005a4 	.word	0x200005a4

08002d40 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8002d40:	e7fe      	b.n	8002d40 <ADC1_2_IRQHandler>
	...

08002d44 <__libc_init_array>:
 8002d44:	b570      	push	{r4, r5, r6, lr}
 8002d46:	4e0d      	ldr	r6, [pc, #52]	; (8002d7c <__libc_init_array+0x38>)
 8002d48:	4c0d      	ldr	r4, [pc, #52]	; (8002d80 <__libc_init_array+0x3c>)
 8002d4a:	1ba4      	subs	r4, r4, r6
 8002d4c:	10a4      	asrs	r4, r4, #2
 8002d4e:	2500      	movs	r5, #0
 8002d50:	42a5      	cmp	r5, r4
 8002d52:	d109      	bne.n	8002d68 <__libc_init_array+0x24>
 8002d54:	4e0b      	ldr	r6, [pc, #44]	; (8002d84 <__libc_init_array+0x40>)
 8002d56:	4c0c      	ldr	r4, [pc, #48]	; (8002d88 <__libc_init_array+0x44>)
 8002d58:	f000 f818 	bl	8002d8c <_init>
 8002d5c:	1ba4      	subs	r4, r4, r6
 8002d5e:	10a4      	asrs	r4, r4, #2
 8002d60:	2500      	movs	r5, #0
 8002d62:	42a5      	cmp	r5, r4
 8002d64:	d105      	bne.n	8002d72 <__libc_init_array+0x2e>
 8002d66:	bd70      	pop	{r4, r5, r6, pc}
 8002d68:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8002d6c:	4798      	blx	r3
 8002d6e:	3501      	adds	r5, #1
 8002d70:	e7ee      	b.n	8002d50 <__libc_init_array+0xc>
 8002d72:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8002d76:	4798      	blx	r3
 8002d78:	3501      	adds	r5, #1
 8002d7a:	e7f2      	b.n	8002d62 <__libc_init_array+0x1e>
 8002d7c:	08002e6c 	.word	0x08002e6c
 8002d80:	08002e6c 	.word	0x08002e6c
 8002d84:	08002e6c 	.word	0x08002e6c
 8002d88:	08002e70 	.word	0x08002e70

08002d8c <_init>:
 8002d8c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002d8e:	bf00      	nop
 8002d90:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002d92:	bc08      	pop	{r3}
 8002d94:	469e      	mov	lr, r3
 8002d96:	4770      	bx	lr

08002d98 <_fini>:
 8002d98:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002d9a:	bf00      	nop
 8002d9c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002d9e:	bc08      	pop	{r3}
 8002da0:	469e      	mov	lr, r3
 8002da2:	4770      	bx	lr
